
priority_calc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015e  00800060  000047d2  00004866  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008001be  008001be  000049c4  2**0
                  ALLOC
  3 .stab         0000561c  00000000  00000000  000049c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000263e  00000000  00000000  00009fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c61e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000c7be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000c9ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000edba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00010131  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001130c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  000114cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  000117bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001218d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__vector_1>
       8:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__vector_10>
      2c:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3d       	cpi	r26, 0xD0	; 208
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <main>
      8a:	0c 94 e7 23 	jmp	0x47ce	; 0x47ce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2c 22 	jmp	0x4458	; 0x4458 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 48 22 	jmp	0x4490	; 0x4490 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 38 22 	jmp	0x4470	; 0x4470 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 54 22 	jmp	0x44a8	; 0x44a8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 38 22 	jmp	0x4470	; 0x4470 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 54 22 	jmp	0x44a8	; 0x44a8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2c 22 	jmp	0x4458	; 0x4458 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 48 22 	jmp	0x4490	; 0x4490 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 34 22 	jmp	0x4468	; 0x4468 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e6       	ldi	r22, 0x6F	; 111
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 50 22 	jmp	0x44a0	; 0x44a0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 38 22 	jmp	0x4470	; 0x4470 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 54 22 	jmp	0x44a8	; 0x44a8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 38 22 	jmp	0x4470	; 0x4470 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 54 22 	jmp	0x44a8	; 0x44a8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 38 22 	jmp	0x4470	; 0x4470 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 54 22 	jmp	0x44a8	; 0x44a8 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 35 22 	jmp	0x446a	; 0x446a <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 51 22 	jmp	0x44a2	; 0x44a2 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 3c 22 	jmp	0x4478	; 0x4478 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e9 58       	subi	r30, 0x89	; 137
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <WDT_voidEnable>:
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "WatchDog_interface.h"

void WDT_voidEnable(void){
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
    //enable WDT
    SET_BIT(WDTCR,3);
     e00:	a1 e4       	ldi	r26, 0x41	; 65
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e1 e4       	ldi	r30, 0x41	; 65
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	88 60       	ori	r24, 0x08	; 8
     e0c:	8c 93       	st	X, r24
    //set prescaler
    SET_BIT(WDTCR,0);
     e0e:	a1 e4       	ldi	r26, 0x41	; 65
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e1 e4       	ldi	r30, 0x41	; 65
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	81 60       	ori	r24, 0x01	; 1
     e1a:	8c 93       	st	X, r24
    CLR_BIT(WDTCR,1);
     e1c:	a1 e4       	ldi	r26, 0x41	; 65
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e1 e4       	ldi	r30, 0x41	; 65
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	8d 7f       	andi	r24, 0xFD	; 253
     e28:	8c 93       	st	X, r24
    CLR_BIT(WDTCR,2);
     e2a:	a1 e4       	ldi	r26, 0x41	; 65
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e1 e4       	ldi	r30, 0x41	; 65
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8b 7f       	andi	r24, 0xFB	; 251
     e36:	8c 93       	st	X, r24
    CLR_BIT(WDTCR,4);
     e38:	a1 e4       	ldi	r26, 0x41	; 65
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e1 e4       	ldi	r30, 0x41	; 65
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	8f 7e       	andi	r24, 0xEF	; 239
     e44:	8c 93       	st	X, r24
    CLR_BIT(WDTCR,5);
     e46:	a1 e4       	ldi	r26, 0x41	; 65
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e1 e4       	ldi	r30, 0x41	; 65
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	8f 7d       	andi	r24, 0xDF	; 223
     e52:	8c 93       	st	X, r24
    //enable global interrupt
    SET_BIT(SREG,7);
     e54:	af e5       	ldi	r26, 0x5F	; 95
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	ef e5       	ldi	r30, 0x5F	; 95
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 68       	ori	r24, 0x80	; 128
     e60:	8c 93       	st	X, r24
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <WDT_voidDisable>:
void WDT_voidDisable(void){
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
    //disable WDT
    CLR_BIT(WDTCR,3);
     e70:	a1 e4       	ldi	r26, 0x41	; 65
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e1 e4       	ldi	r30, 0x41	; 65
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	87 7f       	andi	r24, 0xF7	; 247
     e7c:	8c 93       	st	X, r24
    //set prescaler
    SET_BIT(WDTCR,0);
     e7e:	a1 e4       	ldi	r26, 0x41	; 65
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e1 e4       	ldi	r30, 0x41	; 65
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	81 60       	ori	r24, 0x01	; 1
     e8a:	8c 93       	st	X, r24
    SET_BIT(WDTCR,1);
     e8c:	a1 e4       	ldi	r26, 0x41	; 65
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e1 e4       	ldi	r30, 0x41	; 65
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	82 60       	ori	r24, 0x02	; 2
     e98:	8c 93       	st	X, r24
    SET_BIT(WDTCR,2);
     e9a:	a1 e4       	ldi	r26, 0x41	; 65
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e1 e4       	ldi	r30, 0x41	; 65
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	84 60       	ori	r24, 0x04	; 4
     ea6:	8c 93       	st	X, r24
    SET_BIT(WDTCR,4);
     ea8:	a1 e4       	ldi	r26, 0x41	; 65
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e1 e4       	ldi	r30, 0x41	; 65
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 61       	ori	r24, 0x10	; 16
     eb4:	8c 93       	st	X, r24
    SET_BIT(WDTCR,5);
     eb6:	a1 e4       	ldi	r26, 0x41	; 65
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e1 e4       	ldi	r30, 0x41	; 65
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	80 62       	ori	r24, 0x20	; 32
     ec2:	8c 93       	st	X, r24
    //enable global interrupt
    SET_BIT(SREG,7);
     ec4:	af e5       	ldi	r26, 0x5F	; 95
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ef e5       	ldi	r30, 0x5F	; 95
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 68       	ori	r24, 0x80	; 128
     ed0:	8c 93       	st	X, r24
}
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <WDT_voidReset>:

void WDT_voidReset(void){
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
    //reset WDT
    SET_BIT(WDTCR,4);
     ee0:	a1 e4       	ldi	r26, 0x41	; 65
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e1 e4       	ldi	r30, 0x41	; 65
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	80 61       	ori	r24, 0x10	; 16
     eec:	8c 93       	st	X, r24
    CLR_BIT(WDTCR,4);
     eee:	a1 e4       	ldi	r26, 0x41	; 65
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e1 e4       	ldi	r30, 0x41	; 65
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8f 7e       	andi	r24, 0xEF	; 239
     efa:	8c 93       	st	X, r24
    //enable global interrupt
    SET_BIT(SREG,7);
     efc:	af e5       	ldi	r26, 0x5F	; 95
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ef e5       	ldi	r30, 0x5F	; 95
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	80 68       	ori	r24, 0x80	; 128
     f08:	8c 93       	st	X, r24
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <USART_voidInit>:
#include "USART_interface.h"



void USART_voidInit(void)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	0f 92       	push	r0
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC_value=0;
     f1a:	19 82       	std	Y+1, r1	; 0x01

	//select UCSRC register
    SET_BIT(Local_u8UCSRC_value,7);
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	80 68       	ori	r24, 0x80	; 128
     f20:	89 83       	std	Y+1, r24	; 0x01

	//select Asynchronous mode
	CLR_BIT(Local_u8UCSRC_value,6);
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	8f 7b       	andi	r24, 0xBF	; 191
     f26:	89 83       	std	Y+1, r24	; 0x01

	//Disable parity mode
	CLR_BIT(Local_u8UCSRC_value,4);
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	8f 7e       	andi	r24, 0xEF	; 239
     f2c:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC_value,5);
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	8f 7d       	andi	r24, 0xDF	; 223
     f32:	89 83       	std	Y+1, r24	; 0x01

	//select stop bit to be 1 bit
	CLR_BIT(Local_u8UCSRC_value,3);
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	87 7f       	andi	r24, 0xF7	; 247
     f38:	89 83       	std	Y+1, r24	; 0x01

	//select 8 bit character size
	SET_BIT(Local_u8UCSRC_value,2);
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	84 60       	ori	r24, 0x04	; 4
     f3e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRC_value,1);
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	82 60       	ori	r24, 0x02	; 2
     f44:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,2);
     f46:	aa e2       	ldi	r26, 0x2A	; 42
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ea e2       	ldi	r30, 0x2A	; 42
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8b 7f       	andi	r24, 0xFB	; 251
     f52:	8c 93       	st	X, r24


	UCSRC=Local_u8UCSRC_value;
     f54:	e0 e4       	ldi	r30, 0x40	; 64
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	80 83       	st	Z, r24

	//Baud Rate
	UBRRL=51;
     f5c:	e9 e2       	ldi	r30, 0x29	; 41
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	83 e3       	ldi	r24, 0x33	; 51
     f62:	80 83       	st	Z, r24

	//enable receiver
     SET_BIT(UCSRB,4);
     f64:	aa e2       	ldi	r26, 0x2A	; 42
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	ea e2       	ldi	r30, 0x2A	; 42
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 61       	ori	r24, 0x10	; 16
     f70:	8c 93       	st	X, r24
	//enable transmitter
     SET_BIT(UCSRB,3);
     f72:	aa e2       	ldi	r26, 0x2A	; 42
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	ea e2       	ldi	r30, 0x2A	; 42
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	88 60       	ori	r24, 0x08	; 8
     f7e:	8c 93       	st	X, r24

}
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <USART_voidTransmitData>:

void USART_voidTransmitData(u8 Copy_u8Data)
{// Wait until transmit date buffer is empty
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	89 83       	std	Y+1, r24	; 0x01
   while(GET_BIT(UCSRA,5)==0);
     f94:	eb e2       	ldi	r30, 0x2B	; 43
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	82 95       	swap	r24
     f9c:	86 95       	lsr	r24
     f9e:	87 70       	andi	r24, 0x07	; 7
     fa0:	88 2f       	mov	r24, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	81 70       	andi	r24, 0x01	; 1
     fa6:	90 70       	andi	r25, 0x00	; 0
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	a1 f3       	breq	.-24     	; 0xf94 <USART_voidTransmitData+0xc>

   //Clear flag
   SET_BIT(UCSRA,5);
     fac:	ab e2       	ldi	r26, 0x2B	; 43
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	eb e2       	ldi	r30, 0x2B	; 43
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	80 62       	ori	r24, 0x20	; 32
     fb8:	8c 93       	st	X, r24


   UDR=Copy_u8Data;
     fba:	ec e2       	ldi	r30, 0x2C	; 44
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	80 83       	st	Z, r24



}
     fc2:	0f 90       	pop	r0
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <USART_u8ReceiveData>:

u8 USART_u8ReceiveData(void)
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
	 while(GET_BIT(UCSRA,7)==0);
     fd2:	eb e2       	ldi	r30, 0x2B	; 43
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	88 23       	and	r24, r24
     fda:	dc f7       	brge	.-10     	; 0xfd2 <USART_u8ReceiveData+0x8>



	return UDR;
     fdc:	ec e2       	ldi	r30, 0x2C	; 44
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
}
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <USART_voidTransmitString>:

void USART_voidTransmitString(u8 *Copy_u8String)
{
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <USART_voidTransmitString+0x6>
     fee:	0f 92       	push	r0
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	9b 83       	std	Y+3, r25	; 0x03
     ff6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Counter=0;
     ff8:	19 82       	std	Y+1, r1	; 0x01
     ffa:	0e c0       	rjmp	.+28     	; 0x1018 <USART_voidTransmitString+0x30>
    while(Copy_u8String[Local_u8Counter]!='\0')
    {
        USART_voidTransmitData(Copy_u8String[Local_u8Counter]);
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	9b 81       	ldd	r25, Y+3	; 0x03
    1006:	fc 01       	movw	r30, r24
    1008:	e2 0f       	add	r30, r18
    100a:	f3 1f       	adc	r31, r19
    100c:	80 81       	ld	r24, Z
    100e:	0e 94 c4 07 	call	0xf88	; 0xf88 <USART_voidTransmitData>
        Local_u8Counter++;
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	8f 5f       	subi	r24, 0xFF	; 255
    1016:	89 83       	std	Y+1, r24	; 0x01
}

void USART_voidTransmitString(u8 *Copy_u8String)
{
    u8 Local_u8Counter=0;
    while(Copy_u8String[Local_u8Counter]!='\0')
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	9b 81       	ldd	r25, Y+3	; 0x03
    1022:	fc 01       	movw	r30, r24
    1024:	e2 0f       	add	r30, r18
    1026:	f3 1f       	adc	r31, r19
    1028:	80 81       	ld	r24, Z
    102a:	88 23       	and	r24, r24
    102c:	39 f7       	brne	.-50     	; 0xffc <USART_voidTransmitString+0x14>
    {
        USART_voidTransmitData(Copy_u8String[Local_u8Counter]);
        Local_u8Counter++;
    }
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <TWI_voidMasterInit>:
#include <util/delay.h>

#include "TWI_interface.h"

//pass 0 in the master if the master will not be addressed
void TWI_voidMasterInit(u8 Copy_u8MasterAddress){
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	0f 92       	push	r0
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	89 83       	std	Y+1, r24	; 0x01
   /*set clock frquency
     set TWBR to 2
   */
  //original
   TWBR = 2;
    1046:	e0 e2       	ldi	r30, 0x20	; 32
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	82 e0       	ldi	r24, 0x02	; 2
    104c:	80 83       	st	Z, r24
    //working
   //  TWBR=255;
   /*set prescaler to 1
     set TWPS0 and TWPS1 to 0
   */
   CLR_BIT(TWSR,TWPS0);
    104e:	a1 e2       	ldi	r26, 0x21	; 33
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e1 e2       	ldi	r30, 0x21	; 33
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	8e 7f       	andi	r24, 0xFE	; 254
    105a:	8c 93       	st	X, r24
   CLR_BIT(TWSR,TWPS1);
    105c:	a1 e2       	ldi	r26, 0x21	; 33
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e1 e2       	ldi	r30, 0x21	; 33
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8d 7f       	andi	r24, 0xFD	; 253
    1068:	8c 93       	st	X, r24
   //set master address
 if(Copy_u8MasterAddress != 0){
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	88 23       	and	r24, r24
    106e:	29 f0       	breq	.+10     	; 0x107a <TWI_voidMasterInit+0x40>
   /*set master address*/
   TWAR = Copy_u8MasterAddress << 1; //shift left to make the last bit zero... this is the read/write bit //bits men 1 ly 7 dol el address
    1070:	e2 e2       	ldi	r30, 0x22	; 34
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	88 0f       	add	r24, r24
    1078:	80 83       	st	Z, r24
 }
   /*enable TWI*/
   SET_BIT(TWCR,TWEN);
    107a:	a6 e5       	ldi	r26, 0x56	; 86
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e6 e5       	ldi	r30, 0x56	; 86
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	84 60       	ori	r24, 0x04	; 4
    1086:	8c 93       	st	X, r24
}
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <TWI_voidSlaveInit>:

void TWI_voidSlaveInit(u8 Copy_u8SlaveAddress){
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	89 83       	std	Y+1, r24	; 0x01
   /*set slave address*/
   TWAR = Copy_u8SlaveAddress << 1;
    109c:	e2 e2       	ldi	r30, 0x22	; 34
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	88 0f       	add	r24, r24
    10a4:	80 83       	st	Z, r24
   /*Enable TWI*/
   SET_BIT(TWCR,TWEN);
    10a6:	a6 e5       	ldi	r26, 0x56	; 86
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e6 e5       	ldi	r30, 0x56	; 86
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	8c 93       	st	X, r24
}
    10b4:	0f 90       	pop	r0
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <TWI_SendStartCondition>:

TWI_ErrStatus TWI_SendStartCondition(void){
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	0f 92       	push	r0
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62

   TWI_ErrStatus Local_ErrorStatus = NoError;
    10c6:	19 82       	std	Y+1, r1	; 0x01

   /*send start condition on the bus*/
   SET_BIT(TWCR,TWSTA);
    10c8:	a6 e5       	ldi	r26, 0x56	; 86
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e6 e5       	ldi	r30, 0x56	; 86
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	80 62       	ori	r24, 0x20	; 32
    10d4:	8c 93       	st	X, r24

   /*clear interrupt flag to start the previous operation*/
   SET_BIT(TWCR,TWINT);
    10d6:	a6 e5       	ldi	r26, 0x56	; 86
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e6 e5       	ldi	r30, 0x56	; 86
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	80 68       	ori	r24, 0x80	; 128
    10e2:	8c 93       	st	X, r24

   /*wait until the start condition is sent*/
   /*wait until the interrupt flag is raised again and the previous operation is completed*/
   while(GET_BIT(TWCR,TWINT) == 0);
    10e4:	e6 e5       	ldi	r30, 0x56	; 86
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	88 23       	and	r24, r24
    10ec:	dc f7       	brge	.-10     	; 0x10e4 <TWI_SendStartCondition+0x28>

   /*check the status of the start condition*/
   //bits from 3 to 7 are status bits (0xf8) and the last two bits are reserved bits and they are always zero
   if((TWSR & 0xF8) != START_ACK){
    10ee:	e1 e2       	ldi	r30, 0x21	; 33
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	88 7f       	andi	r24, 0xF8	; 248
    10fa:	90 70       	andi	r25, 0x00	; 0
    10fc:	88 30       	cpi	r24, 0x08	; 8
    10fe:	91 05       	cpc	r25, r1
    1100:	11 f0       	breq	.+4      	; 0x1106 <TWI_SendStartCondition+0x4a>
       Local_ErrorStatus = StartConditionErr;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	89 83       	std	Y+1, r24	; 0x01
   }

   return Local_ErrorStatus;
    1106:	89 81       	ldd	r24, Y+1	; 0x01

}
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <TWI_SendRepeatedStart>:

//cases for repeated start
/*law 3ayez a8yar address elslave ely baklemo aw ha8yar el operation men read ly write w el 3aks*/
TWI_ErrStatus TWI_SendRepeatedStart(void){
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	0f 92       	push	r0
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62

       TWI_ErrStatus Local_ErrorStatus = NoError;
    111a:	19 82       	std	Y+1, r1	; 0x01

       /*send repeated start condition on the bus*/
       SET_BIT(TWCR,TWSTA);
    111c:	a6 e5       	ldi	r26, 0x56	; 86
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e6 e5       	ldi	r30, 0x56	; 86
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	80 62       	ori	r24, 0x20	; 32
    1128:	8c 93       	st	X, r24

       /*clear interrupt flag to start the previous operation*/
       SET_BIT(TWCR,TWINT);
    112a:	a6 e5       	ldi	r26, 0x56	; 86
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e6 e5       	ldi	r30, 0x56	; 86
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	80 68       	ori	r24, 0x80	; 128
    1136:	8c 93       	st	X, r24

       /*wait until the repeated start condition is sent*/
       /*wait until the interrupt flag is raised again and the previous operation is completed*/
       while(GET_BIT(TWCR,TWINT) == 0);
    1138:	e6 e5       	ldi	r30, 0x56	; 86
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	88 23       	and	r24, r24
    1140:	dc f7       	brge	.-10     	; 0x1138 <TWI_SendRepeatedStart+0x28>

       /*check the status of the repeated start condition*/
       //bits from 3 to 7 are status bits (0xf8) and the last two bits are reserved bits and they are always zero
       if((TWSR & 0xF8) != REP_START_ACK){
    1142:	e1 e2       	ldi	r30, 0x21	; 33
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	88 7f       	andi	r24, 0xF8	; 248
    114e:	90 70       	andi	r25, 0x00	; 0
    1150:	80 31       	cpi	r24, 0x10	; 16
    1152:	91 05       	cpc	r25, r1
    1154:	11 f0       	breq	.+4      	; 0x115a <TWI_SendRepeatedStart+0x4a>
           Local_ErrorStatus = RepeatedStartErr;
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	89 83       	std	Y+1, r24	; 0x01
       }

       return Local_ErrorStatus;
    115a:	89 81       	ldd	r24, Y+1	; 0x01

}
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <TWI_SendSlaveAddressWithWrite>:

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress){
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	00 d0       	rcall	.+0      	; 0x116a <TWI_SendSlaveAddressWithWrite+0x6>
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	8a 83       	std	Y+2, r24	; 0x02
   TWI_ErrStatus Local_ErrorStatus = NoError;
    1170:	19 82       	std	Y+1, r1	; 0x01

   /*clear start condition bit*/
   CLR_BIT(TWCR,TWSTA);
    1172:	a6 e5       	ldi	r26, 0x56	; 86
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e6 e5       	ldi	r30, 0x56	; 86
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	8f 7d       	andi	r24, 0xDF	; 223
    117e:	8c 93       	st	X, r24

   /*set slave address in the 7 most significant bits in the data register*/
   TWDR = Copy_u8SlaveAddress << 1;
    1180:	e3 e2       	ldi	r30, 0x23	; 35
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	88 0f       	add	r24, r24
    1188:	80 83       	st	Z, r24

   /*clear read/write bit to write on the bus*/
   CLR_BIT(TWDR,0);
    118a:	a3 e2       	ldi	r26, 0x23	; 35
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e3 e2       	ldi	r30, 0x23	; 35
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	8e 7f       	andi	r24, 0xFE	; 254
    1196:	8c 93       	st	X, r24

   /*clear interrupt flag to start the previous operation*/
   SET_BIT(TWCR,TWINT);
    1198:	a6 e5       	ldi	r26, 0x56	; 86
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e6 e5       	ldi	r30, 0x56	; 86
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	80 68       	ori	r24, 0x80	; 128
    11a4:	8c 93       	st	X, r24

   //TWCR=(1<<TWINT)|(1<<TWEN);
   /*wait until the slave address is sent*/
   /*wait until the interrupt flag is raised again and the previous operation is completed*/
   while(GET_BIT(TWCR,TWINT) == 0);
    11a6:	e6 e5       	ldi	r30, 0x56	; 86
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	88 23       	and	r24, r24
    11ae:	dc f7       	brge	.-10     	; 0x11a6 <TWI_SendSlaveAddressWithWrite+0x42>

   /*check the status of the slave address*/
   //bits from 3 to 7 are status bits (0xf8) and the last two bits are reserved bits and they are always zero
   if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK){
    11b0:	e1 e2       	ldi	r30, 0x21	; 33
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	88 7f       	andi	r24, 0xF8	; 248
    11bc:	90 70       	andi	r25, 0x00	; 0
    11be:	88 31       	cpi	r24, 0x18	; 24
    11c0:	91 05       	cpc	r25, r1
    11c2:	11 f0       	breq	.+4      	; 0x11c8 <TWI_SendSlaveAddressWithWrite+0x64>
       Local_ErrorStatus = SlaveAddressWithWriteErr;
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	89 83       	std	Y+1, r24	; 0x01
   }

   return Local_ErrorStatus;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <TWI_SendSlaveAddressWithRead>:

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress){
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	00 d0       	rcall	.+0      	; 0x11da <TWI_SendSlaveAddressWithRead+0x6>
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	8a 83       	std	Y+2, r24	; 0x02
   TWI_ErrStatus Local_ErrorStatus = NoError;
    11e0:	19 82       	std	Y+1, r1	; 0x01

   /*clear start condition bit*/
   CLR_BIT(TWCR,TWSTA);
    11e2:	a6 e5       	ldi	r26, 0x56	; 86
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e6 e5       	ldi	r30, 0x56	; 86
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	8f 7d       	andi	r24, 0xDF	; 223
    11ee:	8c 93       	st	X, r24

   /*set slave address in the 7 most significant bits in the data register*/
   TWDR = Copy_u8SlaveAddress << 1;
    11f0:	e3 e2       	ldi	r30, 0x23	; 35
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	88 0f       	add	r24, r24
    11f8:	80 83       	st	Z, r24

   /*set read/write bit to read from the bus*/
   SET_BIT(TWDR,0);
    11fa:	a3 e2       	ldi	r26, 0x23	; 35
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e3 e2       	ldi	r30, 0x23	; 35
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	81 60       	ori	r24, 0x01	; 1
    1206:	8c 93       	st	X, r24

   /*clear interrupt flag to start the previous operation*/
   SET_BIT(TWCR,TWINT);
    1208:	a6 e5       	ldi	r26, 0x56	; 86
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e6 e5       	ldi	r30, 0x56	; 86
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	80 68       	ori	r24, 0x80	; 128
    1214:	8c 93       	st	X, r24

   /*wait until the slave address is sent*/
   /*wait until the interrupt flag is raised again and the previous operation is completed*/
   while(GET_BIT(TWCR,TWINT) == 0);
    1216:	e6 e5       	ldi	r30, 0x56	; 86
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	88 23       	and	r24, r24
    121e:	dc f7       	brge	.-10     	; 0x1216 <TWI_SendSlaveAddressWithRead+0x42>

   /*check the status of the slave address*/
   //bits from 3 to 7 are status bits (0xf8) and the last two bits are reserved bits and they are always zero
   if((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK){
    1220:	e1 e2       	ldi	r30, 0x21	; 33
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 2f       	mov	r24, r24
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	88 7f       	andi	r24, 0xF8	; 248
    122c:	90 70       	andi	r25, 0x00	; 0
    122e:	80 34       	cpi	r24, 0x40	; 64
    1230:	91 05       	cpc	r25, r1
    1232:	11 f0       	breq	.+4      	; 0x1238 <TWI_SendSlaveAddressWithRead+0x64>
       Local_ErrorStatus = SlaveAddressWithReadErr;
    1234:	84 e0       	ldi	r24, 0x04	; 4
    1236:	89 83       	std	Y+1, r24	; 0x01
   }

   return Local_ErrorStatus;
    1238:	89 81       	ldd	r24, Y+1	; 0x01
}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte){
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <TWI_MasterWriteDataByte+0x6>
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	8a 83       	std	Y+2, r24	; 0x02
   TWI_ErrStatus Local_ErrorStatus = NoError;
    1250:	19 82       	std	Y+1, r1	; 0x01

   /*write data byte in the data register*/
   TWDR = Copy_u8DataByte;
    1252:	e3 e2       	ldi	r30, 0x23	; 35
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	80 83       	st	Z, r24

   /*clear interrupt flag to start the previous operation*/
   SET_BIT(TWCR,TWINT);
    125a:	a6 e5       	ldi	r26, 0x56	; 86
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e6 e5       	ldi	r30, 0x56	; 86
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	80 68       	ori	r24, 0x80	; 128
    1266:	8c 93       	st	X, r24

   /*wait until the data byte is sent*/
   /*wait until the interrupt flag is raised again and the previous operation is completed*/
   while(GET_BIT(TWCR,TWINT) == 0);
    1268:	e6 e5       	ldi	r30, 0x56	; 86
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	88 23       	and	r24, r24
    1270:	dc f7       	brge	.-10     	; 0x1268 <TWI_MasterWriteDataByte+0x24>

   /*check the status of the data byte*/
   //bits from 3 to 7 are status bits (0xf8) and the last two bits are reserved bits and they are always zero
   if((TWSR & 0xF8) != MSTR_WR_BYTE_ACK){
    1272:	e1 e2       	ldi	r30, 0x21	; 33
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	88 7f       	andi	r24, 0xF8	; 248
    127e:	90 70       	andi	r25, 0x00	; 0
    1280:	88 32       	cpi	r24, 0x28	; 40
    1282:	91 05       	cpc	r25, r1
    1284:	11 f0       	breq	.+4      	; 0x128a <TWI_MasterWriteDataByte+0x46>
       Local_ErrorStatus = MasterWriteDataByteErr;
    1286:	85 e0       	ldi	r24, 0x05	; 5
    1288:	89 83       	std	Y+1, r24	; 0x01
   }

   return Local_ErrorStatus;
    128a:	89 81       	ldd	r24, Y+1	; 0x01
}
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8 *Copy_pu8DataByte){
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <TWI_MasterReadDataByte+0x6>
    129c:	0f 92       	push	r0
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	9b 83       	std	Y+3, r25	; 0x03
    12a4:	8a 83       	std	Y+2, r24	; 0x02
   TWI_ErrStatus Local_ErrorStatus = NoError;
    12a6:	19 82       	std	Y+1, r1	; 0x01

   /*enable ACK bit after receiving data*/
   /*master sends ack after receiving data*/
   SET_BIT(TWCR,TWEA);
    12a8:	a6 e5       	ldi	r26, 0x56	; 86
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e6 e5       	ldi	r30, 0x56	; 86
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	80 64       	ori	r24, 0x40	; 64
    12b4:	8c 93       	st	X, r24

   /*clear interrupt flag to start the previous operation*/
   SET_BIT(TWCR,TWINT);
    12b6:	a6 e5       	ldi	r26, 0x56	; 86
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e6 e5       	ldi	r30, 0x56	; 86
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	80 68       	ori	r24, 0x80	; 128
    12c2:	8c 93       	st	X, r24

   /*wait until the data byte is received*/
   /*wait until the interrupt flag is raised again and the previous operation is completed*/
   while(GET_BIT(TWCR,TWINT) == 0);
    12c4:	e6 e5       	ldi	r30, 0x56	; 86
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	88 23       	and	r24, r24
    12cc:	dc f7       	brge	.-10     	; 0x12c4 <TWI_MasterReadDataByte+0x2e>

   /*check the status of the data byte*/
   //bits from 3 to 7 are status bits (0xf8) and the last two bits are reserved bits and they are always zero
   if((TWSR & 0xF8) != MSTR_RD_BYTE_WITH_ACK){
    12ce:	e1 e2       	ldi	r30, 0x21	; 33
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	88 7f       	andi	r24, 0xF8	; 248
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	80 35       	cpi	r24, 0x50	; 80
    12de:	91 05       	cpc	r25, r1
    12e0:	19 f0       	breq	.+6      	; 0x12e8 <TWI_MasterReadDataByte+0x52>
       Local_ErrorStatus = MasterReadDataByteErr;
    12e2:	86 e0       	ldi	r24, 0x06	; 6
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <TWI_MasterReadDataByte+0x5e>
   }
   else{
       /*read data byte from the data register*/
       *Copy_pu8DataByte = TWDR;
    12e8:	e3 e2       	ldi	r30, 0x23	; 35
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	ea 81       	ldd	r30, Y+2	; 0x02
    12f0:	fb 81       	ldd	r31, Y+3	; 0x03
    12f2:	80 83       	st	Z, r24
   }

   return Local_ErrorStatus;
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <TWI_SendStopCondition>:

void TWI_SendStopCondition(void){
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
   /*send stop condition on the bus*/
   /*generate stop condition on the bus*/
   SET_BIT(TWCR,TWSTO);
    130a:	a6 e5       	ldi	r26, 0x56	; 86
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e6 e5       	ldi	r30, 0x56	; 86
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	80 61       	ori	r24, 0x10	; 16
    1316:	8c 93       	st	X, r24

   /*clear interrupt flag to start the previous operation*/
   /*ba3mel clear lel flag 3ashan el ta3delat ely ana 3amala a3melha fy el registers elhardware yenfezha 3al bus */
   /*3ashan tol ma el flag mesh ma3molo clear el clock wa2fa w mesh sha8ala*/
   SET_BIT(TWCR,TWINT);
    1318:	a6 e5       	ldi	r26, 0x56	; 86
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e6 e5       	ldi	r30, 0x56	; 86
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	80 68       	ori	r24, 0x80	; 128
    1324:	8c 93       	st	X, r24
}
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <TIMER_voidTimer0OVFInit>:
  void (*Global_pvICUFunction)(void)=NULL_ptr;

//Timer 0

void TIMER_voidTimer0OVFInit(void)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    //normal mode
    CLR_BIT(TCCR0,WGM00); //bit 6
    1334:	a3 e5       	ldi	r26, 0x53	; 83
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e3 e5       	ldi	r30, 0x53	; 83
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	8f 7b       	andi	r24, 0xBF	; 191
    1340:	8c 93       	st	X, r24
    CLR_BIT(TCCR0,WGM01); //bit 3
    1342:	a3 e5       	ldi	r26, 0x53	; 83
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e3 e5       	ldi	r30, 0x53	; 83
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	87 7f       	andi	r24, 0xF7	; 247
    134e:	8c 93       	st	X, r24
    //prescalar=8
    SET_BIT(TCCR0,CS01); //bit 1
    1350:	a3 e5       	ldi	r26, 0x53	; 83
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e3 e5       	ldi	r30, 0x53	; 83
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	82 60       	ori	r24, 0x02	; 2
    135c:	8c 93       	st	X, r24
    CLR_BIT(TCCR0,CS00); //bit 0
    135e:	a3 e5       	ldi	r26, 0x53	; 83
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e3 e5       	ldi	r30, 0x53	; 83
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	8e 7f       	andi	r24, 0xFE	; 254
    136a:	8c 93       	st	X, r24
    CLR_BIT(TCCR0,CS02); //bit 2
    136c:	a3 e5       	ldi	r26, 0x53	; 83
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e3 e5       	ldi	r30, 0x53	; 83
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	8b 7f       	andi	r24, 0xFB	; 251
    1378:	8c 93       	st	X, r24
    //enable overflow interrupt
    SET_BIT(TIMSK,TOIE0); //bit 0
    137a:	a9 e5       	ldi	r26, 0x59	; 89
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e9 e5       	ldi	r30, 0x59	; 89
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	81 60       	ori	r24, 0x01	; 1
    1386:	8c 93       	st	X, r24
    //enable global interrupt
    //SET_BIT(SREG,7);
    //set timer register (preload value)
    TCNT0=192;
    1388:	e2 e5       	ldi	r30, 0x52	; 82
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 ec       	ldi	r24, 0xC0	; 192
    138e:	80 83       	st	Z, r24
}
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <TIMER_voidTimer0CTCInit>:

void TIMER_voidTimer0CTCInit(void){
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    //CTC mode
     SET_BIT(TCCR0,WGM01); //bit 3
    139e:	a3 e5       	ldi	r26, 0x53	; 83
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e3 e5       	ldi	r30, 0x53	; 83
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	88 60       	ori	r24, 0x08	; 8
    13aa:	8c 93       	st	X, r24
     CLR_BIT(TCCR0,WGM00); //bit 6
    13ac:	a3 e5       	ldi	r26, 0x53	; 83
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e3 e5       	ldi	r30, 0x53	; 83
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8f 7b       	andi	r24, 0xBF	; 191
    13b8:	8c 93       	st	X, r24
    //prescalar=8
    SET_BIT(TCCR0,CS01); //bit 1
    13ba:	a3 e5       	ldi	r26, 0x53	; 83
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e3 e5       	ldi	r30, 0x53	; 83
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	82 60       	ori	r24, 0x02	; 2
    13c6:	8c 93       	st	X, r24
    CLR_BIT(TCCR0,CS00); //bit 0
    13c8:	a3 e5       	ldi	r26, 0x53	; 83
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e3 e5       	ldi	r30, 0x53	; 83
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	8e 7f       	andi	r24, 0xFE	; 254
    13d4:	8c 93       	st	X, r24
    CLR_BIT(TCCR0,CS02); //bit 2
    13d6:	a3 e5       	ldi	r26, 0x53	; 83
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e3 e5       	ldi	r30, 0x53	; 83
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8b 7f       	andi	r24, 0xFB	; 251
    13e2:	8c 93       	st	X, r24
    //enable compare match interrupt
    SET_BIT(TIMSK,OCIE0); //bit 1
    13e4:	a9 e5       	ldi	r26, 0x59	; 89
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e9 e5       	ldi	r30, 0x59	; 89
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	82 60       	ori	r24, 0x02	; 2
    13f0:	8c 93       	st	X, r24
    //enable global interrupt
   // SET_BIT(SREG,7);
    // //set timer register (preload value)
    // OCR0=192;

}
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <TIMER_voidTimer0SetCompareMatchValue>:
void TIMER_voidTimer0SetCompareMatchValue(u8 Copy_u8CompareMatchValue)
{
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	0f 92       	push	r0
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	89 83       	std	Y+1, r24	; 0x01
    OCR0=Copy_u8CompareMatchValue;
    1404:	ec e5       	ldi	r30, 0x5C	; 92
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	80 83       	st	Z, r24
}
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <TIMER_voidSetBusyWaitTimer0_ms>:


//disable global interrupt in CTC mode function before using this function
void TIMER_voidSetBusyWaitTimer0_ms(u32 Copy_u32Time_ms)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	00 d0       	rcall	.+0      	; 0x141a <TIMER_voidSetBusyWaitTimer0_ms+0x6>
    141a:	00 d0       	rcall	.+0      	; 0x141c <TIMER_voidSetBusyWaitTimer0_ms+0x8>
    141c:	00 d0       	rcall	.+0      	; 0x141e <TIMER_voidSetBusyWaitTimer0_ms+0xa>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	9e 83       	std	Y+6, r25	; 0x06
    1424:	8d 83       	std	Y+5, r24	; 0x05
    TIMER_voidTimer0SetCompareMatchValue(250);
    1426:	8a ef       	ldi	r24, 0xFA	; 250
    1428:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <TIMER_voidTimer0SetCompareMatchValue>
    //yestana kam ms
   for(u16 Local_u16Counter1=0;Local_u16Counter1<Copy_u32Time_ms;Local_u16Counter1++)
    142c:	1c 82       	std	Y+4, r1	; 0x04
    142e:	1b 82       	std	Y+3, r1	; 0x03
    1430:	23 c0       	rjmp	.+70     	; 0x1478 <TIMER_voidSetBusyWaitTimer0_ms+0x64>
    {
        //yestana 1ms
      for(u16 Local_u16Counter2=0;Local_u16Counter2<4;Local_u16Counter2++)
    1432:	1a 82       	std	Y+2, r1	; 0x02
    1434:	19 82       	std	Y+1, r1	; 0x01
    1436:	16 c0       	rjmp	.+44     	; 0x1464 <TIMER_voidSetBusyWaitTimer0_ms+0x50>
        {
            //wait for flag to be set (polling)
            while(GET_BIT(TIFR,OCF0)==0);
    1438:	e8 e5       	ldi	r30, 0x58	; 88
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	86 95       	lsr	r24
    1440:	88 2f       	mov	r24, r24
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	81 70       	andi	r24, 0x01	; 1
    1446:	90 70       	andi	r25, 0x00	; 0
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	b1 f3       	breq	.-20     	; 0x1438 <TIMER_voidSetBusyWaitTimer0_ms+0x24>
            //clear flag
            SET_BIT(TIFR,OCF0);
    144c:	a8 e5       	ldi	r26, 0x58	; 88
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e8 e5       	ldi	r30, 0x58	; 88
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	82 60       	ori	r24, 0x02	; 2
    1458:	8c 93       	st	X, r24
    TIMER_voidTimer0SetCompareMatchValue(250);
    //yestana kam ms
   for(u16 Local_u16Counter1=0;Local_u16Counter1<Copy_u32Time_ms;Local_u16Counter1++)
    {
        //yestana 1ms
      for(u16 Local_u16Counter2=0;Local_u16Counter2<4;Local_u16Counter2++)
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	9a 81       	ldd	r25, Y+2	; 0x02
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	91 05       	cpc	r25, r1
    146c:	28 f3       	brcs	.-54     	; 0x1438 <TIMER_voidSetBusyWaitTimer0_ms+0x24>
//disable global interrupt in CTC mode function before using this function
void TIMER_voidSetBusyWaitTimer0_ms(u32 Copy_u32Time_ms)
{
    TIMER_voidTimer0SetCompareMatchValue(250);
    //yestana kam ms
   for(u16 Local_u16Counter1=0;Local_u16Counter1<Copy_u32Time_ms;Local_u16Counter1++)
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	9c 83       	std	Y+4, r25	; 0x04
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	2b 81       	ldd	r18, Y+3	; 0x03
    147a:	3c 81       	ldd	r19, Y+4	; 0x04
    147c:	8d 81       	ldd	r24, Y+5	; 0x05
    147e:	9e 81       	ldd	r25, Y+6	; 0x06
    1480:	28 17       	cp	r18, r24
    1482:	39 07       	cpc	r19, r25
    1484:	b0 f2       	brcs	.-84     	; 0x1432 <TIMER_voidSetBusyWaitTimer0_ms+0x1e>
            SET_BIT(TIFR,OCF0);

       }

    }
}
    1486:	26 96       	adiw	r28, 0x06	; 6
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <TIMER_voidTimer1Init>:


//*********************************************************************************
void TIMER_voidTimer1Init(void)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
	//set prescaler   div by 8
	CLR_BIT(TCCR1B,0);
    14a0:	ae e4       	ldi	r26, 0x4E	; 78
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	ee e4       	ldi	r30, 0x4E	; 78
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8e 7f       	andi	r24, 0xFE	; 254
    14ac:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    14ae:	ae e4       	ldi	r26, 0x4E	; 78
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	ee e4       	ldi	r30, 0x4E	; 78
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	82 60       	ori	r24, 0x02	; 2
    14ba:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    14bc:	ae e4       	ldi	r26, 0x4E	; 78
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	ee e4       	ldi	r30, 0x4E	; 78
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8b 7f       	andi	r24, 0xFB	; 251
    14c8:	8c 93       	st	X, r24


	//set pwm mode clear on compare set at top
	SET_BIT(TCCR1A,7);
    14ca:	af e4       	ldi	r26, 0x4F	; 79
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	ef e4       	ldi	r30, 0x4F	; 79
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	80 68       	ori	r24, 0x80	; 128
    14d6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,6);
    14d8:	af e4       	ldi	r26, 0x4F	; 79
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	ef e4       	ldi	r30, 0x4F	; 79
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8f 7b       	andi	r24, 0xBF	; 191
    14e4:	8c 93       	st	X, r24


	//set mode 14
	CLR_BIT(TCCR1A,0);
    14e6:	af e4       	ldi	r26, 0x4F	; 79
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	ef e4       	ldi	r30, 0x4F	; 79
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	8e 7f       	andi	r24, 0xFE	; 254
    14f2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
    14f4:	af e4       	ldi	r26, 0x4F	; 79
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	ef e4       	ldi	r30, 0x4F	; 79
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	82 60       	ori	r24, 0x02	; 2
    1500:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    1502:	ae e4       	ldi	r26, 0x4E	; 78
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	ee e4       	ldi	r30, 0x4E	; 78
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	88 60       	ori	r24, 0x08	; 8
    150e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    1510:	ae e4       	ldi	r26, 0x4E	; 78
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	ee e4       	ldi	r30, 0x4E	; 78
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	80 61       	ori	r24, 0x10	; 16
    151c:	8c 93       	st	X, r24
//	CLR_BIT(TCCR1B,4);
	//enable interrupt
	//SET_BIT(TIMSK,0);


}
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <TIMER_voidTimer1SetOverFlowValue>:



//*********************************************************************************
void TIMER_voidTimer1SetOverFlowValue(u16 Copy_u16OverFlowValue)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <TIMER_voidTimer1SetOverFlowValue+0x6>
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16OverFlowValue;
    1532:	e6 e4       	ldi	r30, 0x46	; 70
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	9a 81       	ldd	r25, Y+2	; 0x02
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	80 83       	st	Z, r24
}
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <TIMER_voidTimer1ChannelASetCompareMatchValue>:

void TIMER_voidTimer1ChannelASetCompareMatchValue(u16 Copy_u16CompareMatchValue)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	00 d0       	rcall	.+0      	; 0x154e <TIMER_voidTimer1ChannelASetCompareMatchValue+0x6>
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01
     OCR1A=Copy_u16CompareMatchValue;
    1556:	ea e4       	ldi	r30, 0x4A	; 74
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	9a 81       	ldd	r25, Y+2	; 0x02
    155e:	91 83       	std	Z+1, r25	; 0x01
    1560:	80 83       	st	Z, r24
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <TIMER_voidTimer2FastPWM>:
//*********************************************************************************
//Timer 2
void TIMER_voidTimer2FastPWM(void)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    //fast PWM mode
    SET_BIT(TCCR2,WGM20); //bit 6
    1574:	a5 e4       	ldi	r26, 0x45	; 69
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e5 e4       	ldi	r30, 0x45	; 69
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	80 64       	ori	r24, 0x40	; 64
    1580:	8c 93       	st	X, r24
    SET_BIT(TCCR2,WGM21); //bit 3
    1582:	a5 e4       	ldi	r26, 0x45	; 69
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e4       	ldi	r30, 0x45	; 69
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	88 60       	ori	r24, 0x08	; 8
    158e:	8c 93       	st	X, r24
    //non inverting mode (clear OC2 on compare match, set OC2 at TOP)
    SET_BIT(TCCR2,COM21); //bit 5
    1590:	a5 e4       	ldi	r26, 0x45	; 69
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e5 e4       	ldi	r30, 0x45	; 69
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	80 62       	ori	r24, 0x20	; 32
    159c:	8c 93       	st	X, r24
    CLR_BIT(TCCR2,COM20); //bit 4
    159e:	a5 e4       	ldi	r26, 0x45	; 69
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e4       	ldi	r30, 0x45	; 69
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	8f 7e       	andi	r24, 0xEF	; 239
    15aa:	8c 93       	st	X, r24
    //prescalar=8
    SET_BIT(TCCR2,CS21); //bit 1
    15ac:	a5 e4       	ldi	r26, 0x45	; 69
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e5 e4       	ldi	r30, 0x45	; 69
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	82 60       	ori	r24, 0x02	; 2
    15b8:	8c 93       	st	X, r24
    CLR_BIT(TCCR2,CS20); //bit 0
    15ba:	a5 e4       	ldi	r26, 0x45	; 69
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e5 e4       	ldi	r30, 0x45	; 69
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8e 7f       	andi	r24, 0xFE	; 254
    15c6:	8c 93       	st	X, r24
    CLR_BIT(TCCR2,CS22); //bit 2
    15c8:	a5 e4       	ldi	r26, 0x45	; 69
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e5 e4       	ldi	r30, 0x45	; 69
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8b 7f       	andi	r24, 0xFB	; 251
    15d4:	8c 93       	st	X, r24
    //set timer register (preload value)
    // OCR2=192;
}
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <TIMER_voidTimer2SetCompareMatchValue>:
void TIMER_voidTimer2SetCompareMatchValue(u8 Copy_u8CompareMatchValue)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	0f 92       	push	r0
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	89 83       	std	Y+1, r24	; 0x01
    OCR2=Copy_u8CompareMatchValue;
    15e8:	e3 e4       	ldi	r30, 0x43	; 67
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	80 83       	st	Z, r24
}
    15f0:	0f 90       	pop	r0
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <TIMER_voidSetBusyWaitTimer2_ms>:

void TIMER_voidSetBusyWaitTimer2_ms(u32 Copy_u32Time_ms)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <TIMER_voidSetBusyWaitTimer2_ms+0x6>
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <TIMER_voidSetBusyWaitTimer2_ms+0x8>
    1600:	00 d0       	rcall	.+0      	; 0x1602 <TIMER_voidSetBusyWaitTimer2_ms+0xa>
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	9e 83       	std	Y+6, r25	; 0x06
    1608:	8d 83       	std	Y+5, r24	; 0x05
    TIMER_voidTimer2SetCompareMatchValue(250);
    160a:	8a ef       	ldi	r24, 0xFA	; 250
    160c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <TIMER_voidTimer2SetCompareMatchValue>
    //yestana kam ms
   for(u16 Local_u16Counter1=0;Local_u16Counter1<Copy_u32Time_ms;Local_u16Counter1++)
    1610:	1c 82       	std	Y+4, r1	; 0x04
    1612:	1b 82       	std	Y+3, r1	; 0x03
    1614:	1e c0       	rjmp	.+60     	; 0x1652 <TIMER_voidSetBusyWaitTimer2_ms+0x5a>
    {
        //yestana 1ms
      for(u16 Local_u16Counter2=0;Local_u16Counter2<4;Local_u16Counter2++)
    1616:	1a 82       	std	Y+2, r1	; 0x02
    1618:	19 82       	std	Y+1, r1	; 0x01
    161a:	11 c0       	rjmp	.+34     	; 0x163e <TIMER_voidSetBusyWaitTimer2_ms+0x46>
        {
            //wait for flag to be set (polling)
            while(GET_BIT(TIFR,OCF2)==0);
    161c:	e8 e5       	ldi	r30, 0x58	; 88
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	88 23       	and	r24, r24
    1624:	dc f7       	brge	.-10     	; 0x161c <TIMER_voidSetBusyWaitTimer2_ms+0x24>
            //clear flag
            SET_BIT(TIFR,OCF2);
    1626:	a8 e5       	ldi	r26, 0x58	; 88
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e8 e5       	ldi	r30, 0x58	; 88
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	80 68       	ori	r24, 0x80	; 128
    1632:	8c 93       	st	X, r24
    TIMER_voidTimer2SetCompareMatchValue(250);
    //yestana kam ms
   for(u16 Local_u16Counter1=0;Local_u16Counter1<Copy_u32Time_ms;Local_u16Counter1++)
    {
        //yestana 1ms
      for(u16 Local_u16Counter2=0;Local_u16Counter2<4;Local_u16Counter2++)
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	9a 81       	ldd	r25, Y+2	; 0x02
    1642:	84 30       	cpi	r24, 0x04	; 4
    1644:	91 05       	cpc	r25, r1
    1646:	50 f3       	brcs	.-44     	; 0x161c <TIMER_voidSetBusyWaitTimer2_ms+0x24>

void TIMER_voidSetBusyWaitTimer2_ms(u32 Copy_u32Time_ms)
{
    TIMER_voidTimer2SetCompareMatchValue(250);
    //yestana kam ms
   for(u16 Local_u16Counter1=0;Local_u16Counter1<Copy_u32Time_ms;Local_u16Counter1++)
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	9c 83       	std	Y+4, r25	; 0x04
    1650:	8b 83       	std	Y+3, r24	; 0x03
    1652:	2b 81       	ldd	r18, Y+3	; 0x03
    1654:	3c 81       	ldd	r19, Y+4	; 0x04
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	28 17       	cp	r18, r24
    165c:	39 07       	cpc	r19, r25
    165e:	d8 f2       	brcs	.-74     	; 0x1616 <TIMER_voidSetBusyWaitTimer2_ms+0x1e>
            SET_BIT(TIFR,OCF2);

       }

    }
}
    1660:	26 96       	adiw	r28, 0x06	; 6
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <TIMERS_voidTimer1SetPreloadValue>:


void TIMERS_voidTimer1SetPreloadValue(u16 Copy_u16Value)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	00 d0       	rcall	.+0      	; 0x1678 <TIMERS_voidTimer1SetPreloadValue+0x6>
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	9a 83       	std	Y+2, r25	; 0x02
    167e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16Value;
    1680:	ec e4       	ldi	r30, 0x4C	; 76
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	9a 81       	ldd	r25, Y+2	; 0x02
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	80 83       	st	Z, r24
}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <TIMERS_voidGetTimer1Value>:

u16  TIMERS_voidGetTimer1Value(void)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    169e:	ec e4       	ldi	r30, 0x4C	; 76
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	91 81       	ldd	r25, Z+1	; 0x01
}
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <__vector_11>:



void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    16ac:	1f 92       	push	r1
    16ae:	0f 92       	push	r0
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	0f 92       	push	r0
    16b4:	11 24       	eor	r1, r1
    16b6:	2f 93       	push	r18
    16b8:	3f 93       	push	r19
    16ba:	4f 93       	push	r20
    16bc:	5f 93       	push	r21
    16be:	6f 93       	push	r22
    16c0:	7f 93       	push	r23
    16c2:	8f 93       	push	r24
    16c4:	9f 93       	push	r25
    16c6:	af 93       	push	r26
    16c8:	bf 93       	push	r27
    16ca:	ef 93       	push	r30
    16cc:	ff 93       	push	r31
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    static u16 counter=0;
    counter++;
    16d6:	80 91 c3 01 	lds	r24, 0x01C3
    16da:	90 91 c4 01 	lds	r25, 0x01C4
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	90 93 c4 01 	sts	0x01C4, r25
    16e4:	80 93 c3 01 	sts	0x01C3, r24

    //toggle led on pin0 portA
    static u8 flag=0;
    if(counter==3907)
    16e8:	80 91 c3 01 	lds	r24, 0x01C3
    16ec:	90 91 c4 01 	lds	r25, 0x01C4
    16f0:	2f e0       	ldi	r18, 0x0F	; 15
    16f2:	83 34       	cpi	r24, 0x43	; 67
    16f4:	92 07       	cpc	r25, r18
    16f6:	a9 f4       	brne	.+42     	; 0x1722 <__vector_11+0x76>
    {
        //do something
        DIO_voidSetPinValue(DIO_PORTA,DIO_PIN0,flag);
    16f8:	90 91 c2 01 	lds	r25, 0x01C2
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	49 2f       	mov	r20, r25
    1702:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
        TOG_BIT(flag,0);
    1706:	90 91 c2 01 	lds	r25, 0x01C2
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	89 27       	eor	r24, r25
    170e:	80 93 c2 01 	sts	0x01C2, r24
        counter=0;
    1712:	10 92 c4 01 	sts	0x01C4, r1
    1716:	10 92 c3 01 	sts	0x01C3, r1
        TCNT0=192;
    171a:	e2 e5       	ldi	r30, 0x52	; 82
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 ec       	ldi	r24, 0xC0	; 192
    1720:	80 83       	st	Z, r24
    }
}
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	ff 91       	pop	r31
    1728:	ef 91       	pop	r30
    172a:	bf 91       	pop	r27
    172c:	af 91       	pop	r26
    172e:	9f 91       	pop	r25
    1730:	8f 91       	pop	r24
    1732:	7f 91       	pop	r23
    1734:	6f 91       	pop	r22
    1736:	5f 91       	pop	r21
    1738:	4f 91       	pop	r20
    173a:	3f 91       	pop	r19
    173c:	2f 91       	pop	r18
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <__vector_10>:

//CTC mode
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1748:	1f 92       	push	r1
    174a:	0f 92       	push	r0
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	0f 92       	push	r0
    1750:	11 24       	eor	r1, r1
    1752:	2f 93       	push	r18
    1754:	3f 93       	push	r19
    1756:	4f 93       	push	r20
    1758:	5f 93       	push	r21
    175a:	6f 93       	push	r22
    175c:	7f 93       	push	r23
    175e:	8f 93       	push	r24
    1760:	9f 93       	push	r25
    1762:	af 93       	push	r26
    1764:	bf 93       	push	r27
    1766:	ef 93       	push	r30
    1768:	ff 93       	push	r31
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    static u16 counter=0;
    counter++;
    1772:	80 91 c6 01 	lds	r24, 0x01C6
    1776:	90 91 c7 01 	lds	r25, 0x01C7
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	90 93 c7 01 	sts	0x01C7, r25
    1780:	80 93 c6 01 	sts	0x01C6, r24

    //toggle led on pin0 portA
    static u8 flag=0;
    if(counter==4000)
    1784:	80 91 c6 01 	lds	r24, 0x01C6
    1788:	90 91 c7 01 	lds	r25, 0x01C7
    178c:	2f e0       	ldi	r18, 0x0F	; 15
    178e:	80 3a       	cpi	r24, 0xA0	; 160
    1790:	92 07       	cpc	r25, r18
    1792:	89 f4       	brne	.+34     	; 0x17b6 <__vector_10+0x6e>
    {
        //do something
        DIO_voidSetPinValue(DIO_PORTA,DIO_PIN0,flag);
    1794:	90 91 c5 01 	lds	r25, 0x01C5
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	49 2f       	mov	r20, r25
    179e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
        TOG_BIT(flag,0);
    17a2:	90 91 c5 01 	lds	r25, 0x01C5
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	89 27       	eor	r24, r25
    17aa:	80 93 c5 01 	sts	0x01C5, r24
        counter=0;
    17ae:	10 92 c7 01 	sts	0x01C7, r1
    17b2:	10 92 c6 01 	sts	0x01C6, r1
    }
}
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	ff 91       	pop	r31
    17bc:	ef 91       	pop	r30
    17be:	bf 91       	pop	r27
    17c0:	af 91       	pop	r26
    17c2:	9f 91       	pop	r25
    17c4:	8f 91       	pop	r24
    17c6:	7f 91       	pop	r23
    17c8:	6f 91       	pop	r22
    17ca:	5f 91       	pop	r21
    17cc:	4f 91       	pop	r20
    17ce:	3f 91       	pop	r19
    17d0:	2f 91       	pop	r18
    17d2:	0f 90       	pop	r0
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	0f 90       	pop	r0
    17d8:	1f 90       	pop	r1
    17da:	18 95       	reti

000017dc <ICU_voidInit>:


void ICU_voidInit(void)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR,5);
    17e4:	a8 e5       	ldi	r26, 0x58	; 88
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e8 e5       	ldi	r30, 0x58	; 88
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	80 62       	ori	r24, 0x20	; 32
    17f0:	8c 93       	st	X, r24
}
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <ICU_voidSetSenseControl>:

void ICU_voidSetSenseControl(u8 Copy_u8SenseControl)
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <ICU_voidSetSenseControl+0x6>
    17fe:	0f 92       	push	r0
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8SenseControl)
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	3b 83       	std	Y+3, r19	; 0x03
    180e:	2a 83       	std	Y+2, r18	; 0x02
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	9b 81       	ldd	r25, Y+3	; 0x03
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	69 f0       	breq	.+26     	; 0x1832 <ICU_voidSetSenseControl+0x3a>
    1818:	2a 81       	ldd	r18, Y+2	; 0x02
    181a:	3b 81       	ldd	r19, Y+3	; 0x03
    181c:	21 30       	cpi	r18, 0x01	; 1
    181e:	31 05       	cpc	r19, r1
    1820:	79 f4       	brne	.+30     	; 0x1840 <ICU_voidSetSenseControl+0x48>
	{
	case FALLING_EDGE:
		CLR_BIT(TCCR1B,6);
    1822:	ae e4       	ldi	r26, 0x4E	; 78
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	ee e4       	ldi	r30, 0x4E	; 78
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8f 7b       	andi	r24, 0xBF	; 191
    182e:	8c 93       	st	X, r24
    1830:	07 c0       	rjmp	.+14     	; 0x1840 <ICU_voidSetSenseControl+0x48>
		break;

	case RISING_EDGE:
		SET_BIT(TCCR1B,6);
    1832:	ae e4       	ldi	r26, 0x4E	; 78
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ee e4       	ldi	r30, 0x4E	; 78
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	80 64       	ori	r24, 0x40	; 64
    183e:	8c 93       	st	X, r24
		break;
	}
}
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <ICU_voidSetCallBackFunction>:

void ICU_voidSetCallBackFunction(void (*Copy_pvNotificationFunction)(void))
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	00 d0       	rcall	.+0      	; 0x1852 <ICU_voidSetCallBackFunction+0x6>
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	89 83       	std	Y+1, r24	; 0x01
	Global_pvICUFunction=Copy_pvNotificationFunction;
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	9a 81       	ldd	r25, Y+2	; 0x02
    185e:	90 93 c1 01 	sts	0x01C1, r25
    1862:	80 93 c0 01 	sts	0x01C0, r24
}
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <ICU_u16ReadInputCapture>:


u16 ICU_u16ReadInputCapture(void)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1878:	e6 e4       	ldi	r30, 0x46	; 70
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <ICU_voidInterruptControl>:

void ICU_voidInterruptControl(u8 Copy_u8InterruptState)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	00 d0       	rcall	.+0      	; 0x188c <ICU_voidInterruptControl+0x6>
    188c:	0f 92       	push	r0
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8InterruptState)
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	3b 83       	std	Y+3, r19	; 0x03
    189c:	2a 83       	std	Y+2, r18	; 0x02
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	9b 81       	ldd	r25, Y+3	; 0x03
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	31 f0       	breq	.+12     	; 0x18b2 <ICU_voidInterruptControl+0x2c>
    18a6:	2a 81       	ldd	r18, Y+2	; 0x02
    18a8:	3b 81       	ldd	r19, Y+3	; 0x03
    18aa:	21 30       	cpi	r18, 0x01	; 1
    18ac:	31 05       	cpc	r19, r1
    18ae:	49 f0       	breq	.+18     	; 0x18c2 <ICU_voidInterruptControl+0x3c>
    18b0:	0f c0       	rjmp	.+30     	; 0x18d0 <ICU_voidInterruptControl+0x4a>
	{
	case ENABLE:
		SET_BIT(TIMSK,5);
    18b2:	a9 e5       	ldi	r26, 0x59	; 89
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e9 e5       	ldi	r30, 0x59	; 89
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	80 62       	ori	r24, 0x20	; 32
    18be:	8c 93       	st	X, r24
    18c0:	07 c0       	rjmp	.+14     	; 0x18d0 <ICU_voidInterruptControl+0x4a>

		break;
	case DISABLE:
		CLR_BIT(TIMSK,5);
    18c2:	a9 e5       	ldi	r26, 0x59	; 89
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e9 e5       	ldi	r30, 0x59	; 89
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	8f 7d       	andi	r24, 0xDF	; 223
    18ce:	8c 93       	st	X, r24
		break;

	}
}
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <__vector_6>:


void __vector_6 (void)  __attribute__((signal));
void __vector_6 (void)
{
    18dc:	1f 92       	push	r1
    18de:	0f 92       	push	r0
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	0f 92       	push	r0
    18e4:	11 24       	eor	r1, r1
    18e6:	2f 93       	push	r18
    18e8:	3f 93       	push	r19
    18ea:	4f 93       	push	r20
    18ec:	5f 93       	push	r21
    18ee:	6f 93       	push	r22
    18f0:	7f 93       	push	r23
    18f2:	8f 93       	push	r24
    18f4:	9f 93       	push	r25
    18f6:	af 93       	push	r26
    18f8:	bf 93       	push	r27
    18fa:	ef 93       	push	r30
    18fc:	ff 93       	push	r31
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62

	if(Global_pvICUFunction!=NULL_ptr)
    1906:	80 91 c0 01 	lds	r24, 0x01C0
    190a:	90 91 c1 01 	lds	r25, 0x01C1
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	29 f0       	breq	.+10     	; 0x191c <__vector_6+0x40>
	{
		Global_pvICUFunction();
    1912:	e0 91 c0 01 	lds	r30, 0x01C0
    1916:	f0 91 c1 01 	lds	r31, 0x01C1
    191a:	09 95       	icall
	{
		/*Do Nothing*/
	}


}
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	ff 91       	pop	r31
    1922:	ef 91       	pop	r30
    1924:	bf 91       	pop	r27
    1926:	af 91       	pop	r26
    1928:	9f 91       	pop	r25
    192a:	8f 91       	pop	r24
    192c:	7f 91       	pop	r23
    192e:	6f 91       	pop	r22
    1930:	5f 91       	pop	r21
    1932:	4f 91       	pop	r20
    1934:	3f 91       	pop	r19
    1936:	2f 91       	pop	r18
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	0f 90       	pop	r0
    193e:	1f 90       	pop	r1
    1940:	18 95       	reti

00001942 <GIE_voidEnableGlobalInterrupt>:

#include "GIE_interface.h"


void GIE_voidEnableGlobalInterrupt(void)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,7);
    194a:	af e5       	ldi	r26, 0x5F	; 95
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	ef e5       	ldi	r30, 0x5F	; 95
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	80 68       	ori	r24, 0x80	; 128
    1956:	8c 93       	st	X, r24
}
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <GIE_voidDisableGlobalInterrupt>:

void GIE_voidDisableGlobalInterrupt(void)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,7);
    1966:	af e5       	ldi	r26, 0x5F	; 95
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	ef e5       	ldi	r30, 0x5F	; 95
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	8f 77       	andi	r24, 0x7F	; 127
    1972:	8c 93       	st	X, r24
}
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <EXTI_voidInit>:

void (*Global_pvINT0NotificationFunction)(void)=NULL_ptr;
void (*Global_pvINT1NotificationFunction)(void)=NULL_ptr;

void EXTI_voidInit(void)
{
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    //enable peripheral interrupt
    //SET_BIT(SREG,7);


    //enable interrupt 0
    SET_BIT(GICR,6);
    1982:	ab e5       	ldi	r26, 0x5B	; 91
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	eb e5       	ldi	r30, 0x5B	; 91
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	80 64       	ori	r24, 0x40	; 64
    198e:	8c 93       	st	X, r24
    //enable interrupt 1
    SET_BIT(GICR,7);
    1990:	ab e5       	ldi	r26, 0x5B	; 91
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	eb e5       	ldi	r30, 0x5B	; 91
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	80 68       	ori	r24, 0x80	; 128
    199c:	8c 93       	st	X, r24
    //set interrupt 0 sense control to any logical change
    SET_BIT(MCUCR,0);
    199e:	a5 e5       	ldi	r26, 0x55	; 85
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e5 e5       	ldi	r30, 0x55	; 85
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	81 60       	ori	r24, 0x01	; 1
    19aa:	8c 93       	st	X, r24
    CLR_BIT(MCUCR,1);
    19ac:	a5 e5       	ldi	r26, 0x55	; 85
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e5 e5       	ldi	r30, 0x55	; 85
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	8d 7f       	andi	r24, 0xFD	; 253
    19b8:	8c 93       	st	X, r24
    //set interrupt 1 sense control to any logical change
    SET_BIT(MCUCR,2);
    19ba:	a5 e5       	ldi	r26, 0x55	; 85
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e5 e5       	ldi	r30, 0x55	; 85
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	84 60       	ori	r24, 0x04	; 4
    19c6:	8c 93       	st	X, r24
    CLR_BIT(MCUCR,3);
    19c8:	a5 e5       	ldi	r26, 0x55	; 85
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e5 e5       	ldi	r30, 0x55	; 85
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	87 7f       	andi	r24, 0xF7	; 247
    19d4:	8c 93       	st	X, r24
}
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <EXTI_voidInit0SetCallBack>:
//set callback function for interrupt 0
//receives pointer to function to be called when interrupt 0 occurs
//this function is called from main.c
//example: EXTI_voidInit0SetCallBack(&led_on);
void EXTI_voidInit0SetCallBack(void (*NotificationFunction)(void))
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <EXTI_voidInit0SetCallBack+0x6>
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	89 83       	std	Y+1, r24	; 0x01
    Global_pvINT0NotificationFunction=NotificationFunction;
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	90 93 c9 01 	sts	0x01C9, r25
    19f2:	80 93 c8 01 	sts	0x01C8, r24
}
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <EXTI_voidInit1SetCallBack>:
//receives pointer to function to be called when interrupt 1 occurs
//this function is called from main.c
//example: EXTI_voidInit1SetCallBack(&led_on);

void EXTI_voidInit1SetCallBack(void (*NotificationFunction)(void))
{
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <EXTI_voidInit1SetCallBack+0x6>
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	9a 83       	std	Y+2, r25	; 0x02
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    Global_pvINT1NotificationFunction=NotificationFunction;
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	9a 81       	ldd	r25, Y+2	; 0x02
    1a12:	90 93 cb 01 	sts	0x01CB, r25
    1a16:	80 93 ca 01 	sts	0x01CA, r24
}
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <__vector_1>:

//ISR for interrupt 0
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    1a24:	1f 92       	push	r1
    1a26:	0f 92       	push	r0
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	0f 92       	push	r0
    1a2c:	11 24       	eor	r1, r1
    1a2e:	2f 93       	push	r18
    1a30:	3f 93       	push	r19
    1a32:	4f 93       	push	r20
    1a34:	5f 93       	push	r21
    1a36:	6f 93       	push	r22
    1a38:	7f 93       	push	r23
    1a3a:	8f 93       	push	r24
    1a3c:	9f 93       	push	r25
    1a3e:	af 93       	push	r26
    1a40:	bf 93       	push	r27
    1a42:	ef 93       	push	r30
    1a44:	ff 93       	push	r31
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    if(Global_pvINT0NotificationFunction!=NULL_ptr)
    1a4e:	80 91 c8 01 	lds	r24, 0x01C8
    1a52:	90 91 c9 01 	lds	r25, 0x01C9
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	29 f0       	breq	.+10     	; 0x1a64 <__vector_1+0x40>
    {
        Global_pvINT0NotificationFunction();
    1a5a:	e0 91 c8 01 	lds	r30, 0x01C8
    1a5e:	f0 91 c9 01 	lds	r31, 0x01C9
    1a62:	09 95       	icall
    }
}
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	ff 91       	pop	r31
    1a6a:	ef 91       	pop	r30
    1a6c:	bf 91       	pop	r27
    1a6e:	af 91       	pop	r26
    1a70:	9f 91       	pop	r25
    1a72:	8f 91       	pop	r24
    1a74:	7f 91       	pop	r23
    1a76:	6f 91       	pop	r22
    1a78:	5f 91       	pop	r21
    1a7a:	4f 91       	pop	r20
    1a7c:	3f 91       	pop	r19
    1a7e:	2f 91       	pop	r18
    1a80:	0f 90       	pop	r0
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	0f 90       	pop	r0
    1a86:	1f 90       	pop	r1
    1a88:	18 95       	reti

00001a8a <__vector_2>:

//ISR for interrupt 1
void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    1a8a:	1f 92       	push	r1
    1a8c:	0f 92       	push	r0
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	0f 92       	push	r0
    1a92:	11 24       	eor	r1, r1
    1a94:	2f 93       	push	r18
    1a96:	3f 93       	push	r19
    1a98:	4f 93       	push	r20
    1a9a:	5f 93       	push	r21
    1a9c:	6f 93       	push	r22
    1a9e:	7f 93       	push	r23
    1aa0:	8f 93       	push	r24
    1aa2:	9f 93       	push	r25
    1aa4:	af 93       	push	r26
    1aa6:	bf 93       	push	r27
    1aa8:	ef 93       	push	r30
    1aaa:	ff 93       	push	r31
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    if(Global_pvINT1NotificationFunction!=NULL_ptr)
    1ab4:	80 91 ca 01 	lds	r24, 0x01CA
    1ab8:	90 91 cb 01 	lds	r25, 0x01CB
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	29 f0       	breq	.+10     	; 0x1aca <__vector_2+0x40>
    {
        Global_pvINT1NotificationFunction();
    1ac0:	e0 91 ca 01 	lds	r30, 0x01CA
    1ac4:	f0 91 cb 01 	lds	r31, 0x01CB
    1ac8:	09 95       	icall
    }
}
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	ff 91       	pop	r31
    1ad0:	ef 91       	pop	r30
    1ad2:	bf 91       	pop	r27
    1ad4:	af 91       	pop	r26
    1ad6:	9f 91       	pop	r25
    1ad8:	8f 91       	pop	r24
    1ada:	7f 91       	pop	r23
    1adc:	6f 91       	pop	r22
    1ade:	5f 91       	pop	r21
    1ae0:	4f 91       	pop	r20
    1ae2:	3f 91       	pop	r19
    1ae4:	2f 91       	pop	r18
    1ae6:	0f 90       	pop	r0
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	0f 90       	pop	r0
    1aec:	1f 90       	pop	r1
    1aee:	18 95       	reti

00001af0 <DIO_voidSetPinDirection>:
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"
#include "DIO_interface.h"

void DIO_voidSetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber,u8 Copy_PinState)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	2d 97       	sbiw	r28, 0x0d	; 13
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	6a 83       	std	Y+2, r22	; 0x02
    1b08:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	3d 87       	std	Y+13, r19	; 0x0d
    1b12:	2c 87       	std	Y+12, r18	; 0x0c
    1b14:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b16:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b18:	81 30       	cpi	r24, 0x01	; 1
    1b1a:	91 05       	cpc	r25, r1
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <DIO_voidSetPinDirection+0x30>
    1b1e:	4f c0       	rjmp	.+158    	; 0x1bbe <DIO_voidSetPinDirection+0xce>
    1b20:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b22:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b24:	22 30       	cpi	r18, 0x02	; 2
    1b26:	31 05       	cpc	r19, r1
    1b28:	2c f4       	brge	.+10     	; 0x1b34 <DIO_voidSetPinDirection+0x44>
    1b2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b2c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	71 f0       	breq	.+28     	; 0x1b4e <DIO_voidSetPinDirection+0x5e>
    1b32:	eb c0       	rjmp	.+470    	; 0x1d0a <DIO_voidSetPinDirection+0x21a>
    1b34:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b36:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b38:	22 30       	cpi	r18, 0x02	; 2
    1b3a:	31 05       	cpc	r19, r1
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <DIO_voidSetPinDirection+0x50>
    1b3e:	77 c0       	rjmp	.+238    	; 0x1c2e <DIO_voidSetPinDirection+0x13e>
    1b40:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b42:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b44:	83 30       	cpi	r24, 0x03	; 3
    1b46:	91 05       	cpc	r25, r1
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <DIO_voidSetPinDirection+0x5c>
    1b4a:	a9 c0       	rjmp	.+338    	; 0x1c9e <DIO_voidSetPinDirection+0x1ae>
    1b4c:	de c0       	rjmp	.+444    	; 0x1d0a <DIO_voidSetPinDirection+0x21a>
	{

	case DIO_PORTA:
		switch (Copy_PinState)
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	3b 87       	std	Y+11, r19	; 0x0b
    1b56:	2a 87       	std	Y+10, r18	; 0x0a
    1b58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	d1 f0       	breq	.+52     	; 0x1b94 <DIO_voidSetPinDirection+0xa4>
    1b60:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b62:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b64:	21 30       	cpi	r18, 0x01	; 1
    1b66:	31 05       	cpc	r19, r1
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <DIO_voidSetPinDirection+0x7c>
    1b6a:	cf c0       	rjmp	.+414    	; 0x1d0a <DIO_voidSetPinDirection+0x21a>
		{
		case OUTPUT:
			SET_BIT(DDRA,Copy_u8PinNumber);
    1b6c:	aa e3       	ldi	r26, 0x3A	; 58
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	ea e3       	ldi	r30, 0x3A	; 58
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	48 2f       	mov	r20, r24
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 2e       	mov	r0, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <DIO_voidSetPinDirection+0x9a>
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	0a 94       	dec	r0
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <DIO_voidSetPinDirection+0x96>
    1b8e:	84 2b       	or	r24, r20
    1b90:	8c 93       	st	X, r24
    1b92:	bb c0       	rjmp	.+374    	; 0x1d0a <DIO_voidSetPinDirection+0x21a>
		break;

		case INPUT:
			CLR_BIT(DDRA,Copy_u8PinNumber);
    1b94:	aa e3       	ldi	r26, 0x3A	; 58
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	ea e3       	ldi	r30, 0x3A	; 58
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	48 2f       	mov	r20, r24
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	02 2e       	mov	r0, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <DIO_voidSetPinDirection+0xc2>
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	0a 94       	dec	r0
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <DIO_voidSetPinDirection+0xbe>
    1bb6:	80 95       	com	r24
    1bb8:	84 23       	and	r24, r20
    1bba:	8c 93       	st	X, r24
    1bbc:	a6 c0       	rjmp	.+332    	; 0x1d0a <DIO_voidSetPinDirection+0x21a>
			break;
		}
		break;

	case DIO_PORTB:
		switch (Copy_PinState)
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	39 87       	std	Y+9, r19	; 0x09
    1bc6:	28 87       	std	Y+8, r18	; 0x08
    1bc8:	88 85       	ldd	r24, Y+8	; 0x08
    1bca:	99 85       	ldd	r25, Y+9	; 0x09
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	d1 f0       	breq	.+52     	; 0x1c04 <DIO_voidSetPinDirection+0x114>
    1bd0:	28 85       	ldd	r18, Y+8	; 0x08
    1bd2:	39 85       	ldd	r19, Y+9	; 0x09
    1bd4:	21 30       	cpi	r18, 0x01	; 1
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <DIO_voidSetPinDirection+0xec>
    1bda:	97 c0       	rjmp	.+302    	; 0x1d0a <DIO_voidSetPinDirection+0x21a>
		{
		case OUTPUT:
			SET_BIT(DDRB,Copy_u8PinNumber);
    1bdc:	a7 e3       	ldi	r26, 0x37	; 55
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e7 e3       	ldi	r30, 0x37	; 55
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	48 2f       	mov	r20, r24
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	02 2e       	mov	r0, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <DIO_voidSetPinDirection+0x10a>
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	0a 94       	dec	r0
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <DIO_voidSetPinDirection+0x106>
    1bfe:	84 2b       	or	r24, r20
    1c00:	8c 93       	st	X, r24
    1c02:	83 c0       	rjmp	.+262    	; 0x1d0a <DIO_voidSetPinDirection+0x21a>
		break;

		case INPUT:
			CLR_BIT(DDRB,Copy_u8PinNumber);
    1c04:	a7 e3       	ldi	r26, 0x37	; 55
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e7 e3       	ldi	r30, 0x37	; 55
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	48 2f       	mov	r20, r24
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	02 2e       	mov	r0, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <DIO_voidSetPinDirection+0x132>
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	0a 94       	dec	r0
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <DIO_voidSetPinDirection+0x12e>
    1c26:	80 95       	com	r24
    1c28:	84 23       	and	r24, r20
    1c2a:	8c 93       	st	X, r24
    1c2c:	6e c0       	rjmp	.+220    	; 0x1d0a <DIO_voidSetPinDirection+0x21a>
		}
			break;


	case DIO_PORTC:
		switch (Copy_PinState)
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	3f 83       	std	Y+7, r19	; 0x07
    1c36:	2e 83       	std	Y+6, r18	; 0x06
    1c38:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	d1 f0       	breq	.+52     	; 0x1c74 <DIO_voidSetPinDirection+0x184>
    1c40:	2e 81       	ldd	r18, Y+6	; 0x06
    1c42:	3f 81       	ldd	r19, Y+7	; 0x07
    1c44:	21 30       	cpi	r18, 0x01	; 1
    1c46:	31 05       	cpc	r19, r1
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <DIO_voidSetPinDirection+0x15c>
    1c4a:	5f c0       	rjmp	.+190    	; 0x1d0a <DIO_voidSetPinDirection+0x21a>
		{
		case OUTPUT:
			SET_BIT(DDRC,Copy_u8PinNumber);
    1c4c:	a4 e3       	ldi	r26, 0x34	; 52
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e4 e3       	ldi	r30, 0x34	; 52
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	48 2f       	mov	r20, r24
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	02 2e       	mov	r0, r18
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <DIO_voidSetPinDirection+0x17a>
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	0a 94       	dec	r0
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <DIO_voidSetPinDirection+0x176>
    1c6e:	84 2b       	or	r24, r20
    1c70:	8c 93       	st	X, r24
    1c72:	4b c0       	rjmp	.+150    	; 0x1d0a <DIO_voidSetPinDirection+0x21a>
		break;

		case INPUT:
			CLR_BIT(DDRC,Copy_u8PinNumber);
    1c74:	a4 e3       	ldi	r26, 0x34	; 52
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e4 e3       	ldi	r30, 0x34	; 52
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	48 2f       	mov	r20, r24
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	02 2e       	mov	r0, r18
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <DIO_voidSetPinDirection+0x1a2>
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	0a 94       	dec	r0
    1c94:	e2 f7       	brpl	.-8      	; 0x1c8e <DIO_voidSetPinDirection+0x19e>
    1c96:	80 95       	com	r24
    1c98:	84 23       	and	r24, r20
    1c9a:	8c 93       	st	X, r24
    1c9c:	36 c0       	rjmp	.+108    	; 0x1d0a <DIO_voidSetPinDirection+0x21a>
		}
			break;


	case DIO_PORTD:
		switch (Copy_PinState)
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	3d 83       	std	Y+5, r19	; 0x05
    1ca6:	2c 83       	std	Y+4, r18	; 0x04
    1ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    1caa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	c9 f0       	breq	.+50     	; 0x1ce2 <DIO_voidSetPinDirection+0x1f2>
    1cb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb4:	21 30       	cpi	r18, 0x01	; 1
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	41 f5       	brne	.+80     	; 0x1d0a <DIO_voidSetPinDirection+0x21a>
		{
		case OUTPUT:
			SET_BIT(DDRD,Copy_u8PinNumber);
    1cba:	a1 e3       	ldi	r26, 0x31	; 49
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e1 e3       	ldi	r30, 0x31	; 49
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	48 2f       	mov	r20, r24
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	02 2e       	mov	r0, r18
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <DIO_voidSetPinDirection+0x1e8>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	0a 94       	dec	r0
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <DIO_voidSetPinDirection+0x1e4>
    1cdc:	84 2b       	or	r24, r20
    1cde:	8c 93       	st	X, r24
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <DIO_voidSetPinDirection+0x21a>
		break;

		case INPUT:
			CLR_BIT(DDRD,Copy_u8PinNumber);
    1ce2:	a1 e3       	ldi	r26, 0x31	; 49
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e1 e3       	ldi	r30, 0x31	; 49
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	48 2f       	mov	r20, r24
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	02 2e       	mov	r0, r18
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <DIO_voidSetPinDirection+0x210>
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	0a 94       	dec	r0
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <DIO_voidSetPinDirection+0x20c>
    1d04:	80 95       	com	r24
    1d06:	84 23       	and	r24, r20
    1d08:	8c 93       	st	X, r24
		}
			break;


	}
}
    1d0a:	2d 96       	adiw	r28, 0x0d	; 13
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber,u8 Copy_PinValue)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	2d 97       	sbiw	r28, 0x0d	; 13
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	6a 83       	std	Y+2, r22	; 0x02
    1d34:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	3d 87       	std	Y+13, r19	; 0x0d
    1d3e:	2c 87       	std	Y+12, r18	; 0x0c
    1d40:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d42:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d44:	81 30       	cpi	r24, 0x01	; 1
    1d46:	91 05       	cpc	r25, r1
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <DIO_voidSetPinValue+0x30>
    1d4a:	4f c0       	rjmp	.+158    	; 0x1dea <DIO_voidSetPinValue+0xce>
    1d4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d4e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1d50:	22 30       	cpi	r18, 0x02	; 2
    1d52:	31 05       	cpc	r19, r1
    1d54:	2c f4       	brge	.+10     	; 0x1d60 <DIO_voidSetPinValue+0x44>
    1d56:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d58:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	71 f0       	breq	.+28     	; 0x1d7a <DIO_voidSetPinValue+0x5e>
    1d5e:	eb c0       	rjmp	.+470    	; 0x1f36 <DIO_voidSetPinValue+0x21a>
    1d60:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d62:	3d 85       	ldd	r19, Y+13	; 0x0d
    1d64:	22 30       	cpi	r18, 0x02	; 2
    1d66:	31 05       	cpc	r19, r1
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <DIO_voidSetPinValue+0x50>
    1d6a:	77 c0       	rjmp	.+238    	; 0x1e5a <DIO_voidSetPinValue+0x13e>
    1d6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d70:	83 30       	cpi	r24, 0x03	; 3
    1d72:	91 05       	cpc	r25, r1
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <DIO_voidSetPinValue+0x5c>
    1d76:	a9 c0       	rjmp	.+338    	; 0x1eca <DIO_voidSetPinValue+0x1ae>
    1d78:	de c0       	rjmp	.+444    	; 0x1f36 <DIO_voidSetPinValue+0x21a>
		{

		case DIO_PORTA:
			switch (Copy_PinValue)
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	3b 87       	std	Y+11, r19	; 0x0b
    1d82:	2a 87       	std	Y+10, r18	; 0x0a
    1d84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d86:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	d1 f0       	breq	.+52     	; 0x1dc0 <DIO_voidSetPinValue+0xa4>
    1d8c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d8e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d90:	21 30       	cpi	r18, 0x01	; 1
    1d92:	31 05       	cpc	r19, r1
    1d94:	09 f0       	breq	.+2      	; 0x1d98 <DIO_voidSetPinValue+0x7c>
    1d96:	cf c0       	rjmp	.+414    	; 0x1f36 <DIO_voidSetPinValue+0x21a>
			{
			case HIGH:
				SET_BIT(PORTA,Copy_u8PinNumber);
    1d98:	ab e3       	ldi	r26, 0x3B	; 59
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	eb e3       	ldi	r30, 0x3B	; 59
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	48 2f       	mov	r20, r24
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	02 2e       	mov	r0, r18
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <DIO_voidSetPinValue+0x9a>
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	0a 94       	dec	r0
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <DIO_voidSetPinValue+0x96>
    1dba:	84 2b       	or	r24, r20
    1dbc:	8c 93       	st	X, r24
    1dbe:	bb c0       	rjmp	.+374    	; 0x1f36 <DIO_voidSetPinValue+0x21a>
			break;

			case LOW:
				CLR_BIT(PORTA,Copy_u8PinNumber);
    1dc0:	ab e3       	ldi	r26, 0x3B	; 59
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	eb e3       	ldi	r30, 0x3B	; 59
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	48 2f       	mov	r20, r24
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	02 2e       	mov	r0, r18
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <DIO_voidSetPinValue+0xc2>
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	0a 94       	dec	r0
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <DIO_voidSetPinValue+0xbe>
    1de2:	80 95       	com	r24
    1de4:	84 23       	and	r24, r20
    1de6:	8c 93       	st	X, r24
    1de8:	a6 c0       	rjmp	.+332    	; 0x1f36 <DIO_voidSetPinValue+0x21a>
				break;
			}
			break;

		case DIO_PORTB:
			switch (Copy_PinValue)
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	39 87       	std	Y+9, r19	; 0x09
    1df2:	28 87       	std	Y+8, r18	; 0x08
    1df4:	88 85       	ldd	r24, Y+8	; 0x08
    1df6:	99 85       	ldd	r25, Y+9	; 0x09
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	d1 f0       	breq	.+52     	; 0x1e30 <DIO_voidSetPinValue+0x114>
    1dfc:	28 85       	ldd	r18, Y+8	; 0x08
    1dfe:	39 85       	ldd	r19, Y+9	; 0x09
    1e00:	21 30       	cpi	r18, 0x01	; 1
    1e02:	31 05       	cpc	r19, r1
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <DIO_voidSetPinValue+0xec>
    1e06:	97 c0       	rjmp	.+302    	; 0x1f36 <DIO_voidSetPinValue+0x21a>
			{
			case HIGH:
				SET_BIT(PORTB,Copy_u8PinNumber);
    1e08:	a8 e3       	ldi	r26, 0x38	; 56
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e8 e3       	ldi	r30, 0x38	; 56
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	48 2f       	mov	r20, r24
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	02 2e       	mov	r0, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <DIO_voidSetPinValue+0x10a>
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	0a 94       	dec	r0
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <DIO_voidSetPinValue+0x106>
    1e2a:	84 2b       	or	r24, r20
    1e2c:	8c 93       	st	X, r24
    1e2e:	83 c0       	rjmp	.+262    	; 0x1f36 <DIO_voidSetPinValue+0x21a>
			break;

			case LOW:
				CLR_BIT(PORTB,Copy_u8PinNumber);
    1e30:	a8 e3       	ldi	r26, 0x38	; 56
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e8 e3       	ldi	r30, 0x38	; 56
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 2e       	mov	r0, r18
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <DIO_voidSetPinValue+0x132>
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	0a 94       	dec	r0
    1e50:	e2 f7       	brpl	.-8      	; 0x1e4a <DIO_voidSetPinValue+0x12e>
    1e52:	80 95       	com	r24
    1e54:	84 23       	and	r24, r20
    1e56:	8c 93       	st	X, r24
    1e58:	6e c0       	rjmp	.+220    	; 0x1f36 <DIO_voidSetPinValue+0x21a>
			}
				break;


		case DIO_PORTC:
			switch (Copy_PinValue)
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	3f 83       	std	Y+7, r19	; 0x07
    1e62:	2e 83       	std	Y+6, r18	; 0x06
    1e64:	8e 81       	ldd	r24, Y+6	; 0x06
    1e66:	9f 81       	ldd	r25, Y+7	; 0x07
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	d1 f0       	breq	.+52     	; 0x1ea0 <DIO_voidSetPinValue+0x184>
    1e6c:	2e 81       	ldd	r18, Y+6	; 0x06
    1e6e:	3f 81       	ldd	r19, Y+7	; 0x07
    1e70:	21 30       	cpi	r18, 0x01	; 1
    1e72:	31 05       	cpc	r19, r1
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <DIO_voidSetPinValue+0x15c>
    1e76:	5f c0       	rjmp	.+190    	; 0x1f36 <DIO_voidSetPinValue+0x21a>
			{
			case HIGH:
				SET_BIT(PORTC,Copy_u8PinNumber);
    1e78:	a5 e3       	ldi	r26, 0x35	; 53
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e5 e3       	ldi	r30, 0x35	; 53
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	48 2f       	mov	r20, r24
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	02 2e       	mov	r0, r18
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <DIO_voidSetPinValue+0x17a>
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	0a 94       	dec	r0
    1e98:	e2 f7       	brpl	.-8      	; 0x1e92 <DIO_voidSetPinValue+0x176>
    1e9a:	84 2b       	or	r24, r20
    1e9c:	8c 93       	st	X, r24
    1e9e:	4b c0       	rjmp	.+150    	; 0x1f36 <DIO_voidSetPinValue+0x21a>
			break;

			case LOW:
				CLR_BIT(PORTC,Copy_u8PinNumber);
    1ea0:	a5 e3       	ldi	r26, 0x35	; 53
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e5 e3       	ldi	r30, 0x35	; 53
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	48 2f       	mov	r20, r24
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	02 2e       	mov	r0, r18
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <DIO_voidSetPinValue+0x1a2>
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	0a 94       	dec	r0
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <DIO_voidSetPinValue+0x19e>
    1ec2:	80 95       	com	r24
    1ec4:	84 23       	and	r24, r20
    1ec6:	8c 93       	st	X, r24
    1ec8:	36 c0       	rjmp	.+108    	; 0x1f36 <DIO_voidSetPinValue+0x21a>
			}
				break;


		case DIO_PORTD:
			switch (Copy_PinValue)
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	3d 83       	std	Y+5, r19	; 0x05
    1ed2:	2c 83       	std	Y+4, r18	; 0x04
    1ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	c9 f0       	breq	.+50     	; 0x1f0e <DIO_voidSetPinValue+0x1f2>
    1edc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ede:	3d 81       	ldd	r19, Y+5	; 0x05
    1ee0:	21 30       	cpi	r18, 0x01	; 1
    1ee2:	31 05       	cpc	r19, r1
    1ee4:	41 f5       	brne	.+80     	; 0x1f36 <DIO_voidSetPinValue+0x21a>
			{
			case HIGH:
				SET_BIT(PORTD,Copy_u8PinNumber);
    1ee6:	a2 e3       	ldi	r26, 0x32	; 50
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e2 e3       	ldi	r30, 0x32	; 50
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	48 2f       	mov	r20, r24
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	02 2e       	mov	r0, r18
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <DIO_voidSetPinValue+0x1e8>
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	0a 94       	dec	r0
    1f06:	e2 f7       	brpl	.-8      	; 0x1f00 <DIO_voidSetPinValue+0x1e4>
    1f08:	84 2b       	or	r24, r20
    1f0a:	8c 93       	st	X, r24
    1f0c:	14 c0       	rjmp	.+40     	; 0x1f36 <DIO_voidSetPinValue+0x21a>
			break;

			case LOW:
				CLR_BIT(PORTD,Copy_u8PinNumber);
    1f0e:	a2 e3       	ldi	r26, 0x32	; 50
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e2 e3       	ldi	r30, 0x32	; 50
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	48 2f       	mov	r20, r24
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	02 2e       	mov	r0, r18
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <DIO_voidSetPinValue+0x210>
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	0a 94       	dec	r0
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <DIO_voidSetPinValue+0x20c>
    1f30:	80 95       	com	r24
    1f32:	84 23       	and	r24, r20
    1f34:	8c 93       	st	X, r24
			}
				break;


		}
	}
    1f36:	2d 96       	adiw	r28, 0x0d	; 13
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8PortName,u8 Copy_u8PinNumber)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <DIO_u8GetPinValue+0x6>
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <DIO_u8GetPinValue+0x8>
    1f50:	0f 92       	push	r0
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	8a 83       	std	Y+2, r24	; 0x02
    1f58:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue;
	switch(Copy_u8PortName)
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	3d 83       	std	Y+5, r19	; 0x05
    1f62:	2c 83       	std	Y+4, r18	; 0x04
    1f64:	4c 81       	ldd	r20, Y+4	; 0x04
    1f66:	5d 81       	ldd	r21, Y+5	; 0x05
    1f68:	41 30       	cpi	r20, 0x01	; 1
    1f6a:	51 05       	cpc	r21, r1
    1f6c:	41 f1       	breq	.+80     	; 0x1fbe <DIO_u8GetPinValue+0x76>
    1f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f70:	9d 81       	ldd	r25, Y+5	; 0x05
    1f72:	82 30       	cpi	r24, 0x02	; 2
    1f74:	91 05       	cpc	r25, r1
    1f76:	34 f4       	brge	.+12     	; 0x1f84 <DIO_u8GetPinValue+0x3c>
    1f78:	2c 81       	ldd	r18, Y+4	; 0x04
    1f7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f7c:	21 15       	cp	r18, r1
    1f7e:	31 05       	cpc	r19, r1
    1f80:	61 f0       	breq	.+24     	; 0x1f9a <DIO_u8GetPinValue+0x52>
    1f82:	52 c0       	rjmp	.+164    	; 0x2028 <DIO_u8GetPinValue+0xe0>
    1f84:	4c 81       	ldd	r20, Y+4	; 0x04
    1f86:	5d 81       	ldd	r21, Y+5	; 0x05
    1f88:	42 30       	cpi	r20, 0x02	; 2
    1f8a:	51 05       	cpc	r21, r1
    1f8c:	51 f1       	breq	.+84     	; 0x1fe2 <DIO_u8GetPinValue+0x9a>
    1f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f90:	9d 81       	ldd	r25, Y+5	; 0x05
    1f92:	83 30       	cpi	r24, 0x03	; 3
    1f94:	91 05       	cpc	r25, r1
    1f96:	b9 f1       	breq	.+110    	; 0x2006 <DIO_u8GetPinValue+0xbe>
    1f98:	47 c0       	rjmp	.+142    	; 0x2028 <DIO_u8GetPinValue+0xe0>
		{
		case DIO_PORTA:
			Local_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
    1f9a:	e9 e3       	ldi	r30, 0x39	; 57
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	88 2f       	mov	r24, r24
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	a9 01       	movw	r20, r18
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <DIO_u8GetPinValue+0x6a>
    1fae:	55 95       	asr	r21
    1fb0:	47 95       	ror	r20
    1fb2:	8a 95       	dec	r24
    1fb4:	e2 f7       	brpl	.-8      	; 0x1fae <DIO_u8GetPinValue+0x66>
    1fb6:	ca 01       	movw	r24, r20
    1fb8:	81 70       	andi	r24, 0x01	; 1
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	35 c0       	rjmp	.+106    	; 0x2028 <DIO_u8GetPinValue+0xe0>
			break;

		case DIO_PORTB:
			Local_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
    1fbe:	e6 e3       	ldi	r30, 0x36	; 54
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	a9 01       	movw	r20, r18
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <DIO_u8GetPinValue+0x8e>
    1fd2:	55 95       	asr	r21
    1fd4:	47 95       	ror	r20
    1fd6:	8a 95       	dec	r24
    1fd8:	e2 f7       	brpl	.-8      	; 0x1fd2 <DIO_u8GetPinValue+0x8a>
    1fda:	ca 01       	movw	r24, r20
    1fdc:	81 70       	andi	r24, 0x01	; 1
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	23 c0       	rjmp	.+70     	; 0x2028 <DIO_u8GetPinValue+0xe0>
			break;

		case DIO_PORTC:
			Local_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
    1fe2:	e3 e3       	ldi	r30, 0x33	; 51
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	88 2f       	mov	r24, r24
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a9 01       	movw	r20, r18
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <DIO_u8GetPinValue+0xb2>
    1ff6:	55 95       	asr	r21
    1ff8:	47 95       	ror	r20
    1ffa:	8a 95       	dec	r24
    1ffc:	e2 f7       	brpl	.-8      	; 0x1ff6 <DIO_u8GetPinValue+0xae>
    1ffe:	ca 01       	movw	r24, r20
    2000:	81 70       	andi	r24, 0x01	; 1
    2002:	89 83       	std	Y+1, r24	; 0x01
    2004:	11 c0       	rjmp	.+34     	; 0x2028 <DIO_u8GetPinValue+0xe0>
			break;

		case DIO_PORTD:
			Local_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
    2006:	e0 e3       	ldi	r30, 0x30	; 48
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	88 2f       	mov	r24, r24
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a9 01       	movw	r20, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <DIO_u8GetPinValue+0xd6>
    201a:	55 95       	asr	r21
    201c:	47 95       	ror	r20
    201e:	8a 95       	dec	r24
    2020:	e2 f7       	brpl	.-8      	; 0x201a <DIO_u8GetPinValue+0xd2>
    2022:	ca 01       	movw	r24, r20
    2024:	81 70       	andi	r24, 0x01	; 1
    2026:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_u8PinValue;
    2028:	89 81       	ldd	r24, Y+1	; 0x01
}
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <DIO_voidSetSpecificPortDirection>:

void DIO_voidSetSpecificPortDirection(u8 Copy_u8PortName,u8 Copy_PortValue)
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	00 d0       	rcall	.+0      	; 0x2040 <DIO_voidSetSpecificPortDirection+0x6>
    2040:	00 d0       	rcall	.+0      	; 0x2042 <DIO_voidSetSpecificPortDirection+0x8>
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	28 2f       	mov	r18, r24
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	3c 83       	std	Y+4, r19	; 0x04
    2052:	2b 83       	std	Y+3, r18	; 0x03
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	9c 81       	ldd	r25, Y+4	; 0x04
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	91 05       	cpc	r25, r1
    205c:	d1 f0       	breq	.+52     	; 0x2092 <DIO_voidSetSpecificPortDirection+0x58>
    205e:	2b 81       	ldd	r18, Y+3	; 0x03
    2060:	3c 81       	ldd	r19, Y+4	; 0x04
    2062:	22 30       	cpi	r18, 0x02	; 2
    2064:	31 05       	cpc	r19, r1
    2066:	2c f4       	brge	.+10     	; 0x2072 <DIO_voidSetSpecificPortDirection+0x38>
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	61 f0       	breq	.+24     	; 0x2088 <DIO_voidSetSpecificPortDirection+0x4e>
    2070:	1e c0       	rjmp	.+60     	; 0x20ae <DIO_voidSetSpecificPortDirection+0x74>
    2072:	2b 81       	ldd	r18, Y+3	; 0x03
    2074:	3c 81       	ldd	r19, Y+4	; 0x04
    2076:	22 30       	cpi	r18, 0x02	; 2
    2078:	31 05       	cpc	r19, r1
    207a:	81 f0       	breq	.+32     	; 0x209c <DIO_voidSetSpecificPortDirection+0x62>
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	83 30       	cpi	r24, 0x03	; 3
    2082:	91 05       	cpc	r25, r1
    2084:	81 f0       	breq	.+32     	; 0x20a6 <DIO_voidSetSpecificPortDirection+0x6c>
    2086:	13 c0       	rjmp	.+38     	; 0x20ae <DIO_voidSetSpecificPortDirection+0x74>
	{
		case DIO_PORTA:
			DDRA=Copy_PortValue;
    2088:	ea e3       	ldi	r30, 0x3A	; 58
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	80 83       	st	Z, r24
    2090:	0e c0       	rjmp	.+28     	; 0x20ae <DIO_voidSetSpecificPortDirection+0x74>
			break;
		case DIO_PORTB:
			DDRB=Copy_PortValue;
    2092:	e7 e3       	ldi	r30, 0x37	; 55
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	80 83       	st	Z, r24
    209a:	09 c0       	rjmp	.+18     	; 0x20ae <DIO_voidSetSpecificPortDirection+0x74>
			break;
		case DIO_PORTC:
			DDRC=Copy_PortValue;
    209c:	e4 e3       	ldi	r30, 0x34	; 52
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	80 83       	st	Z, r24
    20a4:	04 c0       	rjmp	.+8      	; 0x20ae <DIO_voidSetSpecificPortDirection+0x74>
			break;
		case DIO_PORTD:
			DDRD=Copy_PortValue;
    20a6:	e1 e3       	ldi	r30, 0x31	; 49
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	80 83       	st	Z, r24
			break;
	}
}
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <DIO_voidSetSpecificPortValue>:
void DIO_voidSetSpecificPortValue(u8 Copy_u8PortName,u8 Copy_PortValue)
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <DIO_voidSetSpecificPortValue+0x6>
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <DIO_voidSetSpecificPortValue+0x8>
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	3c 83       	std	Y+4, r19	; 0x04
    20d4:	2b 83       	std	Y+3, r18	; 0x03
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	9c 81       	ldd	r25, Y+4	; 0x04
    20da:	81 30       	cpi	r24, 0x01	; 1
    20dc:	91 05       	cpc	r25, r1
    20de:	d1 f0       	breq	.+52     	; 0x2114 <DIO_voidSetSpecificPortValue+0x58>
    20e0:	2b 81       	ldd	r18, Y+3	; 0x03
    20e2:	3c 81       	ldd	r19, Y+4	; 0x04
    20e4:	22 30       	cpi	r18, 0x02	; 2
    20e6:	31 05       	cpc	r19, r1
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <DIO_voidSetSpecificPortValue+0x38>
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	9c 81       	ldd	r25, Y+4	; 0x04
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	61 f0       	breq	.+24     	; 0x210a <DIO_voidSetSpecificPortValue+0x4e>
    20f2:	1e c0       	rjmp	.+60     	; 0x2130 <DIO_voidSetSpecificPortValue+0x74>
    20f4:	2b 81       	ldd	r18, Y+3	; 0x03
    20f6:	3c 81       	ldd	r19, Y+4	; 0x04
    20f8:	22 30       	cpi	r18, 0x02	; 2
    20fa:	31 05       	cpc	r19, r1
    20fc:	81 f0       	breq	.+32     	; 0x211e <DIO_voidSetSpecificPortValue+0x62>
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	9c 81       	ldd	r25, Y+4	; 0x04
    2102:	83 30       	cpi	r24, 0x03	; 3
    2104:	91 05       	cpc	r25, r1
    2106:	81 f0       	breq	.+32     	; 0x2128 <DIO_voidSetSpecificPortValue+0x6c>
    2108:	13 c0       	rjmp	.+38     	; 0x2130 <DIO_voidSetSpecificPortValue+0x74>
	{
		case DIO_PORTA:
			PORTA=Copy_PortValue;
    210a:	eb e3       	ldi	r30, 0x3B	; 59
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	80 83       	st	Z, r24
    2112:	0e c0       	rjmp	.+28     	; 0x2130 <DIO_voidSetSpecificPortValue+0x74>
			break;
		case DIO_PORTB:
			PORTB=Copy_PortValue;
    2114:	e8 e3       	ldi	r30, 0x38	; 56
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	80 83       	st	Z, r24
    211c:	09 c0       	rjmp	.+18     	; 0x2130 <DIO_voidSetSpecificPortValue+0x74>
			break;
		case DIO_PORTC:
			PORTC=Copy_PortValue;
    211e:	e5 e3       	ldi	r30, 0x35	; 53
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	80 83       	st	Z, r24
    2126:	04 c0       	rjmp	.+8      	; 0x2130 <DIO_voidSetSpecificPortValue+0x74>
			break;
		case DIO_PORTD:
			PORTD=Copy_PortValue;
    2128:	e2 e3       	ldi	r30, 0x32	; 50
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	80 83       	st	Z, r24
			break;
	}

}
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <ADC_voidInit>:
#include "ADC_interface.h"



void ADC_voidInit(void)
{
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
  //set source voltage -->AVCC
	SET_BIT(ADMUX,6);
    2146:	a7 e2       	ldi	r26, 0x27	; 39
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	e7 e2       	ldi	r30, 0x27	; 39
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	80 64       	ori	r24, 0x40	; 64
    2152:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    2154:	a7 e2       	ldi	r26, 0x27	; 39
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e7 e2       	ldi	r30, 0x27	; 39
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	8f 77       	andi	r24, 0x7F	; 127
    2160:	8c 93       	st	X, r24


 //set left adjust
	SET_BIT(ADMUX,5);
    2162:	a7 e2       	ldi	r26, 0x27	; 39
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e7 e2       	ldi	r30, 0x27	; 39
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	80 62       	ori	r24, 0x20	; 32
    216e:	8c 93       	st	X, r24
 //set ADC prescaler  -->/64
	CLR_BIT(ADCSRA,0);
    2170:	a6 e2       	ldi	r26, 0x26	; 38
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e6 e2       	ldi	r30, 0x26	; 38
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	8e 7f       	andi	r24, 0xFE	; 254
    217c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
    217e:	a6 e2       	ldi	r26, 0x26	; 38
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e6 e2       	ldi	r30, 0x26	; 38
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	82 60       	ori	r24, 0x02	; 2
    218a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,2);
    218c:	a6 e2       	ldi	r26, 0x26	; 38
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e6 e2       	ldi	r30, 0x26	; 38
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	84 60       	ori	r24, 0x04	; 4
    2198:	8c 93       	st	X, r24

	//enable ADC
	SET_BIT(ADCSRA,7);
    219a:	a6 e2       	ldi	r26, 0x26	; 38
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e6 e2       	ldi	r30, 0x26	; 38
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	80 68       	ori	r24, 0x80	; 128
    21a6:	8c 93       	st	X, r24

}
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <ADC_u8StartConversion>:

u8 ADC_u8StartConversion(u8 Copy_u8ChannelNumber)
{//ADC channel select
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	0f 92       	push	r0
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	89 83       	std	Y+1, r24	; 0x01
  ADMUX&=0b11100000;
    21ba:	a7 e2       	ldi	r26, 0x27	; 39
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e7 e2       	ldi	r30, 0x27	; 39
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	80 7e       	andi	r24, 0xE0	; 224
    21c6:	8c 93       	st	X, r24
  ADMUX|=Copy_u8ChannelNumber;
    21c8:	a7 e2       	ldi	r26, 0x27	; 39
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e7 e2       	ldi	r30, 0x27	; 39
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	90 81       	ld	r25, Z
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	89 2b       	or	r24, r25
    21d6:	8c 93       	st	X, r24

  //ADC start conversion
  SET_BIT(ADCSRA,6);
    21d8:	a6 e2       	ldi	r26, 0x26	; 38
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e6 e2       	ldi	r30, 0x26	; 38
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	80 64       	ori	r24, 0x40	; 64
    21e4:	8c 93       	st	X, r24

  //Wait until conversion complete
  while(GET_BIT(ADCSRA,4)==0);
    21e6:	e6 e2       	ldi	r30, 0x26	; 38
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	82 95       	swap	r24
    21ee:	8f 70       	andi	r24, 0x0F	; 15
    21f0:	88 2f       	mov	r24, r24
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	81 70       	andi	r24, 0x01	; 1
    21f6:	90 70       	andi	r25, 0x00	; 0
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	a9 f3       	breq	.-22     	; 0x21e6 <ADC_u8StartConversion+0x38>

  //clear flag
  SET_BIT(ADCSRA,4);
    21fc:	a6 e2       	ldi	r26, 0x26	; 38
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e6 e2       	ldi	r30, 0x26	; 38
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	80 61       	ori	r24, 0x10	; 16
    2208:	8c 93       	st	X, r24

  return ADCH;
    220a:	e5 e2       	ldi	r30, 0x25	; 37
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z


    2210:	0f 90       	pop	r0
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	08 95       	ret

00002218 <ServoMotor_voidInit>:
#define MIN_PULSE_WIDTH 1000
#define MAX_PULSE_WIDTH 2000

#define NULL_ptr ((void*)0)

void ServoMotor_voidInit(u8 Copy_u8Angle){
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	0f 92       	push	r0
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	89 83       	std	Y+1, r24	; 0x01

    // Set the data direction for the servo pin as output
    DDRD |= (1 << PD7);
    2224:	a1 e3       	ldi	r26, 0x31	; 49
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e1 e3       	ldi	r30, 0x31	; 49
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	80 68       	ori	r24, 0x80	; 128
    2230:	8c 93       	st	X, r24

    // Configure Timer2 for Fast PWM mode
    TCCR2 |= (1 << WGM20) | (1 << WGM21) | (1 << COM21) | (1 << CS21);
    2232:	a5 e4       	ldi	r26, 0x45	; 69
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e5 e4       	ldi	r30, 0x45	; 69
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	8a 66       	ori	r24, 0x6A	; 106
    223e:	8c 93       	st	X, r24

    // Set the top value to generate the desired PWM frequency
    OCR2 = 249;
    2240:	e3 e4       	ldi	r30, 0x43	; 67
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	89 ef       	ldi	r24, 0xF9	; 249
    2246:	80 83       	st	Z, r24

    // Enable Timer2 overflow interrupt
    TIMSK |= (1 << TOIE2);
    2248:	a9 e5       	ldi	r26, 0x59	; 89
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e9 e5       	ldi	r30, 0x59	; 89
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	80 64       	ori	r24, 0x40	; 64
    2254:	8c 93       	st	X, r24

    // Start Timer2 with prescaler 8
    TCCR2 |= (1 << CS21);
    2256:	a5 e4       	ldi	r26, 0x45	; 69
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	e5 e4       	ldi	r30, 0x45	; 69
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	82 60       	ori	r24, 0x02	; 2
    2262:	8c 93       	st	X, r24
}
    2264:	0f 90       	pop	r0
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <ServoMotor_voidSetAngle>:

void ServoMotor_voidSetAngle(u8 Copy_u8Angle){
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	00 d0       	rcall	.+0      	; 0x2272 <ServoMotor_voidSetAngle+0x6>
    2272:	0f 92       	push	r0
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	8b 83       	std	Y+3, r24	; 0x03
//set angle of servo using timer 2 in pwm mode

    // Calculate the pulse width corresponding to the given angle
    uint16_t pulse_width = 1000 + ((Copy_u8Angle * 1000) / 180); // Angle to pulse width conversion
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	88 ee       	ldi	r24, 0xE8	; 232
    2282:	93 e0       	ldi	r25, 0x03	; 3
    2284:	ac 01       	movw	r20, r24
    2286:	24 9f       	mul	r18, r20
    2288:	c0 01       	movw	r24, r0
    228a:	25 9f       	mul	r18, r21
    228c:	90 0d       	add	r25, r0
    228e:	34 9f       	mul	r19, r20
    2290:	90 0d       	add	r25, r0
    2292:	11 24       	eor	r1, r1
    2294:	24 eb       	ldi	r18, 0xB4	; 180
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	b9 01       	movw	r22, r18
    229a:	0e 94 19 22 	call	0x4432	; 0x4432 <__divmodhi4>
    229e:	cb 01       	movw	r24, r22
    22a0:	88 51       	subi	r24, 0x18	; 24
    22a2:	9c 4f       	sbci	r25, 0xFC	; 252
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01

    // Set the pulse width by setting the compare match value
    OCR2 = (pulse_width * 8) / 1000;
    22a8:	e3 e4       	ldi	r30, 0x43	; 67
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	9a 81       	ldd	r25, Y+2	; 0x02
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	28 ee       	ldi	r18, 0xE8	; 232
    22be:	33 e0       	ldi	r19, 0x03	; 3
    22c0:	b9 01       	movw	r22, r18
    22c2:	0e 94 05 22 	call	0x440a	; 0x440a <__udivmodhi4>
    22c6:	cb 01       	movw	r24, r22
    22c8:	80 83       	st	Z, r24
}
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <LCD_voidInit>:
#include <stdlib.h>



void LCD_voidInit(void)
{
    22d6:	0f 93       	push	r16
    22d8:	1f 93       	push	r17
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	c6 54       	subi	r28, 0x46	; 70
    22e4:	d0 40       	sbci	r29, 0x00	; 0
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    //set direction
    DIO_voidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	41 e0       	ldi	r20, 0x01	; 1
    22f6:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	61 e0       	ldi	r22, 0x01	; 1
    22fe:	41 e0       	ldi	r20, 0x01	; 1
    2300:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	62 e0       	ldi	r22, 0x02	; 2
    2308:	41 e0       	ldi	r20, 0x01	; 1
    230a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>
    DIO_voidSetSpecificPortDirection(LCD_DATA_PORT,OUTPUT);
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	61 e0       	ldi	r22, 0x01	; 1
    2312:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_voidSetSpecificPortDirection>
    2316:	fe 01       	movw	r30, r28
    2318:	ed 5b       	subi	r30, 0xBD	; 189
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	a8 e4       	ldi	r26, 0x48	; 72
    2322:	b2 e4       	ldi	r27, 0x42	; 66
    2324:	80 83       	st	Z, r24
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	a2 83       	std	Z+2, r26	; 0x02
    232a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232c:	8e 01       	movw	r16, r28
    232e:	01 5c       	subi	r16, 0xC1	; 193
    2330:	1f 4f       	sbci	r17, 0xFF	; 255
    2332:	fe 01       	movw	r30, r28
    2334:	ed 5b       	subi	r30, 0xBD	; 189
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	60 81       	ld	r22, Z
    233a:	71 81       	ldd	r23, Z+1	; 0x01
    233c:	82 81       	ldd	r24, Z+2	; 0x02
    233e:	93 81       	ldd	r25, Z+3	; 0x03
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	4a ef       	ldi	r20, 0xFA	; 250
    2346:	54 e4       	ldi	r21, 0x44	; 68
    2348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	f8 01       	movw	r30, r16
    2352:	80 83       	st	Z, r24
    2354:	91 83       	std	Z+1, r25	; 0x01
    2356:	a2 83       	std	Z+2, r26	; 0x02
    2358:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    235a:	fe 01       	movw	r30, r28
    235c:	ff 96       	adiw	r30, 0x3f	; 63
    235e:	60 81       	ld	r22, Z
    2360:	71 81       	ldd	r23, Z+1	; 0x01
    2362:	82 81       	ldd	r24, Z+2	; 0x02
    2364:	93 81       	ldd	r25, Z+3	; 0x03
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e8       	ldi	r20, 0x80	; 128
    236c:	5f e3       	ldi	r21, 0x3F	; 63
    236e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2372:	88 23       	and	r24, r24
    2374:	2c f4       	brge	.+10     	; 0x2380 <LCD_voidInit+0xaa>
		__ticks = 1;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	9e af       	std	Y+62, r25	; 0x3e
    237c:	8d af       	std	Y+61, r24	; 0x3d
    237e:	46 c0       	rjmp	.+140    	; 0x240c <LCD_voidInit+0x136>
	else if (__tmp > 65535)
    2380:	fe 01       	movw	r30, r28
    2382:	ff 96       	adiw	r30, 0x3f	; 63
    2384:	60 81       	ld	r22, Z
    2386:	71 81       	ldd	r23, Z+1	; 0x01
    2388:	82 81       	ldd	r24, Z+2	; 0x02
    238a:	93 81       	ldd	r25, Z+3	; 0x03
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	3f ef       	ldi	r19, 0xFF	; 255
    2390:	4f e7       	ldi	r20, 0x7F	; 127
    2392:	57 e4       	ldi	r21, 0x47	; 71
    2394:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2398:	18 16       	cp	r1, r24
    239a:	64 f5       	brge	.+88     	; 0x23f4 <LCD_voidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239c:	fe 01       	movw	r30, r28
    239e:	ed 5b       	subi	r30, 0xBD	; 189
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	60 81       	ld	r22, Z
    23a4:	71 81       	ldd	r23, Z+1	; 0x01
    23a6:	82 81       	ldd	r24, Z+2	; 0x02
    23a8:	93 81       	ldd	r25, Z+3	; 0x03
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e2       	ldi	r20, 0x20	; 32
    23b0:	51 e4       	ldi	r21, 0x41	; 65
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9e af       	std	Y+62, r25	; 0x3e
    23c8:	8d af       	std	Y+61, r24	; 0x3d
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <LCD_voidInit+0x114>
    23cc:	88 ec       	ldi	r24, 0xC8	; 200
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	9c af       	std	Y+60, r25	; 0x3c
    23d2:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23d4:	8b ad       	ldd	r24, Y+59	; 0x3b
    23d6:	9c ad       	ldd	r25, Y+60	; 0x3c
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <LCD_voidInit+0x102>
    23dc:	9c af       	std	Y+60, r25	; 0x3c
    23de:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    23e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	9e af       	std	Y+62, r25	; 0x3e
    23e8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    23ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	69 f7       	brne	.-38     	; 0x23cc <LCD_voidInit+0xf6>
    23f2:	16 c0       	rjmp	.+44     	; 0x2420 <LCD_voidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f4:	fe 01       	movw	r30, r28
    23f6:	ff 96       	adiw	r30, 0x3f	; 63
    23f8:	60 81       	ld	r22, Z
    23fa:	71 81       	ldd	r23, Z+1	; 0x01
    23fc:	82 81       	ldd	r24, Z+2	; 0x02
    23fe:	93 81       	ldd	r25, Z+3	; 0x03
    2400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	9e af       	std	Y+62, r25	; 0x3e
    240a:	8d af       	std	Y+61, r24	; 0x3d
    240c:	8d ad       	ldd	r24, Y+61	; 0x3d
    240e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2410:	9a af       	std	Y+58, r25	; 0x3a
    2412:	89 af       	std	Y+57, r24	; 0x39
    2414:	89 ad       	ldd	r24, Y+57	; 0x39
    2416:	9a ad       	ldd	r25, Y+58	; 0x3a
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	f1 f7       	brne	.-4      	; 0x2418 <LCD_voidInit+0x142>
    241c:	9a af       	std	Y+58, r25	; 0x3a
    241e:	89 af       	std	Y+57, r24	; 0x39
    //delay
    _delay_ms(50);
    //function set 2 lines 
    LCD_voidSendCommand(0b00111000);
    2420:	88 e3       	ldi	r24, 0x38	; 56
    2422:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_voidSendCommand>
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a0 e8       	ldi	r26, 0x80	; 128
    242c:	bf e3       	ldi	r27, 0x3F	; 63
    242e:	8d ab       	std	Y+53, r24	; 0x35
    2430:	9e ab       	std	Y+54, r25	; 0x36
    2432:	af ab       	std	Y+55, r26	; 0x37
    2434:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2436:	6d a9       	ldd	r22, Y+53	; 0x35
    2438:	7e a9       	ldd	r23, Y+54	; 0x36
    243a:	8f a9       	ldd	r24, Y+55	; 0x37
    243c:	98 ad       	ldd	r25, Y+56	; 0x38
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	4a ef       	ldi	r20, 0xFA	; 250
    2444:	54 e4       	ldi	r21, 0x44	; 68
    2446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	89 ab       	std	Y+49, r24	; 0x31
    2450:	9a ab       	std	Y+50, r25	; 0x32
    2452:	ab ab       	std	Y+51, r26	; 0x33
    2454:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2456:	69 a9       	ldd	r22, Y+49	; 0x31
    2458:	7a a9       	ldd	r23, Y+50	; 0x32
    245a:	8b a9       	ldd	r24, Y+51	; 0x33
    245c:	9c a9       	ldd	r25, Y+52	; 0x34
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e8       	ldi	r20, 0x80	; 128
    2464:	5f e3       	ldi	r21, 0x3F	; 63
    2466:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    246a:	88 23       	and	r24, r24
    246c:	2c f4       	brge	.+10     	; 0x2478 <LCD_voidInit+0x1a2>
		__ticks = 1;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	98 ab       	std	Y+48, r25	; 0x30
    2474:	8f a7       	std	Y+47, r24	; 0x2f
    2476:	3f c0       	rjmp	.+126    	; 0x24f6 <LCD_voidInit+0x220>
	else if (__tmp > 65535)
    2478:	69 a9       	ldd	r22, Y+49	; 0x31
    247a:	7a a9       	ldd	r23, Y+50	; 0x32
    247c:	8b a9       	ldd	r24, Y+51	; 0x33
    247e:	9c a9       	ldd	r25, Y+52	; 0x34
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	3f ef       	ldi	r19, 0xFF	; 255
    2484:	4f e7       	ldi	r20, 0x7F	; 127
    2486:	57 e4       	ldi	r21, 0x47	; 71
    2488:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    248c:	18 16       	cp	r1, r24
    248e:	4c f5       	brge	.+82     	; 0x24e2 <LCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2490:	6d a9       	ldd	r22, Y+53	; 0x35
    2492:	7e a9       	ldd	r23, Y+54	; 0x36
    2494:	8f a9       	ldd	r24, Y+55	; 0x37
    2496:	98 ad       	ldd	r25, Y+56	; 0x38
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e2       	ldi	r20, 0x20	; 32
    249e:	51 e4       	ldi	r21, 0x41	; 65
    24a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	bc 01       	movw	r22, r24
    24aa:	cd 01       	movw	r24, r26
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	98 ab       	std	Y+48, r25	; 0x30
    24b6:	8f a7       	std	Y+47, r24	; 0x2f
    24b8:	0f c0       	rjmp	.+30     	; 0x24d8 <LCD_voidInit+0x202>
    24ba:	88 ec       	ldi	r24, 0xC8	; 200
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	9e a7       	std	Y+46, r25	; 0x2e
    24c0:	8d a7       	std	Y+45, r24	; 0x2d
    24c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    24c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <LCD_voidInit+0x1f0>
    24ca:	9e a7       	std	Y+46, r25	; 0x2e
    24cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d0:	98 a9       	ldd	r25, Y+48	; 0x30
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	98 ab       	std	Y+48, r25	; 0x30
    24d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24da:	98 a9       	ldd	r25, Y+48	; 0x30
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	69 f7       	brne	.-38     	; 0x24ba <LCD_voidInit+0x1e4>
    24e0:	14 c0       	rjmp	.+40     	; 0x250a <LCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e2:	69 a9       	ldd	r22, Y+49	; 0x31
    24e4:	7a a9       	ldd	r23, Y+50	; 0x32
    24e6:	8b a9       	ldd	r24, Y+51	; 0x33
    24e8:	9c a9       	ldd	r25, Y+52	; 0x34
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	98 ab       	std	Y+48, r25	; 0x30
    24f4:	8f a7       	std	Y+47, r24	; 0x2f
    24f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f8:	98 a9       	ldd	r25, Y+48	; 0x30
    24fa:	9c a7       	std	Y+44, r25	; 0x2c
    24fc:	8b a7       	std	Y+43, r24	; 0x2b
    24fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2500:	9c a5       	ldd	r25, Y+44	; 0x2c
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <LCD_voidInit+0x22c>
    2506:	9c a7       	std	Y+44, r25	; 0x2c
    2508:	8b a7       	std	Y+43, r24	; 0x2b
    //delay
    _delay_ms(1);
    //display on/off control
    LCD_voidSendCommand(0b00001100);
    250a:	8c e0       	ldi	r24, 0x0C	; 12
    250c:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_voidSendCommand>
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 e8       	ldi	r26, 0x80	; 128
    2516:	bf e3       	ldi	r27, 0x3F	; 63
    2518:	8f a3       	std	Y+39, r24	; 0x27
    251a:	98 a7       	std	Y+40, r25	; 0x28
    251c:	a9 a7       	std	Y+41, r26	; 0x29
    251e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2520:	6f a1       	ldd	r22, Y+39	; 0x27
    2522:	78 a5       	ldd	r23, Y+40	; 0x28
    2524:	89 a5       	ldd	r24, Y+41	; 0x29
    2526:	9a a5       	ldd	r25, Y+42	; 0x2a
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	4a ef       	ldi	r20, 0xFA	; 250
    252e:	54 e4       	ldi	r21, 0x44	; 68
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	8b a3       	std	Y+35, r24	; 0x23
    253a:	9c a3       	std	Y+36, r25	; 0x24
    253c:	ad a3       	std	Y+37, r26	; 0x25
    253e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2540:	6b a1       	ldd	r22, Y+35	; 0x23
    2542:	7c a1       	ldd	r23, Y+36	; 0x24
    2544:	8d a1       	ldd	r24, Y+37	; 0x25
    2546:	9e a1       	ldd	r25, Y+38	; 0x26
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e8       	ldi	r20, 0x80	; 128
    254e:	5f e3       	ldi	r21, 0x3F	; 63
    2550:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2554:	88 23       	and	r24, r24
    2556:	2c f4       	brge	.+10     	; 0x2562 <LCD_voidInit+0x28c>
		__ticks = 1;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	9a a3       	std	Y+34, r25	; 0x22
    255e:	89 a3       	std	Y+33, r24	; 0x21
    2560:	3f c0       	rjmp	.+126    	; 0x25e0 <LCD_voidInit+0x30a>
	else if (__tmp > 65535)
    2562:	6b a1       	ldd	r22, Y+35	; 0x23
    2564:	7c a1       	ldd	r23, Y+36	; 0x24
    2566:	8d a1       	ldd	r24, Y+37	; 0x25
    2568:	9e a1       	ldd	r25, Y+38	; 0x26
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	3f ef       	ldi	r19, 0xFF	; 255
    256e:	4f e7       	ldi	r20, 0x7F	; 127
    2570:	57 e4       	ldi	r21, 0x47	; 71
    2572:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2576:	18 16       	cp	r1, r24
    2578:	4c f5       	brge	.+82     	; 0x25cc <LCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257a:	6f a1       	ldd	r22, Y+39	; 0x27
    257c:	78 a5       	ldd	r23, Y+40	; 0x28
    257e:	89 a5       	ldd	r24, Y+41	; 0x29
    2580:	9a a5       	ldd	r25, Y+42	; 0x2a
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e2       	ldi	r20, 0x20	; 32
    2588:	51 e4       	ldi	r21, 0x41	; 65
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	9a a3       	std	Y+34, r25	; 0x22
    25a0:	89 a3       	std	Y+33, r24	; 0x21
    25a2:	0f c0       	rjmp	.+30     	; 0x25c2 <LCD_voidInit+0x2ec>
    25a4:	88 ec       	ldi	r24, 0xC8	; 200
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	98 a3       	std	Y+32, r25	; 0x20
    25aa:	8f 8f       	std	Y+31, r24	; 0x1f
    25ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ae:	98 a1       	ldd	r25, Y+32	; 0x20
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <LCD_voidInit+0x2da>
    25b4:	98 a3       	std	Y+32, r25	; 0x20
    25b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b8:	89 a1       	ldd	r24, Y+33	; 0x21
    25ba:	9a a1       	ldd	r25, Y+34	; 0x22
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	9a a3       	std	Y+34, r25	; 0x22
    25c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c2:	89 a1       	ldd	r24, Y+33	; 0x21
    25c4:	9a a1       	ldd	r25, Y+34	; 0x22
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	69 f7       	brne	.-38     	; 0x25a4 <LCD_voidInit+0x2ce>
    25ca:	14 c0       	rjmp	.+40     	; 0x25f4 <LCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25cc:	6b a1       	ldd	r22, Y+35	; 0x23
    25ce:	7c a1       	ldd	r23, Y+36	; 0x24
    25d0:	8d a1       	ldd	r24, Y+37	; 0x25
    25d2:	9e a1       	ldd	r25, Y+38	; 0x26
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	9a a3       	std	Y+34, r25	; 0x22
    25de:	89 a3       	std	Y+33, r24	; 0x21
    25e0:	89 a1       	ldd	r24, Y+33	; 0x21
    25e2:	9a a1       	ldd	r25, Y+34	; 0x22
    25e4:	9e 8f       	std	Y+30, r25	; 0x1e
    25e6:	8d 8f       	std	Y+29, r24	; 0x1d
    25e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <LCD_voidInit+0x316>
    25f0:	9e 8f       	std	Y+30, r25	; 0x1e
    25f2:	8d 8f       	std	Y+29, r24	; 0x1d
    //delay
    _delay_ms(1);
    //display clear
    LCD_voidSendCommand(0b00000001);
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_voidSendCommand>
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	a0 e0       	ldi	r26, 0x00	; 0
    2600:	b0 e4       	ldi	r27, 0x40	; 64
    2602:	89 8f       	std	Y+25, r24	; 0x19
    2604:	9a 8f       	std	Y+26, r25	; 0x1a
    2606:	ab 8f       	std	Y+27, r26	; 0x1b
    2608:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260a:	69 8d       	ldd	r22, Y+25	; 0x19
    260c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    260e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2610:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	4a ef       	ldi	r20, 0xFA	; 250
    2618:	54 e4       	ldi	r21, 0x44	; 68
    261a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	8d 8b       	std	Y+21, r24	; 0x15
    2624:	9e 8b       	std	Y+22, r25	; 0x16
    2626:	af 8b       	std	Y+23, r26	; 0x17
    2628:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    262a:	6d 89       	ldd	r22, Y+21	; 0x15
    262c:	7e 89       	ldd	r23, Y+22	; 0x16
    262e:	8f 89       	ldd	r24, Y+23	; 0x17
    2630:	98 8d       	ldd	r25, Y+24	; 0x18
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	40 e8       	ldi	r20, 0x80	; 128
    2638:	5f e3       	ldi	r21, 0x3F	; 63
    263a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    263e:	88 23       	and	r24, r24
    2640:	2c f4       	brge	.+10     	; 0x264c <LCD_voidInit+0x376>
		__ticks = 1;
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	9c 8b       	std	Y+20, r25	; 0x14
    2648:	8b 8b       	std	Y+19, r24	; 0x13
    264a:	3f c0       	rjmp	.+126    	; 0x26ca <LCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    264c:	6d 89       	ldd	r22, Y+21	; 0x15
    264e:	7e 89       	ldd	r23, Y+22	; 0x16
    2650:	8f 89       	ldd	r24, Y+23	; 0x17
    2652:	98 8d       	ldd	r25, Y+24	; 0x18
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	3f ef       	ldi	r19, 0xFF	; 255
    2658:	4f e7       	ldi	r20, 0x7F	; 127
    265a:	57 e4       	ldi	r21, 0x47	; 71
    265c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2660:	18 16       	cp	r1, r24
    2662:	4c f5       	brge	.+82     	; 0x26b6 <LCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2664:	69 8d       	ldd	r22, Y+25	; 0x19
    2666:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2668:	8b 8d       	ldd	r24, Y+27	; 0x1b
    266a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	40 e2       	ldi	r20, 0x20	; 32
    2672:	51 e4       	ldi	r21, 0x41	; 65
    2674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	bc 01       	movw	r22, r24
    267e:	cd 01       	movw	r24, r26
    2680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	9c 8b       	std	Y+20, r25	; 0x14
    268a:	8b 8b       	std	Y+19, r24	; 0x13
    268c:	0f c0       	rjmp	.+30     	; 0x26ac <LCD_voidInit+0x3d6>
    268e:	88 ec       	ldi	r24, 0xC8	; 200
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	9a 8b       	std	Y+18, r25	; 0x12
    2694:	89 8b       	std	Y+17, r24	; 0x11
    2696:	89 89       	ldd	r24, Y+17	; 0x11
    2698:	9a 89       	ldd	r25, Y+18	; 0x12
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <LCD_voidInit+0x3c4>
    269e:	9a 8b       	std	Y+18, r25	; 0x12
    26a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a2:	8b 89       	ldd	r24, Y+19	; 0x13
    26a4:	9c 89       	ldd	r25, Y+20	; 0x14
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	9c 8b       	std	Y+20, r25	; 0x14
    26aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ac:	8b 89       	ldd	r24, Y+19	; 0x13
    26ae:	9c 89       	ldd	r25, Y+20	; 0x14
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	69 f7       	brne	.-38     	; 0x268e <LCD_voidInit+0x3b8>
    26b4:	14 c0       	rjmp	.+40     	; 0x26de <LCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b6:	6d 89       	ldd	r22, Y+21	; 0x15
    26b8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ba:	8f 89       	ldd	r24, Y+23	; 0x17
    26bc:	98 8d       	ldd	r25, Y+24	; 0x18
    26be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	9c 8b       	std	Y+20, r25	; 0x14
    26c8:	8b 8b       	std	Y+19, r24	; 0x13
    26ca:	8b 89       	ldd	r24, Y+19	; 0x13
    26cc:	9c 89       	ldd	r25, Y+20	; 0x14
    26ce:	98 8b       	std	Y+16, r25	; 0x10
    26d0:	8f 87       	std	Y+15, r24	; 0x0f
    26d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d4:	98 89       	ldd	r25, Y+16	; 0x10
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <LCD_voidInit+0x400>
    26da:	98 8b       	std	Y+16, r25	; 0x10
    26dc:	8f 87       	std	Y+15, r24	; 0x0f
    //delay
    _delay_ms(2);
    //entry mode set
    LCD_voidSendCommand(0b00000110);
    26de:	86 e0       	ldi	r24, 0x06	; 6
    26e0:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_voidSendCommand>
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a0 e8       	ldi	r26, 0x80	; 128
    26ea:	bf e3       	ldi	r27, 0x3F	; 63
    26ec:	8b 87       	std	Y+11, r24	; 0x0b
    26ee:	9c 87       	std	Y+12, r25	; 0x0c
    26f0:	ad 87       	std	Y+13, r26	; 0x0d
    26f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	4a ef       	ldi	r20, 0xFA	; 250
    2702:	54 e4       	ldi	r21, 0x44	; 68
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	8f 83       	std	Y+7, r24	; 0x07
    270e:	98 87       	std	Y+8, r25	; 0x08
    2710:	a9 87       	std	Y+9, r26	; 0x09
    2712:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2714:	6f 81       	ldd	r22, Y+7	; 0x07
    2716:	78 85       	ldd	r23, Y+8	; 0x08
    2718:	89 85       	ldd	r24, Y+9	; 0x09
    271a:	9a 85       	ldd	r25, Y+10	; 0x0a
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	2c f4       	brge	.+10     	; 0x2736 <LCD_voidInit+0x460>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9e 83       	std	Y+6, r25	; 0x06
    2732:	8d 83       	std	Y+5, r24	; 0x05
    2734:	3f c0       	rjmp	.+126    	; 0x27b4 <LCD_voidInit+0x4de>
	else if (__tmp > 65535)
    2736:	6f 81       	ldd	r22, Y+7	; 0x07
    2738:	78 85       	ldd	r23, Y+8	; 0x08
    273a:	89 85       	ldd	r24, Y+9	; 0x09
    273c:	9a 85       	ldd	r25, Y+10	; 0x0a
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	3f ef       	ldi	r19, 0xFF	; 255
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	57 e4       	ldi	r21, 0x47	; 71
    2746:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	4c f5       	brge	.+82     	; 0x27a0 <LCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2750:	7c 85       	ldd	r23, Y+12	; 0x0c
    2752:	8d 85       	ldd	r24, Y+13	; 0x0d
    2754:	9e 85       	ldd	r25, Y+14	; 0x0e
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	8d 83       	std	Y+5, r24	; 0x05
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <LCD_voidInit+0x4c0>
    2778:	88 ec       	ldi	r24, 0xC8	; 200
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	9c 83       	std	Y+4, r25	; 0x04
    277e:	8b 83       	std	Y+3, r24	; 0x03
    2780:	8b 81       	ldd	r24, Y+3	; 0x03
    2782:	9c 81       	ldd	r25, Y+4	; 0x04
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <LCD_voidInit+0x4ae>
    2788:	9c 83       	std	Y+4, r25	; 0x04
    278a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	69 f7       	brne	.-38     	; 0x2778 <LCD_voidInit+0x4a2>
    279e:	14 c0       	rjmp	.+40     	; 0x27c8 <LCD_voidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	6f 81       	ldd	r22, Y+7	; 0x07
    27a2:	78 85       	ldd	r23, Y+8	; 0x08
    27a4:	89 85       	ldd	r24, Y+9	; 0x09
    27a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9e 83       	std	Y+6, r25	; 0x06
    27b2:	8d 83       	std	Y+5, r24	; 0x05
    27b4:	8d 81       	ldd	r24, Y+5	; 0x05
    27b6:	9e 81       	ldd	r25, Y+6	; 0x06
    27b8:	9a 83       	std	Y+2, r25	; 0x02
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	9a 81       	ldd	r25, Y+2	; 0x02
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <LCD_voidInit+0x4ea>
    27c4:	9a 83       	std	Y+2, r25	; 0x02
    27c6:	89 83       	std	Y+1, r24	; 0x01
    //delay
    _delay_ms(1);
}
    27c8:	ca 5b       	subi	r28, 0xBA	; 186
    27ca:	df 4f       	sbci	r29, 0xFF	; 255
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	f8 94       	cli
    27d0:	de bf       	out	0x3e, r29	; 62
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	cd bf       	out	0x3d, r28	; 61
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    27de:	08 95       	ret

000027e0 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	2e 97       	sbiw	r28, 0x0e	; 14
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	f8 94       	cli
    27ee:	de bf       	out	0x3e, r29	; 62
    27f0:	0f be       	out	0x3f, r0	; 63
    27f2:	cd bf       	out	0x3d, r28	; 61
    //display clear
    LCD_voidSendCommand(0b00000001);
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_voidSendCommand>
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	a0 e0       	ldi	r26, 0x00	; 0
    2800:	b0 e4       	ldi	r27, 0x40	; 64
    2802:	8b 87       	std	Y+11, r24	; 0x0b
    2804:	9c 87       	std	Y+12, r25	; 0x0c
    2806:	ad 87       	std	Y+13, r26	; 0x0d
    2808:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    280a:	6b 85       	ldd	r22, Y+11	; 0x0b
    280c:	7c 85       	ldd	r23, Y+12	; 0x0c
    280e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2810:	9e 85       	ldd	r25, Y+14	; 0x0e
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	4a ef       	ldi	r20, 0xFA	; 250
    2818:	54 e4       	ldi	r21, 0x44	; 68
    281a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	8f 83       	std	Y+7, r24	; 0x07
    2824:	98 87       	std	Y+8, r25	; 0x08
    2826:	a9 87       	std	Y+9, r26	; 0x09
    2828:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    282a:	6f 81       	ldd	r22, Y+7	; 0x07
    282c:	78 85       	ldd	r23, Y+8	; 0x08
    282e:	89 85       	ldd	r24, Y+9	; 0x09
    2830:	9a 85       	ldd	r25, Y+10	; 0x0a
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e8       	ldi	r20, 0x80	; 128
    2838:	5f e3       	ldi	r21, 0x3F	; 63
    283a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    283e:	88 23       	and	r24, r24
    2840:	2c f4       	brge	.+10     	; 0x284c <LCD_voidClearDisplay+0x6c>
		__ticks = 1;
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	9e 83       	std	Y+6, r25	; 0x06
    2848:	8d 83       	std	Y+5, r24	; 0x05
    284a:	3f c0       	rjmp	.+126    	; 0x28ca <LCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    284c:	6f 81       	ldd	r22, Y+7	; 0x07
    284e:	78 85       	ldd	r23, Y+8	; 0x08
    2850:	89 85       	ldd	r24, Y+9	; 0x09
    2852:	9a 85       	ldd	r25, Y+10	; 0x0a
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	3f ef       	ldi	r19, 0xFF	; 255
    2858:	4f e7       	ldi	r20, 0x7F	; 127
    285a:	57 e4       	ldi	r21, 0x47	; 71
    285c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2860:	18 16       	cp	r1, r24
    2862:	4c f5       	brge	.+82     	; 0x28b6 <LCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2864:	6b 85       	ldd	r22, Y+11	; 0x0b
    2866:	7c 85       	ldd	r23, Y+12	; 0x0c
    2868:	8d 85       	ldd	r24, Y+13	; 0x0d
    286a:	9e 85       	ldd	r25, Y+14	; 0x0e
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e2       	ldi	r20, 0x20	; 32
    2872:	51 e4       	ldi	r21, 0x41	; 65
    2874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	bc 01       	movw	r22, r24
    287e:	cd 01       	movw	r24, r26
    2880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	9e 83       	std	Y+6, r25	; 0x06
    288a:	8d 83       	std	Y+5, r24	; 0x05
    288c:	0f c0       	rjmp	.+30     	; 0x28ac <LCD_voidClearDisplay+0xcc>
    288e:	88 ec       	ldi	r24, 0xC8	; 200
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	9c 83       	std	Y+4, r25	; 0x04
    2894:	8b 83       	std	Y+3, r24	; 0x03
    2896:	8b 81       	ldd	r24, Y+3	; 0x03
    2898:	9c 81       	ldd	r25, Y+4	; 0x04
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	f1 f7       	brne	.-4      	; 0x289a <LCD_voidClearDisplay+0xba>
    289e:	9c 83       	std	Y+4, r25	; 0x04
    28a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a2:	8d 81       	ldd	r24, Y+5	; 0x05
    28a4:	9e 81       	ldd	r25, Y+6	; 0x06
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	9e 83       	std	Y+6, r25	; 0x06
    28aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ac:	8d 81       	ldd	r24, Y+5	; 0x05
    28ae:	9e 81       	ldd	r25, Y+6	; 0x06
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	69 f7       	brne	.-38     	; 0x288e <LCD_voidClearDisplay+0xae>
    28b4:	14 c0       	rjmp	.+40     	; 0x28de <LCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b6:	6f 81       	ldd	r22, Y+7	; 0x07
    28b8:	78 85       	ldd	r23, Y+8	; 0x08
    28ba:	89 85       	ldd	r24, Y+9	; 0x09
    28bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	9e 83       	std	Y+6, r25	; 0x06
    28c8:	8d 83       	std	Y+5, r24	; 0x05
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	9a 83       	std	Y+2, r25	; 0x02
    28d0:	89 83       	std	Y+1, r24	; 0x01
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	9a 81       	ldd	r25, Y+2	; 0x02
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <LCD_voidClearDisplay+0xf6>
    28da:	9a 83       	std	Y+2, r25	; 0x02
    28dc:	89 83       	std	Y+1, r24	; 0x01
    //delay
    _delay_ms(2);
}
    28de:	2e 96       	adiw	r28, 0x0e	; 14
    28e0:	0f b6       	in	r0, 0x3f	; 63
    28e2:	f8 94       	cli
    28e4:	de bf       	out	0x3e, r29	; 62
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	cd bf       	out	0x3d, r28	; 61
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	08 95       	ret

000028f0 <LCD_voidSendData>:


void LCD_voidSendData(u8 Copy_u8Data)
{ 
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	60 97       	sbiw	r28, 0x10	; 16
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	88 8b       	std	Y+16, r24	; 0x10
    //set RS
    DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	60 e0       	ldi	r22, 0x00	; 0
    290a:	41 e0       	ldi	r20, 0x01	; 1
    290c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    //set RW
    DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	61 e0       	ldi	r22, 0x01	; 1
    2914:	40 e0       	ldi	r20, 0x00	; 0
    2916:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    for(u8 i=0;i<8;i++)
    291a:	1f 86       	std	Y+15, r1	; 0x0f
    291c:	17 c0       	rjmp	.+46     	; 0x294c <LCD_voidSendData+0x5c>
    {
        //send data
       DIO_voidSetPinValue(LCD_DATA_PORT,i,GET_BIT(Copy_u8Data,i));
    291e:	88 89       	ldd	r24, Y+16	; 0x10
    2920:	28 2f       	mov	r18, r24
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	8f 85       	ldd	r24, Y+15	; 0x0f
    2926:	88 2f       	mov	r24, r24
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	a9 01       	movw	r20, r18
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <LCD_voidSendData+0x42>
    292e:	55 95       	asr	r21
    2930:	47 95       	ror	r20
    2932:	8a 95       	dec	r24
    2934:	e2 f7       	brpl	.-8      	; 0x292e <LCD_voidSendData+0x3e>
    2936:	ca 01       	movw	r24, r20
    2938:	98 2f       	mov	r25, r24
    293a:	91 70       	andi	r25, 0x01	; 1
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2940:	49 2f       	mov	r20, r25
    2942:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
{ 
    //set RS
    DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    //set RW
    DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    for(u8 i=0;i<8;i++)
    2946:	8f 85       	ldd	r24, Y+15	; 0x0f
    2948:	8f 5f       	subi	r24, 0xFF	; 255
    294a:	8f 87       	std	Y+15, r24	; 0x0f
    294c:	8f 85       	ldd	r24, Y+15	; 0x0f
    294e:	88 30       	cpi	r24, 0x08	; 8
    2950:	30 f3       	brcs	.-52     	; 0x291e <LCD_voidSendData+0x2e>
    {
        //send data
       DIO_voidSetPinValue(LCD_DATA_PORT,i,GET_BIT(Copy_u8Data,i));
    }
    //set EN
    DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	62 e0       	ldi	r22, 0x02	; 2
    2956:	41 e0       	ldi	r20, 0x01	; 1
    2958:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	a0 e0       	ldi	r26, 0x00	; 0
    2962:	b0 e4       	ldi	r27, 0x40	; 64
    2964:	8b 87       	std	Y+11, r24	; 0x0b
    2966:	9c 87       	std	Y+12, r25	; 0x0c
    2968:	ad 87       	std	Y+13, r26	; 0x0d
    296a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296c:	6b 85       	ldd	r22, Y+11	; 0x0b
    296e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2970:	8d 85       	ldd	r24, Y+13	; 0x0d
    2972:	9e 85       	ldd	r25, Y+14	; 0x0e
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	4a ef       	ldi	r20, 0xFA	; 250
    297a:	54 e4       	ldi	r21, 0x44	; 68
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	8f 83       	std	Y+7, r24	; 0x07
    2986:	98 87       	std	Y+8, r25	; 0x08
    2988:	a9 87       	std	Y+9, r26	; 0x09
    298a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    298c:	6f 81       	ldd	r22, Y+7	; 0x07
    298e:	78 85       	ldd	r23, Y+8	; 0x08
    2990:	89 85       	ldd	r24, Y+9	; 0x09
    2992:	9a 85       	ldd	r25, Y+10	; 0x0a
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e8       	ldi	r20, 0x80	; 128
    299a:	5f e3       	ldi	r21, 0x3F	; 63
    299c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29a0:	88 23       	and	r24, r24
    29a2:	2c f4       	brge	.+10     	; 0x29ae <LCD_voidSendData+0xbe>
		__ticks = 1;
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	9e 83       	std	Y+6, r25	; 0x06
    29aa:	8d 83       	std	Y+5, r24	; 0x05
    29ac:	3f c0       	rjmp	.+126    	; 0x2a2c <LCD_voidSendData+0x13c>
	else if (__tmp > 65535)
    29ae:	6f 81       	ldd	r22, Y+7	; 0x07
    29b0:	78 85       	ldd	r23, Y+8	; 0x08
    29b2:	89 85       	ldd	r24, Y+9	; 0x09
    29b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	3f ef       	ldi	r19, 0xFF	; 255
    29ba:	4f e7       	ldi	r20, 0x7F	; 127
    29bc:	57 e4       	ldi	r21, 0x47	; 71
    29be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29c2:	18 16       	cp	r1, r24
    29c4:	4c f5       	brge	.+82     	; 0x2a18 <LCD_voidSendData+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    29cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e2       	ldi	r20, 0x20	; 32
    29d4:	51 e4       	ldi	r21, 0x41	; 65
    29d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	bc 01       	movw	r22, r24
    29e0:	cd 01       	movw	r24, r26
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	9e 83       	std	Y+6, r25	; 0x06
    29ec:	8d 83       	std	Y+5, r24	; 0x05
    29ee:	0f c0       	rjmp	.+30     	; 0x2a0e <LCD_voidSendData+0x11e>
    29f0:	88 ec       	ldi	r24, 0xC8	; 200
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	9c 83       	std	Y+4, r25	; 0x04
    29f6:	8b 83       	std	Y+3, r24	; 0x03
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	9c 81       	ldd	r25, Y+4	; 0x04
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <LCD_voidSendData+0x10c>
    2a00:	9c 83       	std	Y+4, r25	; 0x04
    2a02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a04:	8d 81       	ldd	r24, Y+5	; 0x05
    2a06:	9e 81       	ldd	r25, Y+6	; 0x06
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	9e 83       	std	Y+6, r25	; 0x06
    2a0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a10:	9e 81       	ldd	r25, Y+6	; 0x06
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	69 f7       	brne	.-38     	; 0x29f0 <LCD_voidSendData+0x100>
    2a16:	14 c0       	rjmp	.+40     	; 0x2a40 <LCD_voidSendData+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a18:	6f 81       	ldd	r22, Y+7	; 0x07
    2a1a:	78 85       	ldd	r23, Y+8	; 0x08
    2a1c:	89 85       	ldd	r24, Y+9	; 0x09
    2a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9e 83       	std	Y+6, r25	; 0x06
    2a2a:	8d 83       	std	Y+5, r24	; 0x05
    2a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a30:	9a 83       	std	Y+2, r25	; 0x02
    2a32:	89 83       	std	Y+1, r24	; 0x01
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	9a 81       	ldd	r25, Y+2	; 0x02
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <LCD_voidSendData+0x148>
    2a3c:	9a 83       	std	Y+2, r25	; 0x02
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    //delay
    _delay_ms(2);
    //clear EN
    DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	62 e0       	ldi	r22, 0x02	; 2
    2a44:	40 e0       	ldi	r20, 0x00	; 0
    2a46:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>

}
    2a4a:	60 96       	adiw	r28, 0x10	; 16
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	f8 94       	cli
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	cd bf       	out	0x3d, r28	; 61
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	60 97       	sbiw	r28, 0x10	; 16
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
    2a70:	88 8b       	std	Y+16, r24	; 0x10
    //set RS
    DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	60 e0       	ldi	r22, 0x00	; 0
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    //set RW
    DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	61 e0       	ldi	r22, 0x01	; 1
    2a80:	40 e0       	ldi	r20, 0x00	; 0
    2a82:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    for(u8 i=0;i<8;i++)
    2a86:	1f 86       	std	Y+15, r1	; 0x0f
    2a88:	17 c0       	rjmp	.+46     	; 0x2ab8 <LCD_voidSendCommand+0x5c>
    {
        //send data
       DIO_voidSetPinValue(LCD_DATA_PORT,i,GET_BIT(Copy_u8Command,i));
    2a8a:	88 89       	ldd	r24, Y+16	; 0x10
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a92:	88 2f       	mov	r24, r24
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	a9 01       	movw	r20, r18
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <LCD_voidSendCommand+0x42>
    2a9a:	55 95       	asr	r21
    2a9c:	47 95       	ror	r20
    2a9e:	8a 95       	dec	r24
    2aa0:	e2 f7       	brpl	.-8      	; 0x2a9a <LCD_voidSendCommand+0x3e>
    2aa2:	ca 01       	movw	r24, r20
    2aa4:	98 2f       	mov	r25, r24
    2aa6:	91 70       	andi	r25, 0x01	; 1
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	6f 85       	ldd	r22, Y+15	; 0x0f
    2aac:	49 2f       	mov	r20, r25
    2aae:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
{
    //set RS
    DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    //set RW
    DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    for(u8 i=0;i<8;i++)
    2ab2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab4:	8f 5f       	subi	r24, 0xFF	; 255
    2ab6:	8f 87       	std	Y+15, r24	; 0x0f
    2ab8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aba:	88 30       	cpi	r24, 0x08	; 8
    2abc:	30 f3       	brcs	.-52     	; 0x2a8a <LCD_voidSendCommand+0x2e>
    {
        //send data
       DIO_voidSetPinValue(LCD_DATA_PORT,i,GET_BIT(Copy_u8Command,i));
    }
    //set EN
    DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	62 e0       	ldi	r22, 0x02	; 2
    2ac2:	41 e0       	ldi	r20, 0x01	; 1
    2ac4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	a0 e0       	ldi	r26, 0x00	; 0
    2ace:	b0 e4       	ldi	r27, 0x40	; 64
    2ad0:	8b 87       	std	Y+11, r24	; 0x0b
    2ad2:	9c 87       	std	Y+12, r25	; 0x0c
    2ad4:	ad 87       	std	Y+13, r26	; 0x0d
    2ad6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    2adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	4a ef       	ldi	r20, 0xFA	; 250
    2ae6:	54 e4       	ldi	r21, 0x44	; 68
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	8f 83       	std	Y+7, r24	; 0x07
    2af2:	98 87       	std	Y+8, r25	; 0x08
    2af4:	a9 87       	std	Y+9, r26	; 0x09
    2af6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2af8:	6f 81       	ldd	r22, Y+7	; 0x07
    2afa:	78 85       	ldd	r23, Y+8	; 0x08
    2afc:	89 85       	ldd	r24, Y+9	; 0x09
    2afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	40 e8       	ldi	r20, 0x80	; 128
    2b06:	5f e3       	ldi	r21, 0x3F	; 63
    2b08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b0c:	88 23       	and	r24, r24
    2b0e:	2c f4       	brge	.+10     	; 0x2b1a <LCD_voidSendCommand+0xbe>
		__ticks = 1;
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	9e 83       	std	Y+6, r25	; 0x06
    2b16:	8d 83       	std	Y+5, r24	; 0x05
    2b18:	3f c0       	rjmp	.+126    	; 0x2b98 <LCD_voidSendCommand+0x13c>
	else if (__tmp > 65535)
    2b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1c:	78 85       	ldd	r23, Y+8	; 0x08
    2b1e:	89 85       	ldd	r24, Y+9	; 0x09
    2b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	3f ef       	ldi	r19, 0xFF	; 255
    2b26:	4f e7       	ldi	r20, 0x7F	; 127
    2b28:	57 e4       	ldi	r21, 0x47	; 71
    2b2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b2e:	18 16       	cp	r1, r24
    2b30:	4c f5       	brge	.+82     	; 0x2b84 <LCD_voidSendCommand+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e2       	ldi	r20, 0x20	; 32
    2b40:	51 e4       	ldi	r21, 0x41	; 65
    2b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	bc 01       	movw	r22, r24
    2b4c:	cd 01       	movw	r24, r26
    2b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	9e 83       	std	Y+6, r25	; 0x06
    2b58:	8d 83       	std	Y+5, r24	; 0x05
    2b5a:	0f c0       	rjmp	.+30     	; 0x2b7a <LCD_voidSendCommand+0x11e>
    2b5c:	88 ec       	ldi	r24, 0xC8	; 200
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	9c 83       	std	Y+4, r25	; 0x04
    2b62:	8b 83       	std	Y+3, r24	; 0x03
    2b64:	8b 81       	ldd	r24, Y+3	; 0x03
    2b66:	9c 81       	ldd	r25, Y+4	; 0x04
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <LCD_voidSendCommand+0x10c>
    2b6c:	9c 83       	std	Y+4, r25	; 0x04
    2b6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b70:	8d 81       	ldd	r24, Y+5	; 0x05
    2b72:	9e 81       	ldd	r25, Y+6	; 0x06
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	9e 83       	std	Y+6, r25	; 0x06
    2b78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	69 f7       	brne	.-38     	; 0x2b5c <LCD_voidSendCommand+0x100>
    2b82:	14 c0       	rjmp	.+40     	; 0x2bac <LCD_voidSendCommand+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b84:	6f 81       	ldd	r22, Y+7	; 0x07
    2b86:	78 85       	ldd	r23, Y+8	; 0x08
    2b88:	89 85       	ldd	r24, Y+9	; 0x09
    2b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	9e 83       	std	Y+6, r25	; 0x06
    2b96:	8d 83       	std	Y+5, r24	; 0x05
    2b98:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9c:	9a 83       	std	Y+2, r25	; 0x02
    2b9e:	89 83       	std	Y+1, r24	; 0x01
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <LCD_voidSendCommand+0x148>
    2ba8:	9a 83       	std	Y+2, r25	; 0x02
    2baa:	89 83       	std	Y+1, r24	; 0x01
    //delay
    _delay_ms(2);
    //clear EN
    DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);    
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	62 e0       	ldi	r22, 0x02	; 2
    2bb0:	40 e0       	ldi	r20, 0x00	; 0
    2bb2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
}
    2bb6:	60 96       	adiw	r28, 0x10	; 16
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61
    2bc2:	cf 91       	pop	r28
    2bc4:	df 91       	pop	r29
    2bc6:	08 95       	ret

00002bc8 <LCD_voidSendString>:


void LCD_voidSendString(u8 *Copy_u8String)
{
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	00 d0       	rcall	.+0      	; 0x2bce <LCD_voidSendString+0x6>
    2bce:	0f 92       	push	r0
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
    2bd4:	9b 83       	std	Y+3, r25	; 0x03
    2bd6:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    2bd8:	19 82       	std	Y+1, r1	; 0x01
    2bda:	0e c0       	rjmp	.+28     	; 0x2bf8 <LCD_voidSendString+0x30>
    while(Copy_u8String[i]!='\0')
    {
        LCD_voidSendData(Copy_u8String[i]);
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	28 2f       	mov	r18, r24
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	9b 81       	ldd	r25, Y+3	; 0x03
    2be6:	fc 01       	movw	r30, r24
    2be8:	e2 0f       	add	r30, r18
    2bea:	f3 1f       	adc	r31, r19
    2bec:	80 81       	ld	r24, Z
    2bee:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_voidSendData>
        i++;
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
    2bf4:	8f 5f       	subi	r24, 0xFF	; 255
    2bf6:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidSendString(u8 *Copy_u8String)
{
    u8 i=0;
    while(Copy_u8String[i]!='\0')
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	9b 81       	ldd	r25, Y+3	; 0x03
    2c02:	fc 01       	movw	r30, r24
    2c04:	e2 0f       	add	r30, r18
    2c06:	f3 1f       	adc	r31, r19
    2c08:	80 81       	ld	r24, Z
    2c0a:	88 23       	and	r24, r24
    2c0c:	39 f7       	brne	.-50     	; 0x2bdc <LCD_voidSendString+0x14>
    {
        LCD_voidSendData(Copy_u8String[i]);
        i++;
    }
}
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <LCD_voidSendNumber>:

void LCD_voidSendNumber(int Copy_u32Number)
{
    2c1a:	df 93       	push	r29
    2c1c:	cf 93       	push	r28
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
    2c22:	2e 97       	sbiw	r28, 0x0e	; 14
    2c24:	0f b6       	in	r0, 0x3f	; 63
    2c26:	f8 94       	cli
    2c28:	de bf       	out	0x3e, r29	; 62
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	cd bf       	out	0x3d, r28	; 61
    2c2e:	9e 87       	std	Y+14, r25	; 0x0e
    2c30:	8d 87       	std	Y+13, r24	; 0x0d
//to display positive and negative numbers
    if(Copy_u32Number<0)
    2c32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c36:	99 23       	and	r25, r25
    2c38:	74 f4       	brge	.+28     	; 0x2c56 <LCD_voidSendNumber+0x3c>
    { LCD_voidGoToXY(1,0);
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	60 e0       	ldi	r22, 0x00	; 0
    2c3e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <LCD_voidGoToXY>
    	//LCD_voidSendString("negative number");
        LCD_voidSendData('-');
    2c42:	8d e2       	ldi	r24, 0x2D	; 45
    2c44:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_voidSendData>
        Copy_u32Number*=-1;
    2c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4c:	90 95       	com	r25
    2c4e:	81 95       	neg	r24
    2c50:	9f 4f       	sbci	r25, 0xFF	; 255
    2c52:	9e 87       	std	Y+14, r25	; 0x0e
    2c54:	8d 87       	std	Y+13, r24	; 0x0d
    }
    if(Copy_u32Number==0)
    2c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5a:	00 97       	sbiw	r24, 0x00	; 0
    2c5c:	21 f4       	brne	.+8      	; 0x2c66 <LCD_voidSendNumber+0x4c>
    {
        LCD_voidSendData('0');
    2c5e:	80 e3       	ldi	r24, 0x30	; 48
    2c60:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_voidSendData>
    2c64:	3c c0       	rjmp	.+120    	; 0x2cde <LCD_voidSendNumber+0xc4>
    }
    else
    {
        u8 i=0;
    2c66:	1a 82       	std	Y+2, r1	; 0x02
    2c68:	1e c0       	rjmp	.+60     	; 0x2ca6 <LCD_voidSendNumber+0x8c>
        u8 arr[10];
        while(Copy_u32Number>0)
        {
            arr[i]=(Copy_u32Number%10)+48;
    2c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6c:	e8 2f       	mov	r30, r24
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c74:	2a e0       	ldi	r18, 0x0A	; 10
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	b9 01       	movw	r22, r18
    2c7a:	0e 94 19 22 	call	0x4432	; 0x4432 <__divmodhi4>
    2c7e:	28 2f       	mov	r18, r24
    2c80:	20 5d       	subi	r18, 0xD0	; 208
    2c82:	ce 01       	movw	r24, r28
    2c84:	03 96       	adiw	r24, 0x03	; 3
    2c86:	e8 0f       	add	r30, r24
    2c88:	f9 1f       	adc	r31, r25
    2c8a:	20 83       	st	Z, r18
            Copy_u32Number/=10;
    2c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c90:	2a e0       	ldi	r18, 0x0A	; 10
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	b9 01       	movw	r22, r18
    2c96:	0e 94 19 22 	call	0x4432	; 0x4432 <__divmodhi4>
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	9e 87       	std	Y+14, r25	; 0x0e
    2c9e:	8d 87       	std	Y+13, r24	; 0x0d
            i++;
    2ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca2:	8f 5f       	subi	r24, 0xFF	; 255
    2ca4:	8a 83       	std	Y+2, r24	; 0x02
    }
    else
    {
        u8 i=0;
        u8 arr[10];
        while(Copy_u32Number>0)
    2ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2caa:	18 16       	cp	r1, r24
    2cac:	19 06       	cpc	r1, r25
    2cae:	ec f2       	brlt	.-70     	; 0x2c6a <LCD_voidSendNumber+0x50>
        {
            arr[i]=(Copy_u32Number%10)+48;
            Copy_u32Number/=10;
            i++;
        }
        for(u8 j=i;j>0;j--)
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	89 83       	std	Y+1, r24	; 0x01
    2cb4:	11 c0       	rjmp	.+34     	; 0x2cd8 <LCD_voidSendNumber+0xbe>
        {
            LCD_voidSendData(arr[j-1]);
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	88 2f       	mov	r24, r24
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	9c 01       	movw	r18, r24
    2cbe:	21 50       	subi	r18, 0x01	; 1
    2cc0:	30 40       	sbci	r19, 0x00	; 0
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	03 96       	adiw	r24, 0x03	; 3
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	e2 0f       	add	r30, r18
    2cca:	f3 1f       	adc	r31, r19
    2ccc:	80 81       	ld	r24, Z
    2cce:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_voidSendData>
        {
            arr[i]=(Copy_u32Number%10)+48;
            Copy_u32Number/=10;
            i++;
        }
        for(u8 j=i;j>0;j--)
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	81 50       	subi	r24, 0x01	; 1
    2cd6:	89 83       	std	Y+1, r24	; 0x01
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	88 23       	and	r24, r24
    2cdc:	61 f7       	brne	.-40     	; 0x2cb6 <LCD_voidSendNumber+0x9c>
        {
            LCD_voidSendData(arr[j-1]);
        }
    }
}
    2cde:	2e 96       	adiw	r28, 0x0e	; 14
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	f8 94       	cli
    2ce4:	de bf       	out	0x3e, r29	; 62
    2ce6:	0f be       	out	0x3f, r0	; 63
    2ce8:	cd bf       	out	0x3d, r28	; 61
    2cea:	cf 91       	pop	r28
    2cec:	df 91       	pop	r29
    2cee:	08 95       	ret

00002cf0 <LCD_voidGoToXY>:

 void LCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
 {
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	00 d0       	rcall	.+0      	; 0x2cf6 <LCD_voidGoToXY+0x6>
    2cf6:	0f 92       	push	r0
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
    2cfc:	8a 83       	std	Y+2, r24	; 0x02
    2cfe:	6b 83       	std	Y+3, r22	; 0x03
  u8 Local_u8Address=0;
    2d00:	19 82       	std	Y+1, r1	; 0x01

  if(Copy_u8XPos==0)
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	88 23       	and	r24, r24
    2d06:	19 f4       	brne	.+6      	; 0x2d0e <LCD_voidGoToXY+0x1e>
  {
      Local_u8Address=Copy_u8YPos;
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	06 c0       	rjmp	.+12     	; 0x2d1a <LCD_voidGoToXY+0x2a>
  }
  else if(Copy_u8XPos==1)
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d10:	81 30       	cpi	r24, 0x01	; 1
    2d12:	19 f4       	brne	.+6      	; 0x2d1a <LCD_voidGoToXY+0x2a>
  {
      Local_u8Address=Copy_u8YPos+0x40;
    2d14:	8b 81       	ldd	r24, Y+3	; 0x03
    2d16:	80 5c       	subi	r24, 0xC0	; 192
    2d18:	89 83       	std	Y+1, r24	; 0x01
  }
 
     SET_BIT(Local_u8Address,7);
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	80 68       	ori	r24, 0x80	; 128
    2d1e:	89 83       	std	Y+1, r24	; 0x01
     LCD_voidSendCommand(Local_u8Address);
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_voidSendCommand>
 }
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	cf 91       	pop	r28
    2d2e:	df 91       	pop	r29
    2d30:	08 95       	ret

00002d32 <LCD_voidSendSpecialChar>:


 void LCD_voidSendSpecialChar (unsigned char loc, unsigned char *msg)
{
    2d32:	df 93       	push	r29
    2d34:	cf 93       	push	r28
    2d36:	00 d0       	rcall	.+0      	; 0x2d38 <LCD_voidSendSpecialChar+0x6>
    2d38:	00 d0       	rcall	.+0      	; 0x2d3a <LCD_voidSendSpecialChar+0x8>
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
    2d3e:	8a 83       	std	Y+2, r24	; 0x02
    2d40:	7c 83       	std	Y+4, r23	; 0x04
    2d42:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char i;
	if(loc<8)
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	88 30       	cpi	r24, 0x08	; 8
    2d48:	f8 f4       	brcc	.+62     	; 0x2d88 <LCD_voidSendSpecialChar+0x56>
	{
        LCD_voidSendCommand(0x40+(loc*8));  //send the location of CGRAM address
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	88 2f       	mov	r24, r24
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	08 96       	adiw	r24, 0x08	; 8
    2d52:	88 0f       	add	r24, r24
    2d54:	99 1f       	adc	r25, r25
    2d56:	88 0f       	add	r24, r24
    2d58:	99 1f       	adc	r25, r25
    2d5a:	88 0f       	add	r24, r24
    2d5c:	99 1f       	adc	r25, r25
    2d5e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_voidSendCommand>
        for(i=0;i<8;i++)  //write 8 byte for generation of 1 character
    2d62:	19 82       	std	Y+1, r1	; 0x01
    2d64:	0e c0       	rjmp	.+28     	; 0x2d82 <LCD_voidSendSpecialChar+0x50>
        {
            LCD_voidSendData(msg[i]);
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	28 2f       	mov	r18, r24
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d70:	fc 01       	movw	r30, r24
    2d72:	e2 0f       	add	r30, r18
    2d74:	f3 1f       	adc	r31, r19
    2d76:	80 81       	ld	r24, Z
    2d78:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_voidSendData>
{
	unsigned char i;
	if(loc<8)
	{
        LCD_voidSendCommand(0x40+(loc*8));  //send the location of CGRAM address
        for(i=0;i<8;i++)  //write 8 byte for generation of 1 character
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	8f 5f       	subi	r24, 0xFF	; 255
    2d80:	89 83       	std	Y+1, r24	; 0x01
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	88 30       	cpi	r24, 0x08	; 8
    2d86:	78 f3       	brcs	.-34     	; 0x2d66 <LCD_voidSendSpecialChar+0x34>
        {
            LCD_voidSendData(msg[i]);
        }
	}
}
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	cf 91       	pop	r28
    2d92:	df 91       	pop	r29
    2d94:	08 95       	ret

00002d96 <LCD_voidPrintSpecialChar>:
//      str= gcvt(Copy_f32Number,2,)
// }


 void  LCD_voidPrintSpecialChar(void)
 {
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	af 97       	sbiw	r28, 0x2f	; 47
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	cd bf       	out	0x3d, r28	; 61
	                               0b00100,
	                               0b01010,
	                               0b10001,
	                               0b00000,
	                               0b00000
	                              };
    2daa:	ce 01       	movw	r24, r28
    2dac:	01 96       	adiw	r24, 0x01	; 1
    2dae:	9a a3       	std	Y+34, r25	; 0x22
    2db0:	89 a3       	std	Y+33, r24	; 0x21
    2db2:	ad e8       	ldi	r26, 0x8D	; 141
    2db4:	b1 e0       	ldi	r27, 0x01	; 1
    2db6:	bc a3       	std	Y+36, r27	; 0x24
    2db8:	ab a3       	std	Y+35, r26	; 0x23
    2dba:	b8 e0       	ldi	r27, 0x08	; 8
    2dbc:	bd a3       	std	Y+37, r27	; 0x25
    2dbe:	eb a1       	ldd	r30, Y+35	; 0x23
    2dc0:	fc a1       	ldd	r31, Y+36	; 0x24
    2dc2:	00 80       	ld	r0, Z
    2dc4:	8b a1       	ldd	r24, Y+35	; 0x23
    2dc6:	9c a1       	ldd	r25, Y+36	; 0x24
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	9c a3       	std	Y+36, r25	; 0x24
    2dcc:	8b a3       	std	Y+35, r24	; 0x23
    2dce:	a9 a1       	ldd	r26, Y+33	; 0x21
    2dd0:	ba a1       	ldd	r27, Y+34	; 0x22
    2dd2:	0c 92       	st	X, r0
    2dd4:	e9 a1       	ldd	r30, Y+33	; 0x21
    2dd6:	fa a1       	ldd	r31, Y+34	; 0x22
    2dd8:	31 96       	adiw	r30, 0x01	; 1
    2dda:	fa a3       	std	Y+34, r31	; 0x22
    2ddc:	e9 a3       	std	Y+33, r30	; 0x21
    2dde:	fd a1       	ldd	r31, Y+37	; 0x25
    2de0:	f1 50       	subi	r31, 0x01	; 1
    2de2:	fd a3       	std	Y+37, r31	; 0x25
    2de4:	8d a1       	ldd	r24, Y+37	; 0x25
    2de6:	88 23       	and	r24, r24
    2de8:	51 f7       	brne	.-44     	; 0x2dbe <LCD_voidPrintSpecialChar+0x28>
	                               0b11111,
	                               0b00000,
	                               0b00100,
	                               0b00000,
	                               0b00000
	                        };
    2dea:	de 01       	movw	r26, r28
    2dec:	19 96       	adiw	r26, 0x09	; 9
    2dee:	bf a3       	std	Y+39, r27	; 0x27
    2df0:	ae a3       	std	Y+38, r26	; 0x26
    2df2:	e5 e8       	ldi	r30, 0x85	; 133
    2df4:	f1 e0       	ldi	r31, 0x01	; 1
    2df6:	f9 a7       	std	Y+41, r31	; 0x29
    2df8:	e8 a7       	std	Y+40, r30	; 0x28
    2dfa:	f8 e0       	ldi	r31, 0x08	; 8
    2dfc:	fa a7       	std	Y+42, r31	; 0x2a
    2dfe:	a8 a5       	ldd	r26, Y+40	; 0x28
    2e00:	b9 a5       	ldd	r27, Y+41	; 0x29
    2e02:	0c 90       	ld	r0, X
    2e04:	e8 a5       	ldd	r30, Y+40	; 0x28
    2e06:	f9 a5       	ldd	r31, Y+41	; 0x29
    2e08:	31 96       	adiw	r30, 0x01	; 1
    2e0a:	f9 a7       	std	Y+41, r31	; 0x29
    2e0c:	e8 a7       	std	Y+40, r30	; 0x28
    2e0e:	ae a1       	ldd	r26, Y+38	; 0x26
    2e10:	bf a1       	ldd	r27, Y+39	; 0x27
    2e12:	0c 92       	st	X, r0
    2e14:	ee a1       	ldd	r30, Y+38	; 0x26
    2e16:	ff a1       	ldd	r31, Y+39	; 0x27
    2e18:	31 96       	adiw	r30, 0x01	; 1
    2e1a:	ff a3       	std	Y+39, r31	; 0x27
    2e1c:	ee a3       	std	Y+38, r30	; 0x26
    2e1e:	fa a5       	ldd	r31, Y+42	; 0x2a
    2e20:	f1 50       	subi	r31, 0x01	; 1
    2e22:	fa a7       	std	Y+42, r31	; 0x2a
    2e24:	8a a5       	ldd	r24, Y+42	; 0x2a
    2e26:	88 23       	and	r24, r24
    2e28:	51 f7       	brne	.-44     	; 0x2dfe <LCD_voidPrintSpecialChar+0x68>
	                               0b11111,
	                               0b00100,
	                               0b00100,
	                               0b00000,
	                               0b00000
	                        };
    2e2a:	de 01       	movw	r26, r28
    2e2c:	51 96       	adiw	r26, 0x11	; 17
    2e2e:	bc a7       	std	Y+44, r27	; 0x2c
    2e30:	ab a7       	std	Y+43, r26	; 0x2b
    2e32:	ed e7       	ldi	r30, 0x7D	; 125
    2e34:	f1 e0       	ldi	r31, 0x01	; 1
    2e36:	fe a7       	std	Y+46, r31	; 0x2e
    2e38:	ed a7       	std	Y+45, r30	; 0x2d
    2e3a:	f8 e0       	ldi	r31, 0x08	; 8
    2e3c:	ff a7       	std	Y+47, r31	; 0x2f
    2e3e:	ad a5       	ldd	r26, Y+45	; 0x2d
    2e40:	be a5       	ldd	r27, Y+46	; 0x2e
    2e42:	0c 90       	ld	r0, X
    2e44:	ed a5       	ldd	r30, Y+45	; 0x2d
    2e46:	fe a5       	ldd	r31, Y+46	; 0x2e
    2e48:	31 96       	adiw	r30, 0x01	; 1
    2e4a:	fe a7       	std	Y+46, r31	; 0x2e
    2e4c:	ed a7       	std	Y+45, r30	; 0x2d
    2e4e:	ab a5       	ldd	r26, Y+43	; 0x2b
    2e50:	bc a5       	ldd	r27, Y+44	; 0x2c
    2e52:	0c 92       	st	X, r0
    2e54:	eb a5       	ldd	r30, Y+43	; 0x2b
    2e56:	fc a5       	ldd	r31, Y+44	; 0x2c
    2e58:	31 96       	adiw	r30, 0x01	; 1
    2e5a:	fc a7       	std	Y+44, r31	; 0x2c
    2e5c:	eb a7       	std	Y+43, r30	; 0x2b
    2e5e:	ff a5       	ldd	r31, Y+47	; 0x2f
    2e60:	f1 50       	subi	r31, 0x01	; 1
    2e62:	ff a7       	std	Y+47, r31	; 0x2f
    2e64:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e66:	88 23       	and	r24, r24
    2e68:	51 f7       	brne	.-44     	; 0x2e3e <LCD_voidPrintSpecialChar+0xa8>
	                               0b11111,
	                               0b00000,
	                               0b00000,
	                               0b00000,
	                               0b00000
	                           };
    2e6a:	88 e0       	ldi	r24, 0x08	; 8
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	79 96       	adiw	r30, 0x19	; 25
    2e70:	df 01       	movw	r26, r30
    2e72:	98 2f       	mov	r25, r24
    2e74:	1d 92       	st	X+, r1
    2e76:	9a 95       	dec	r25
    2e78:	e9 f7       	brne	.-6      	; 0x2e74 <LCD_voidPrintSpecialChar+0xde>
    2e7a:	8f e1       	ldi	r24, 0x1F	; 31
    2e7c:	8c 8f       	std	Y+28, r24	; 0x1c

	   LCD_voidSendSpecialChar(0,ADDITION_CHAR);
    2e7e:	9e 01       	movw	r18, r28
    2e80:	2f 5e       	subi	r18, 0xEF	; 239
    2e82:	3f 4f       	sbci	r19, 0xFF	; 255
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	b9 01       	movw	r22, r18
    2e88:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_voidSendSpecialChar>
	      LCD_voidSendSpecialChar(1,DIVISION_CHAR);
    2e8c:	9e 01       	movw	r18, r28
    2e8e:	27 5f       	subi	r18, 0xF7	; 247
    2e90:	3f 4f       	sbci	r19, 0xFF	; 255
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	b9 01       	movw	r22, r18
    2e96:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_voidSendSpecialChar>
	      LCD_voidSendSpecialChar(2,MULTIPLICATION_CHAR);
    2e9a:	82 e0       	ldi	r24, 0x02	; 2
    2e9c:	9e 01       	movw	r18, r28
    2e9e:	2f 5f       	subi	r18, 0xFF	; 255
    2ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea2:	b9 01       	movw	r22, r18
    2ea4:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_voidSendSpecialChar>
	      LCD_voidSendSpecialChar(3,SUBTRACTION_CHAR);
    2ea8:	9e 01       	movw	r18, r28
    2eaa:	27 5e       	subi	r18, 0xE7	; 231
    2eac:	3f 4f       	sbci	r19, 0xFF	; 255
    2eae:	83 e0       	ldi	r24, 0x03	; 3
    2eb0:	b9 01       	movw	r22, r18
    2eb2:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_voidSendSpecialChar>

 }
    2eb6:	af 96       	adiw	r28, 0x2f	; 47
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	cf 91       	pop	r28
    2ec4:	df 91       	pop	r29
    2ec6:	08 95       	ret

00002ec8 <KPD_voidInit>:
#include "../../MCAL/DIO/DIO_interface.h"

#include "KPD_interface.h"

void KPD_voidInit(u8 KPD_COL_PORT,u8 KPD_ROW_PORT)
{
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <KPD_voidInit+0x6>
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    2ed4:	6a 83       	std	Y+2, r22	; 0x02
    //set rows as input 
    DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW0_PIN,INPUT);
    2ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed8:	64 e0       	ldi	r22, 0x04	; 4
    2eda:	40 e0       	ldi	r20, 0x00	; 0
    2edc:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW1_PIN,INPUT);
    2ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee2:	65 e0       	ldi	r22, 0x05	; 5
    2ee4:	40 e0       	ldi	r20, 0x00	; 0
    2ee6:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW2_PIN,INPUT);
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	66 e0       	ldi	r22, 0x06	; 6
    2eee:	40 e0       	ldi	r20, 0x00	; 0
    2ef0:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW3_PIN,INPUT);
    2ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef6:	67 e0       	ldi	r22, 0x07	; 7
    2ef8:	40 e0       	ldi	r20, 0x00	; 0
    2efa:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>

    //set rows pull up
    DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW0_PIN,HIGH);
    2efe:	8a 81       	ldd	r24, Y+2	; 0x02
    2f00:	64 e0       	ldi	r22, 0x04	; 4
    2f02:	41 e0       	ldi	r20, 0x01	; 1
    2f04:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW1_PIN,HIGH);
    2f08:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0a:	65 e0       	ldi	r22, 0x05	; 5
    2f0c:	41 e0       	ldi	r20, 0x01	; 1
    2f0e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW2_PIN,HIGH);
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	66 e0       	ldi	r22, 0x06	; 6
    2f16:	41 e0       	ldi	r20, 0x01	; 1
    2f18:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW3_PIN,HIGH);
    2f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1e:	67 e0       	ldi	r22, 0x07	; 7
    2f20:	41 e0       	ldi	r20, 0x01	; 1
    2f22:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>

    //set columns as output
    DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL0_PIN,OUTPUT);
    2f26:	89 81       	ldd	r24, Y+1	; 0x01
    2f28:	60 e0       	ldi	r22, 0x00	; 0
    2f2a:	41 e0       	ldi	r20, 0x01	; 1
    2f2c:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL1_PIN,OUTPUT);
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	61 e0       	ldi	r22, 0x01	; 1
    2f34:	41 e0       	ldi	r20, 0x01	; 1
    2f36:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL2_PIN,OUTPUT);
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	62 e0       	ldi	r22, 0x02	; 2
    2f3e:	41 e0       	ldi	r20, 0x01	; 1
    2f40:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>

    //set columns pull up
    DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL0_PIN,HIGH);
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	60 e0       	ldi	r22, 0x00	; 0
    2f48:	41 e0       	ldi	r20, 0x01	; 1
    2f4a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL1_PIN,HIGH);
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	61 e0       	ldi	r22, 0x01	; 1
    2f52:	41 e0       	ldi	r20, 0x01	; 1
    2f54:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL2_PIN,HIGH);
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	62 e0       	ldi	r22, 0x02	; 2
    2f5c:	41 e0       	ldi	r20, 0x01	; 1
    2f5e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>



}
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(u8 KPD_COL_PORT,u8 KPD_ROW_PORT)
{
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	a3 97       	sbiw	r28, 0x23	; 35
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	88 8f       	std	Y+24, r24	; 0x18
    2f82:	69 8f       	std	Y+25, r22	; 0x19
   u8 Local_u8PressedKey=0xAA;
    2f84:	8a ea       	ldi	r24, 0xAA	; 170
    2f86:	8c 83       	std	Y+4, r24	; 0x04

   u8 Local_u8ColumnsArray[3]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN};
    2f88:	ce 01       	movw	r24, r28
    2f8a:	05 96       	adiw	r24, 0x05	; 5
    2f8c:	9b 8f       	std	Y+27, r25	; 0x1b
    2f8e:	8a 8f       	std	Y+26, r24	; 0x1a
    2f90:	e1 ea       	ldi	r30, 0xA1	; 161
    2f92:	f1 e0       	ldi	r31, 0x01	; 1
    2f94:	fd 8f       	std	Y+29, r31	; 0x1d
    2f96:	ec 8f       	std	Y+28, r30	; 0x1c
    2f98:	f3 e0       	ldi	r31, 0x03	; 3
    2f9a:	fe 8f       	std	Y+30, r31	; 0x1e
    2f9c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2f9e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2fa0:	00 80       	ld	r0, Z
    2fa2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2fa4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2fa6:	01 96       	adiw	r24, 0x01	; 1
    2fa8:	9d 8f       	std	Y+29, r25	; 0x1d
    2faa:	8c 8f       	std	Y+28, r24	; 0x1c
    2fac:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2fae:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2fb0:	00 82       	st	Z, r0
    2fb2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2fb4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2fb6:	01 96       	adiw	r24, 0x01	; 1
    2fb8:	9b 8f       	std	Y+27, r25	; 0x1b
    2fba:	8a 8f       	std	Y+26, r24	; 0x1a
    2fbc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fbe:	91 50       	subi	r25, 0x01	; 1
    2fc0:	9e 8f       	std	Y+30, r25	; 0x1e
    2fc2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2fc4:	ee 23       	and	r30, r30
    2fc6:	51 f7       	brne	.-44     	; 0x2f9c <KPD_u8GetPressedKey+0x30>
   u8 Local_u8RowsArray[4]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
    2fc8:	84 e0       	ldi	r24, 0x04	; 4
    2fca:	88 87       	std	Y+8, r24	; 0x08
    2fcc:	85 e0       	ldi	r24, 0x05	; 5
    2fce:	89 87       	std	Y+9, r24	; 0x09
    2fd0:	86 e0       	ldi	r24, 0x06	; 6
    2fd2:	8a 87       	std	Y+10, r24	; 0x0a
    2fd4:	87 e0       	ldi	r24, 0x07	; 7
    2fd6:	8b 87       	std	Y+11, r24	; 0x0b

   u8 Local_u8KeyArray[4][3]={{1,2,3},{4,5,6},{7,8,9},{12,0,13}};
    2fd8:	ce 01       	movw	r24, r28
    2fda:	0c 96       	adiw	r24, 0x0c	; 12
    2fdc:	98 a3       	std	Y+32, r25	; 0x20
    2fde:	8f 8f       	std	Y+31, r24	; 0x1f
    2fe0:	e5 e9       	ldi	r30, 0x95	; 149
    2fe2:	f1 e0       	ldi	r31, 0x01	; 1
    2fe4:	fa a3       	std	Y+34, r31	; 0x22
    2fe6:	e9 a3       	std	Y+33, r30	; 0x21
    2fe8:	fc e0       	ldi	r31, 0x0C	; 12
    2fea:	fb a3       	std	Y+35, r31	; 0x23
    2fec:	e9 a1       	ldd	r30, Y+33	; 0x21
    2fee:	fa a1       	ldd	r31, Y+34	; 0x22
    2ff0:	00 80       	ld	r0, Z
    2ff2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ff4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ff6:	01 96       	adiw	r24, 0x01	; 1
    2ff8:	9a a3       	std	Y+34, r25	; 0x22
    2ffa:	89 a3       	std	Y+33, r24	; 0x21
    2ffc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2ffe:	f8 a1       	ldd	r31, Y+32	; 0x20
    3000:	00 82       	st	Z, r0
    3002:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3004:	98 a1       	ldd	r25, Y+32	; 0x20
    3006:	01 96       	adiw	r24, 0x01	; 1
    3008:	98 a3       	std	Y+32, r25	; 0x20
    300a:	8f 8f       	std	Y+31, r24	; 0x1f
    300c:	9b a1       	ldd	r25, Y+35	; 0x23
    300e:	91 50       	subi	r25, 0x01	; 1
    3010:	9b a3       	std	Y+35, r25	; 0x23
    3012:	eb a1       	ldd	r30, Y+35	; 0x23
    3014:	ee 23       	and	r30, r30
    3016:	51 f7       	brne	.-44     	; 0x2fec <KPD_u8GetPressedKey+0x80>
  while(1){
   //set columns to high one by one and check which row is pressed
   for(u8 Local_u8ColumnsIndex=0;Local_u8ColumnsIndex<3;Local_u8ColumnsIndex++)
    3018:	1b 82       	std	Y+3, r1	; 0x03
    301a:	6b c0       	rjmp	.+214    	; 0x30f2 <KPD_u8GetPressedKey+0x186>
   {  DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8ColumnsIndex],LOW);
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	28 2f       	mov	r18, r24
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	ce 01       	movw	r24, r28
    3024:	05 96       	adiw	r24, 0x05	; 5
    3026:	fc 01       	movw	r30, r24
    3028:	e2 0f       	add	r30, r18
    302a:	f3 1f       	adc	r31, r19
    302c:	90 81       	ld	r25, Z
    302e:	88 8d       	ldd	r24, Y+24	; 0x18
    3030:	69 2f       	mov	r22, r25
    3032:	40 e0       	ldi	r20, 0x00	; 0
    3034:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>

    //check which row is pressed
    for(u8 Local_u8RowsIndex=0;Local_u8RowsIndex<4;Local_u8RowsIndex++)
    3038:	1a 82       	std	Y+2, r1	; 0x02
    303a:	46 c0       	rjmp	.+140    	; 0x30c8 <KPD_u8GetPressedKey+0x15c>
     {
        u8 Local_u8PinState =DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	28 2f       	mov	r18, r24
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	ce 01       	movw	r24, r28
    3044:	08 96       	adiw	r24, 0x08	; 8
    3046:	fc 01       	movw	r30, r24
    3048:	e2 0f       	add	r30, r18
    304a:	f3 1f       	adc	r31, r19
    304c:	90 81       	ld	r25, Z
    304e:	89 8d       	ldd	r24, Y+25	; 0x19
    3050:	69 2f       	mov	r22, r25
    3052:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <DIO_u8GetPinValue>
    3056:	89 83       	std	Y+1, r24	; 0x01
        if(Local_u8PinState==LOW)
    3058:	89 81       	ldd	r24, Y+1	; 0x01
    305a:	88 23       	and	r24, r24
    305c:	91 f5       	brne	.+100    	; 0x30c2 <KPD_u8GetPressedKey+0x156>
        {
            Local_u8PressedKey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8ColumnsIndex];
    305e:	8a 81       	ldd	r24, Y+2	; 0x02
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	48 2f       	mov	r20, r24
    3068:	50 e0       	ldi	r21, 0x00	; 0
    306a:	c9 01       	movw	r24, r18
    306c:	88 0f       	add	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	82 0f       	add	r24, r18
    3072:	93 1f       	adc	r25, r19
    3074:	9e 01       	movw	r18, r28
    3076:	2f 5f       	subi	r18, 0xFF	; 255
    3078:	3f 4f       	sbci	r19, 0xFF	; 255
    307a:	82 0f       	add	r24, r18
    307c:	93 1f       	adc	r25, r19
    307e:	84 0f       	add	r24, r20
    3080:	95 1f       	adc	r25, r21
    3082:	fc 01       	movw	r30, r24
    3084:	3b 96       	adiw	r30, 0x0b	; 11
    3086:	80 81       	ld	r24, Z
    3088:	8c 83       	std	Y+4, r24	; 0x04
    308a:	0e c0       	rjmp	.+28     	; 0x30a8 <KPD_u8GetPressedKey+0x13c>
           //wait until key is released
            while(Local_u8PinState==LOW)
            {
                Local_u8PinState=DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
    308c:	8a 81       	ldd	r24, Y+2	; 0x02
    308e:	28 2f       	mov	r18, r24
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	ce 01       	movw	r24, r28
    3094:	08 96       	adiw	r24, 0x08	; 8
    3096:	fc 01       	movw	r30, r24
    3098:	e2 0f       	add	r30, r18
    309a:	f3 1f       	adc	r31, r19
    309c:	90 81       	ld	r25, Z
    309e:	89 8d       	ldd	r24, Y+25	; 0x19
    30a0:	69 2f       	mov	r22, r25
    30a2:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <DIO_u8GetPinValue>
    30a6:	89 83       	std	Y+1, r24	; 0x01
        u8 Local_u8PinState =DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
        if(Local_u8PinState==LOW)
        {
            Local_u8PressedKey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8ColumnsIndex];
           //wait until key is released
            while(Local_u8PinState==LOW)
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	88 23       	and	r24, r24
    30ac:	79 f3       	breq	.-34     	; 0x308c <KPD_u8GetPressedKey+0x120>
            {
                Local_u8PinState=DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
            }
            return Local_u8PressedKey;
    30ae:	8c 81       	ldd	r24, Y+4	; 0x04
     }
      DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8ColumnsIndex],HIGH);
   }
  //return Local_u8PressedKey;
}
    30b0:	a3 96       	adiw	r28, 0x23	; 35
    30b2:	0f b6       	in	r0, 0x3f	; 63
    30b4:	f8 94       	cli
    30b6:	de bf       	out	0x3e, r29	; 62
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	cd bf       	out	0x3d, r28	; 61
    30bc:	cf 91       	pop	r28
    30be:	df 91       	pop	r29
    30c0:	08 95       	ret
   //set columns to high one by one and check which row is pressed
   for(u8 Local_u8ColumnsIndex=0;Local_u8ColumnsIndex<3;Local_u8ColumnsIndex++)
   {  DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8ColumnsIndex],LOW);

    //check which row is pressed
    for(u8 Local_u8RowsIndex=0;Local_u8RowsIndex<4;Local_u8RowsIndex++)
    30c2:	8a 81       	ldd	r24, Y+2	; 0x02
    30c4:	8f 5f       	subi	r24, 0xFF	; 255
    30c6:	8a 83       	std	Y+2, r24	; 0x02
    30c8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ca:	84 30       	cpi	r24, 0x04	; 4
    30cc:	08 f4       	brcc	.+2      	; 0x30d0 <KPD_u8GetPressedKey+0x164>
    30ce:	b6 cf       	rjmp	.-148    	; 0x303c <KPD_u8GetPressedKey+0xd0>
                Local_u8PinState=DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
            }
            return Local_u8PressedKey;
        }
     }
      DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8ColumnsIndex],HIGH);
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	28 2f       	mov	r18, r24
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	ce 01       	movw	r24, r28
    30d8:	05 96       	adiw	r24, 0x05	; 5
    30da:	fc 01       	movw	r30, r24
    30dc:	e2 0f       	add	r30, r18
    30de:	f3 1f       	adc	r31, r19
    30e0:	90 81       	ld	r25, Z
    30e2:	88 8d       	ldd	r24, Y+24	; 0x18
    30e4:	69 2f       	mov	r22, r25
    30e6:	41 e0       	ldi	r20, 0x01	; 1
    30e8:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
   u8 Local_u8RowsArray[4]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

   u8 Local_u8KeyArray[4][3]={{1,2,3},{4,5,6},{7,8,9},{12,0,13}};
  while(1){
   //set columns to high one by one and check which row is pressed
   for(u8 Local_u8ColumnsIndex=0;Local_u8ColumnsIndex<3;Local_u8ColumnsIndex++)
    30ec:	8b 81       	ldd	r24, Y+3	; 0x03
    30ee:	8f 5f       	subi	r24, 0xFF	; 255
    30f0:	8b 83       	std	Y+3, r24	; 0x03
    30f2:	8b 81       	ldd	r24, Y+3	; 0x03
    30f4:	83 30       	cpi	r24, 0x03	; 3
    30f6:	08 f4       	brcc	.+2      	; 0x30fa <KPD_u8GetPressedKey+0x18e>
    30f8:	91 cf       	rjmp	.-222    	; 0x301c <KPD_u8GetPressedKey+0xb0>
    30fa:	8e cf       	rjmp	.-228    	; 0x3018 <KPD_u8GetPressedKey+0xac>

000030fc <EEPROM_SendDataByte>:
#include <util/delay.h>
#include "../../MCAL/TWI_Driver/TWI_interface.h"
#include "EEPROM_interface.h"


void EEPROM_SendDataByte(u8 Copy_u8DataByte,u16 Copy_u16LocationAddress){
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	00 d0       	rcall	.+0      	; 0x3102 <EEPROM_SendDataByte+0x6>
    3102:	0f 92       	push	r0
    3104:	cd b7       	in	r28, 0x3d	; 61
    3106:	de b7       	in	r29, 0x3e	; 62
    3108:	89 83       	std	Y+1, r24	; 0x01
    310a:	7b 83       	std	Y+3, r23	; 0x03
    310c:	6a 83       	std	Y+2, r22	; 0x02
   /*send start condition*/
   TWI_SendStartCondition();
    310e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <TWI_SendStartCondition>
   /*send slave address with write*/
   TWI_SendSlaveAddressWithWrite( (0b1010 << 3) | (A2 << 2) | (Copy_u16LocationAddress >> 8) );
    3112:	8a 81       	ldd	r24, Y+2	; 0x02
    3114:	9b 81       	ldd	r25, Y+3	; 0x03
    3116:	89 2f       	mov	r24, r25
    3118:	99 27       	eor	r25, r25
    311a:	80 65       	ori	r24, 0x50	; 80
    311c:	0e 94 b2 08 	call	0x1164	; 0x1164 <TWI_SendSlaveAddressWithWrite>
  // TWI_SendSlaveAddressWithWrite(0b1010000);
   /*send location address*/
   /*casting to 8 bits to send the first 8 bits only*/
   TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    3120:	8a 81       	ldd	r24, Y+2	; 0x02
    3122:	0e 94 22 09 	call	0x1244	; 0x1244 <TWI_MasterWriteDataByte>
   /*send data byte*/
   TWI_MasterWriteDataByte(Copy_u8DataByte);
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	0e 94 22 09 	call	0x1244	; 0x1244 <TWI_MasterWriteDataByte>
   /*send stop condition*/
   TWI_SendStopCondition();
    312c:	0e 94 81 09 	call	0x1302	; 0x1302 <TWI_SendStopCondition>
}
    3130:	0f 90       	pop	r0
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <EEPROM_ReadDataByte>:

void EEPROM_ReadDataByte(u8 *Copy_pu8DataByte,u16 Copy_u16LocationAddress){
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	00 d0       	rcall	.+0      	; 0x3142 <EEPROM_ReadDataByte+0x6>
    3142:	00 d0       	rcall	.+0      	; 0x3144 <EEPROM_ReadDataByte+0x8>
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
    3148:	9a 83       	std	Y+2, r25	; 0x02
    314a:	89 83       	std	Y+1, r24	; 0x01
    314c:	7c 83       	std	Y+4, r23	; 0x04
    314e:	6b 83       	std	Y+3, r22	; 0x03
   /*send start condition*/
   TWI_SendStartCondition();
    3150:	0e 94 5e 08 	call	0x10bc	; 0x10bc <TWI_SendStartCondition>
   /*send slave address with write*/
   TWI_SendSlaveAddressWithWrite( (0b1010 << 3) | (A2 << 2) | (Copy_u16LocationAddress >> 8) );
    3154:	8b 81       	ldd	r24, Y+3	; 0x03
    3156:	9c 81       	ldd	r25, Y+4	; 0x04
    3158:	89 2f       	mov	r24, r25
    315a:	99 27       	eor	r25, r25
    315c:	80 65       	ori	r24, 0x50	; 80
    315e:	0e 94 b2 08 	call	0x1164	; 0x1164 <TWI_SendSlaveAddressWithWrite>
   //TWI_SendSlaveAddressWithWrite(0b1010000);
   /*send location address*/
   /*casting to 8 bits to send the first 8 bits only*/
   TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    3162:	8b 81       	ldd	r24, Y+3	; 0x03
    3164:	0e 94 22 09 	call	0x1244	; 0x1244 <TWI_MasterWriteDataByte>
   /*send repeated start condition*/
   /*3ashan a8yar men write lel read*/
   TWI_SendRepeatedStart();
    3168:	0e 94 88 08 	call	0x1110	; 0x1110 <TWI_SendRepeatedStart>
   /*send slave address with read*/
   TWI_SendSlaveAddressWithRead( (0b1010 << 3) | (A2 << 2) | (Copy_u16LocationAddress >> 8) );
    316c:	8b 81       	ldd	r24, Y+3	; 0x03
    316e:	9c 81       	ldd	r25, Y+4	; 0x04
    3170:	89 2f       	mov	r24, r25
    3172:	99 27       	eor	r25, r25
    3174:	80 65       	ori	r24, 0x50	; 80
    3176:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <TWI_SendSlaveAddressWithRead>
   //TWI_MasterWriteDataByte(0b10100001);
   /*read data byte*/
   TWI_MasterReadDataByte(Copy_pu8DataByte);
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	9a 81       	ldd	r25, Y+2	; 0x02
    317e:	0e 94 4b 09 	call	0x1296	; 0x1296 <TWI_MasterReadDataByte>
   /*send stop condition*/
   TWI_SendStopCondition();
    3182:	0e 94 81 09 	call	0x1302	; 0x1302 <TWI_SendStopCondition>
}
    3186:	0f 90       	pop	r0
    3188:	0f 90       	pop	r0
    318a:	0f 90       	pop	r0
    318c:	0f 90       	pop	r0
    318e:	cf 91       	pop	r28
    3190:	df 91       	pop	r29
    3192:	08 95       	ret

00003194 <CLC_voidInit>:
#define ADD 13
#define EQU 14
#define ON_CLC 15


void CLC_voidInit(u8 CLC_COL_PORT,u8 CLC_ROW_PORT){
    3194:	df 93       	push	r29
    3196:	cf 93       	push	r28
    3198:	00 d0       	rcall	.+0      	; 0x319a <CLC_voidInit+0x6>
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
    319e:	89 83       	std	Y+1, r24	; 0x01
    31a0:	6a 83       	std	Y+2, r22	; 0x02
    //set rows as input 
    DIO_voidSetPinDirection(CLC_ROW_PORT,CLC_ROW0_PIN,INPUT);
    31a2:	8a 81       	ldd	r24, Y+2	; 0x02
    31a4:	60 e0       	ldi	r22, 0x00	; 0
    31a6:	40 e0       	ldi	r20, 0x00	; 0
    31a8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(CLC_ROW_PORT,CLC_ROW1_PIN,INPUT);
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
    31ae:	61 e0       	ldi	r22, 0x01	; 1
    31b0:	40 e0       	ldi	r20, 0x00	; 0
    31b2:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(CLC_ROW_PORT,CLC_ROW2_PIN,INPUT);
    31b6:	8a 81       	ldd	r24, Y+2	; 0x02
    31b8:	62 e0       	ldi	r22, 0x02	; 2
    31ba:	40 e0       	ldi	r20, 0x00	; 0
    31bc:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(CLC_ROW_PORT,CLC_ROW3_PIN,INPUT);
    31c0:	8a 81       	ldd	r24, Y+2	; 0x02
    31c2:	63 e0       	ldi	r22, 0x03	; 3
    31c4:	40 e0       	ldi	r20, 0x00	; 0
    31c6:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>

    //set rows pull up
    DIO_voidSetPinValue(CLC_ROW_PORT,CLC_ROW0_PIN,HIGH);
    31ca:	8a 81       	ldd	r24, Y+2	; 0x02
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	41 e0       	ldi	r20, 0x01	; 1
    31d0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(CLC_ROW_PORT,CLC_ROW1_PIN,HIGH);
    31d4:	8a 81       	ldd	r24, Y+2	; 0x02
    31d6:	61 e0       	ldi	r22, 0x01	; 1
    31d8:	41 e0       	ldi	r20, 0x01	; 1
    31da:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(CLC_ROW_PORT,CLC_ROW2_PIN,HIGH);
    31de:	8a 81       	ldd	r24, Y+2	; 0x02
    31e0:	62 e0       	ldi	r22, 0x02	; 2
    31e2:	41 e0       	ldi	r20, 0x01	; 1
    31e4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(CLC_ROW_PORT,CLC_ROW3_PIN,HIGH);
    31e8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ea:	63 e0       	ldi	r22, 0x03	; 3
    31ec:	41 e0       	ldi	r20, 0x01	; 1
    31ee:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>

    //set columns as output
    DIO_voidSetPinDirection(CLC_COL_PORT,CLC_COL0_PIN,OUTPUT);
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	64 e0       	ldi	r22, 0x04	; 4
    31f6:	41 e0       	ldi	r20, 0x01	; 1
    31f8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(CLC_COL_PORT,CLC_COL1_PIN,OUTPUT);
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	65 e0       	ldi	r22, 0x05	; 5
    3200:	41 e0       	ldi	r20, 0x01	; 1
    3202:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(CLC_COL_PORT,CLC_COL2_PIN,OUTPUT);
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	66 e0       	ldi	r22, 0x06	; 6
    320a:	41 e0       	ldi	r20, 0x01	; 1
    320c:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(CLC_COL_PORT,CLC_COL3_PIN,OUTPUT);
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	67 e0       	ldi	r22, 0x07	; 7
    3214:	41 e0       	ldi	r20, 0x01	; 1
    3216:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <DIO_voidSetPinDirection>

    //set columns pull up
    DIO_voidSetPinValue(CLC_COL_PORT,CLC_COL0_PIN,HIGH);
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	64 e0       	ldi	r22, 0x04	; 4
    321e:	41 e0       	ldi	r20, 0x01	; 1
    3220:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(CLC_COL_PORT,CLC_COL1_PIN,HIGH);
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	65 e0       	ldi	r22, 0x05	; 5
    3228:	41 e0       	ldi	r20, 0x01	; 1
    322a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(CLC_COL_PORT,CLC_COL2_PIN,HIGH);
    322e:	89 81       	ldd	r24, Y+1	; 0x01
    3230:	66 e0       	ldi	r22, 0x06	; 6
    3232:	41 e0       	ldi	r20, 0x01	; 1
    3234:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(CLC_COL_PORT,CLC_COL3_PIN,HIGH);
    3238:	89 81       	ldd	r24, Y+1	; 0x01
    323a:	67 e0       	ldi	r22, 0x07	; 7
    323c:	41 e0       	ldi	r20, 0x01	; 1
    323e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
}
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	cf 91       	pop	r28
    3248:	df 91       	pop	r29
    324a:	08 95       	ret

0000324c <CLC_u8GetPressedKey>:
u8 CLC_u8GetPressedKey(u8 CLC_COL_PORT,u8 CLC_ROW_PORT){
    324c:	df 93       	push	r29
    324e:	cf 93       	push	r28
    3250:	cd b7       	in	r28, 0x3d	; 61
    3252:	de b7       	in	r29, 0x3e	; 62
    3254:	a3 97       	sbiw	r28, 0x23	; 35
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	cd bf       	out	0x3d, r28	; 61
    3260:	8d 8f       	std	Y+29, r24	; 0x1d
    3262:	6e 8f       	std	Y+30, r22	; 0x1e
    u8 Local_u8PressedKey=0xAA;
    3264:	8a ea       	ldi	r24, 0xAA	; 170
    3266:	8c 83       	std	Y+4, r24	; 0x04

    u8 Local_u8ColumnsArray[4]={CLC_COL0_PIN,CLC_COL1_PIN,CLC_COL2_PIN,CLC_COL3_PIN};
    3268:	84 e0       	ldi	r24, 0x04	; 4
    326a:	8d 83       	std	Y+5, r24	; 0x05
    326c:	85 e0       	ldi	r24, 0x05	; 5
    326e:	8e 83       	std	Y+6, r24	; 0x06
    3270:	86 e0       	ldi	r24, 0x06	; 6
    3272:	8f 83       	std	Y+7, r24	; 0x07
    3274:	87 e0       	ldi	r24, 0x07	; 7
    3276:	88 87       	std	Y+8, r24	; 0x08
    u8 Local_u8RowsArray[4]={CLC_ROW0_PIN,CLC_ROW1_PIN,CLC_ROW2_PIN,CLC_ROW3_PIN};
    3278:	19 86       	std	Y+9, r1	; 0x09
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	8a 87       	std	Y+10, r24	; 0x0a
    327e:	82 e0       	ldi	r24, 0x02	; 2
    3280:	8b 87       	std	Y+11, r24	; 0x0b
    3282:	83 e0       	ldi	r24, 0x03	; 3
    3284:	8c 87       	std	Y+12, r24	; 0x0c

    u8 Local_u8KeyArray[4][4]={{7,8,9,DIV},{4,5,6,MUL},{1,2,3,SUB},{ON_CLC,0,EQU,ADD}};
    3286:	ce 01       	movw	r24, r28
    3288:	0d 96       	adiw	r24, 0x0d	; 13
    328a:	98 a3       	std	Y+32, r25	; 0x20
    328c:	8f 8f       	std	Y+31, r24	; 0x1f
    328e:	e4 ea       	ldi	r30, 0xA4	; 164
    3290:	f1 e0       	ldi	r31, 0x01	; 1
    3292:	fa a3       	std	Y+34, r31	; 0x22
    3294:	e9 a3       	std	Y+33, r30	; 0x21
    3296:	f0 e1       	ldi	r31, 0x10	; 16
    3298:	fb a3       	std	Y+35, r31	; 0x23
    329a:	e9 a1       	ldd	r30, Y+33	; 0x21
    329c:	fa a1       	ldd	r31, Y+34	; 0x22
    329e:	00 80       	ld	r0, Z
    32a0:	89 a1       	ldd	r24, Y+33	; 0x21
    32a2:	9a a1       	ldd	r25, Y+34	; 0x22
    32a4:	01 96       	adiw	r24, 0x01	; 1
    32a6:	9a a3       	std	Y+34, r25	; 0x22
    32a8:	89 a3       	std	Y+33, r24	; 0x21
    32aa:	ef 8d       	ldd	r30, Y+31	; 0x1f
    32ac:	f8 a1       	ldd	r31, Y+32	; 0x20
    32ae:	00 82       	st	Z, r0
    32b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32b2:	98 a1       	ldd	r25, Y+32	; 0x20
    32b4:	01 96       	adiw	r24, 0x01	; 1
    32b6:	98 a3       	std	Y+32, r25	; 0x20
    32b8:	8f 8f       	std	Y+31, r24	; 0x1f
    32ba:	9b a1       	ldd	r25, Y+35	; 0x23
    32bc:	91 50       	subi	r25, 0x01	; 1
    32be:	9b a3       	std	Y+35, r25	; 0x23
    32c0:	eb a1       	ldd	r30, Y+35	; 0x23
    32c2:	ee 23       	and	r30, r30
    32c4:	51 f7       	brne	.-44     	; 0x329a <CLC_u8GetPressedKey+0x4e>
    while(1){
    //set columns to high one by one and check which row is pressed
    for(u8 Local_u8ColumnsIndex=0;Local_u8ColumnsIndex<4;Local_u8ColumnsIndex++)
    32c6:	1b 82       	std	Y+3, r1	; 0x03
    32c8:	69 c0       	rjmp	.+210    	; 0x339c <CLC_u8GetPressedKey+0x150>
    {  DIO_voidSetPinValue(CLC_COL_PORT,Local_u8ColumnsArray[Local_u8ColumnsIndex],LOW);
    32ca:	8b 81       	ldd	r24, Y+3	; 0x03
    32cc:	28 2f       	mov	r18, r24
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	ce 01       	movw	r24, r28
    32d2:	05 96       	adiw	r24, 0x05	; 5
    32d4:	fc 01       	movw	r30, r24
    32d6:	e2 0f       	add	r30, r18
    32d8:	f3 1f       	adc	r31, r19
    32da:	90 81       	ld	r25, Z
    32dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32de:	69 2f       	mov	r22, r25
    32e0:	40 e0       	ldi	r20, 0x00	; 0
    32e2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>

     //check which row is pressed
     for(u8 Local_u8RowsIndex=0;Local_u8RowsIndex<4;Local_u8RowsIndex++)
    32e6:	1a 82       	std	Y+2, r1	; 0x02
    32e8:	44 c0       	rjmp	.+136    	; 0x3372 <CLC_u8GetPressedKey+0x126>
      {
         u8 Local_u8PinState =DIO_u8GetPinValue(CLC_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
    32ea:	8a 81       	ldd	r24, Y+2	; 0x02
    32ec:	28 2f       	mov	r18, r24
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	ce 01       	movw	r24, r28
    32f2:	09 96       	adiw	r24, 0x09	; 9
    32f4:	fc 01       	movw	r30, r24
    32f6:	e2 0f       	add	r30, r18
    32f8:	f3 1f       	adc	r31, r19
    32fa:	90 81       	ld	r25, Z
    32fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32fe:	69 2f       	mov	r22, r25
    3300:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <DIO_u8GetPinValue>
    3304:	89 83       	std	Y+1, r24	; 0x01
         if(Local_u8PinState==LOW)
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	88 23       	and	r24, r24
    330a:	81 f5       	brne	.+96     	; 0x336c <CLC_u8GetPressedKey+0x120>
         {
             Local_u8PressedKey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8ColumnsIndex];
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	28 2f       	mov	r18, r24
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	8b 81       	ldd	r24, Y+3	; 0x03
    3314:	48 2f       	mov	r20, r24
    3316:	50 e0       	ldi	r21, 0x00	; 0
    3318:	22 0f       	add	r18, r18
    331a:	33 1f       	adc	r19, r19
    331c:	22 0f       	add	r18, r18
    331e:	33 1f       	adc	r19, r19
    3320:	ce 01       	movw	r24, r28
    3322:	01 96       	adiw	r24, 0x01	; 1
    3324:	82 0f       	add	r24, r18
    3326:	93 1f       	adc	r25, r19
    3328:	84 0f       	add	r24, r20
    332a:	95 1f       	adc	r25, r21
    332c:	fc 01       	movw	r30, r24
    332e:	3c 96       	adiw	r30, 0x0c	; 12
    3330:	80 81       	ld	r24, Z
    3332:	8c 83       	std	Y+4, r24	; 0x04
    3334:	0e c0       	rjmp	.+28     	; 0x3352 <CLC_u8GetPressedKey+0x106>
            //wait until key is released
             while(Local_u8PinState==LOW)
             {
                 Local_u8PinState=DIO_u8GetPinValue(CLC_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
    3336:	8a 81       	ldd	r24, Y+2	; 0x02
    3338:	28 2f       	mov	r18, r24
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	ce 01       	movw	r24, r28
    333e:	09 96       	adiw	r24, 0x09	; 9
    3340:	fc 01       	movw	r30, r24
    3342:	e2 0f       	add	r30, r18
    3344:	f3 1f       	adc	r31, r19
    3346:	90 81       	ld	r25, Z
    3348:	8e 8d       	ldd	r24, Y+30	; 0x1e
    334a:	69 2f       	mov	r22, r25
    334c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <DIO_u8GetPinValue>
    3350:	89 83       	std	Y+1, r24	; 0x01
         u8 Local_u8PinState =DIO_u8GetPinValue(CLC_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
         if(Local_u8PinState==LOW)
         {
             Local_u8PressedKey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8ColumnsIndex];
            //wait until key is released
             while(Local_u8PinState==LOW)
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	88 23       	and	r24, r24
    3356:	79 f3       	breq	.-34     	; 0x3336 <CLC_u8GetPressedKey+0xea>
             {
                 Local_u8PinState=DIO_u8GetPinValue(CLC_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
             }
             return Local_u8PressedKey;
    3358:	8c 81       	ldd	r24, Y+4	; 0x04
      }
      //set column to high again
      DIO_voidSetPinValue(CLC_COL_PORT,Local_u8ColumnsArray[Local_u8ColumnsIndex],HIGH);
    }
    }   
}
    335a:	a3 96       	adiw	r28, 0x23	; 35
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	08 95       	ret
    //set columns to high one by one and check which row is pressed
    for(u8 Local_u8ColumnsIndex=0;Local_u8ColumnsIndex<4;Local_u8ColumnsIndex++)
    {  DIO_voidSetPinValue(CLC_COL_PORT,Local_u8ColumnsArray[Local_u8ColumnsIndex],LOW);

     //check which row is pressed
     for(u8 Local_u8RowsIndex=0;Local_u8RowsIndex<4;Local_u8RowsIndex++)
    336c:	8a 81       	ldd	r24, Y+2	; 0x02
    336e:	8f 5f       	subi	r24, 0xFF	; 255
    3370:	8a 83       	std	Y+2, r24	; 0x02
    3372:	8a 81       	ldd	r24, Y+2	; 0x02
    3374:	84 30       	cpi	r24, 0x04	; 4
    3376:	08 f4       	brcc	.+2      	; 0x337a <CLC_u8GetPressedKey+0x12e>
    3378:	b8 cf       	rjmp	.-144    	; 0x32ea <CLC_u8GetPressedKey+0x9e>
             }
             return Local_u8PressedKey;
         }
      }
      //set column to high again
      DIO_voidSetPinValue(CLC_COL_PORT,Local_u8ColumnsArray[Local_u8ColumnsIndex],HIGH);
    337a:	8b 81       	ldd	r24, Y+3	; 0x03
    337c:	28 2f       	mov	r18, r24
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	ce 01       	movw	r24, r28
    3382:	05 96       	adiw	r24, 0x05	; 5
    3384:	fc 01       	movw	r30, r24
    3386:	e2 0f       	add	r30, r18
    3388:	f3 1f       	adc	r31, r19
    338a:	90 81       	ld	r25, Z
    338c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    338e:	69 2f       	mov	r22, r25
    3390:	41 e0       	ldi	r20, 0x01	; 1
    3392:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <DIO_voidSetPinValue>
    u8 Local_u8RowsArray[4]={CLC_ROW0_PIN,CLC_ROW1_PIN,CLC_ROW2_PIN,CLC_ROW3_PIN};

    u8 Local_u8KeyArray[4][4]={{7,8,9,DIV},{4,5,6,MUL},{1,2,3,SUB},{ON_CLC,0,EQU,ADD}};
    while(1){
    //set columns to high one by one and check which row is pressed
    for(u8 Local_u8ColumnsIndex=0;Local_u8ColumnsIndex<4;Local_u8ColumnsIndex++)
    3396:	8b 81       	ldd	r24, Y+3	; 0x03
    3398:	8f 5f       	subi	r24, 0xFF	; 255
    339a:	8b 83       	std	Y+3, r24	; 0x03
    339c:	8b 81       	ldd	r24, Y+3	; 0x03
    339e:	84 30       	cpi	r24, 0x04	; 4
    33a0:	08 f4       	brcc	.+2      	; 0x33a4 <CLC_u8GetPressedKey+0x158>
    33a2:	93 cf       	rjmp	.-218    	; 0x32ca <CLC_u8GetPressedKey+0x7e>
    33a4:	90 cf       	rjmp	.-224    	; 0x32c6 <CLC_u8GetPressedKey+0x7a>

000033a6 <initialize>:
#include "../../HAL/LCD/LCD_interface.h"
#include "calculate.h"


 Stack * initialize()
 {
    33a6:	df 93       	push	r29
    33a8:	cf 93       	push	r28
    33aa:	00 d0       	rcall	.+0      	; 0x33ac <initialize+0x6>
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
    Stack* s=malloc(sizeof(Stack));
    33b0:	82 e5       	ldi	r24, 0x52	; 82
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	0e 94 63 22 	call	0x44c6	; 0x44c6 <malloc>
    33b8:	9a 83       	std	Y+2, r25	; 0x02
    33ba:	89 83       	std	Y+1, r24	; 0x01
    s->top=0;
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
    33be:	9a 81       	ldd	r25, Y+2	; 0x02
    33c0:	fc 01       	movw	r30, r24
    33c2:	e0 5b       	subi	r30, 0xB0	; 176
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	11 82       	std	Z+1, r1	; 0x01
    33c8:	10 82       	st	Z, r1
    return s;
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	9a 81       	ldd	r25, Y+2	; 0x02
 }
    33ce:	0f 90       	pop	r0
    33d0:	0f 90       	pop	r0
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	08 95       	ret

000033d8 <isEmpty>:

 int isEmpty(Stack *s)
 {
    33d8:	df 93       	push	r29
    33da:	cf 93       	push	r28
    33dc:	00 d0       	rcall	.+0      	; 0x33de <isEmpty+0x6>
    33de:	00 d0       	rcall	.+0      	; 0x33e0 <isEmpty+0x8>
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
    33e4:	9a 83       	std	Y+2, r25	; 0x02
    33e6:	89 83       	std	Y+1, r24	; 0x01
    if (s->top==0)
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	9a 81       	ldd	r25, Y+2	; 0x02
    33ec:	fc 01       	movw	r30, r24
    33ee:	e0 5b       	subi	r30, 0xB0	; 176
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	80 81       	ld	r24, Z
    33f4:	91 81       	ldd	r25, Z+1	; 0x01
    33f6:	00 97       	sbiw	r24, 0x00	; 0
    33f8:	29 f4       	brne	.+10     	; 0x3404 <isEmpty+0x2c>
        return 1;
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	9c 83       	std	Y+4, r25	; 0x04
    3400:	8b 83       	std	Y+3, r24	; 0x03
    3402:	02 c0       	rjmp	.+4      	; 0x3408 <isEmpty+0x30>
    else
        return 0;
    3404:	1c 82       	std	Y+4, r1	; 0x04
    3406:	1b 82       	std	Y+3, r1	; 0x03
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	9c 81       	ldd	r25, Y+4	; 0x04
 }
    340c:	0f 90       	pop	r0
    340e:	0f 90       	pop	r0
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	cf 91       	pop	r28
    3416:	df 91       	pop	r29
    3418:	08 95       	ret

0000341a <top>:
 Item top(Stack *s)
 {
    341a:	df 93       	push	r29
    341c:	cf 93       	push	r28
    341e:	00 d0       	rcall	.+0      	; 0x3420 <top+0x6>
    3420:	cd b7       	in	r28, 0x3d	; 61
    3422:	de b7       	in	r29, 0x3e	; 62
    3424:	9a 83       	std	Y+2, r25	; 0x02
    3426:	89 83       	std	Y+1, r24	; 0x01
    return s->items[s->top-1];
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	9a 81       	ldd	r25, Y+2	; 0x02
    342c:	fc 01       	movw	r30, r24
    342e:	e0 5b       	subi	r30, 0xB0	; 176
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	80 81       	ld	r24, Z
    3434:	91 81       	ldd	r25, Z+1	; 0x01
    3436:	01 97       	sbiw	r24, 0x01	; 1
    3438:	29 81       	ldd	r18, Y+1	; 0x01
    343a:	3a 81       	ldd	r19, Y+2	; 0x02
    343c:	88 0f       	add	r24, r24
    343e:	99 1f       	adc	r25, r25
    3440:	88 0f       	add	r24, r24
    3442:	99 1f       	adc	r25, r25
    3444:	f9 01       	movw	r30, r18
    3446:	e8 0f       	add	r30, r24
    3448:	f9 1f       	adc	r31, r25
    344a:	80 81       	ld	r24, Z
    344c:	91 81       	ldd	r25, Z+1	; 0x01
    344e:	a2 81       	ldd	r26, Z+2	; 0x02
    3450:	b3 81       	ldd	r27, Z+3	; 0x03

 }
    3452:	bc 01       	movw	r22, r24
    3454:	cd 01       	movw	r24, r26
    3456:	0f 90       	pop	r0
    3458:	0f 90       	pop	r0
    345a:	cf 91       	pop	r28
    345c:	df 91       	pop	r29
    345e:	08 95       	ret

00003460 <pop>:
 Item pop(Stack *s)
 {
    3460:	df 93       	push	r29
    3462:	cf 93       	push	r28
    3464:	00 d0       	rcall	.+0      	; 0x3466 <pop+0x6>
    3466:	00 d0       	rcall	.+0      	; 0x3468 <pop+0x8>
    3468:	00 d0       	rcall	.+0      	; 0x346a <pop+0xa>
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
    346e:	9e 83       	std	Y+6, r25	; 0x06
    3470:	8d 83       	std	Y+5, r24	; 0x05
    s->top--;
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	fc 01       	movw	r30, r24
    3478:	e0 5b       	subi	r30, 0xB0	; 176
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	80 81       	ld	r24, Z
    347e:	91 81       	ldd	r25, Z+1	; 0x01
    3480:	9c 01       	movw	r18, r24
    3482:	21 50       	subi	r18, 0x01	; 1
    3484:	30 40       	sbci	r19, 0x00	; 0
    3486:	8d 81       	ldd	r24, Y+5	; 0x05
    3488:	9e 81       	ldd	r25, Y+6	; 0x06
    348a:	fc 01       	movw	r30, r24
    348c:	e0 5b       	subi	r30, 0xB0	; 176
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	31 83       	std	Z+1, r19	; 0x01
    3492:	20 83       	st	Z, r18
    Item temp=s->items[s->top];
    3494:	8d 81       	ldd	r24, Y+5	; 0x05
    3496:	9e 81       	ldd	r25, Y+6	; 0x06
    3498:	fc 01       	movw	r30, r24
    349a:	e0 5b       	subi	r30, 0xB0	; 176
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	80 81       	ld	r24, Z
    34a0:	91 81       	ldd	r25, Z+1	; 0x01
    34a2:	2d 81       	ldd	r18, Y+5	; 0x05
    34a4:	3e 81       	ldd	r19, Y+6	; 0x06
    34a6:	88 0f       	add	r24, r24
    34a8:	99 1f       	adc	r25, r25
    34aa:	88 0f       	add	r24, r24
    34ac:	99 1f       	adc	r25, r25
    34ae:	f9 01       	movw	r30, r18
    34b0:	e8 0f       	add	r30, r24
    34b2:	f9 1f       	adc	r31, r25
    34b4:	80 81       	ld	r24, Z
    34b6:	91 81       	ldd	r25, Z+1	; 0x01
    34b8:	a2 81       	ldd	r26, Z+2	; 0x02
    34ba:	b3 81       	ldd	r27, Z+3	; 0x03
    34bc:	89 83       	std	Y+1, r24	; 0x01
    34be:	9a 83       	std	Y+2, r25	; 0x02
    34c0:	ab 83       	std	Y+3, r26	; 0x03
    34c2:	bc 83       	std	Y+4, r27	; 0x04
    return temp;
    34c4:	89 81       	ldd	r24, Y+1	; 0x01
    34c6:	9a 81       	ldd	r25, Y+2	; 0x02
    34c8:	ab 81       	ldd	r26, Y+3	; 0x03
    34ca:	bc 81       	ldd	r27, Y+4	; 0x04
 }
    34cc:	bc 01       	movw	r22, r24
    34ce:	cd 01       	movw	r24, r26
    34d0:	26 96       	adiw	r28, 0x06	; 6
    34d2:	0f b6       	in	r0, 0x3f	; 63
    34d4:	f8 94       	cli
    34d6:	de bf       	out	0x3e, r29	; 62
    34d8:	0f be       	out	0x3f, r0	; 63
    34da:	cd bf       	out	0x3d, r28	; 61
    34dc:	cf 91       	pop	r28
    34de:	df 91       	pop	r29
    34e0:	08 95       	ret

000034e2 <push>:
 void push(Stack *s, Item val)
 {
    34e2:	df 93       	push	r29
    34e4:	cf 93       	push	r28
    34e6:	00 d0       	rcall	.+0      	; 0x34e8 <push+0x6>
    34e8:	00 d0       	rcall	.+0      	; 0x34ea <push+0x8>
    34ea:	00 d0       	rcall	.+0      	; 0x34ec <push+0xa>
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
    34f0:	9a 83       	std	Y+2, r25	; 0x02
    34f2:	89 83       	std	Y+1, r24	; 0x01
    34f4:	4b 83       	std	Y+3, r20	; 0x03
    34f6:	5c 83       	std	Y+4, r21	; 0x04
    34f8:	6d 83       	std	Y+5, r22	; 0x05
    34fa:	7e 83       	std	Y+6, r23	; 0x06
    s->items[s->top]=val;
    34fc:	89 81       	ldd	r24, Y+1	; 0x01
    34fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3500:	fc 01       	movw	r30, r24
    3502:	e0 5b       	subi	r30, 0xB0	; 176
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	80 81       	ld	r24, Z
    3508:	91 81       	ldd	r25, Z+1	; 0x01
    350a:	29 81       	ldd	r18, Y+1	; 0x01
    350c:	3a 81       	ldd	r19, Y+2	; 0x02
    350e:	88 0f       	add	r24, r24
    3510:	99 1f       	adc	r25, r25
    3512:	88 0f       	add	r24, r24
    3514:	99 1f       	adc	r25, r25
    3516:	f9 01       	movw	r30, r18
    3518:	e8 0f       	add	r30, r24
    351a:	f9 1f       	adc	r31, r25
    351c:	8b 81       	ldd	r24, Y+3	; 0x03
    351e:	9c 81       	ldd	r25, Y+4	; 0x04
    3520:	ad 81       	ldd	r26, Y+5	; 0x05
    3522:	be 81       	ldd	r27, Y+6	; 0x06
    3524:	80 83       	st	Z, r24
    3526:	91 83       	std	Z+1, r25	; 0x01
    3528:	a2 83       	std	Z+2, r26	; 0x02
    352a:	b3 83       	std	Z+3, r27	; 0x03
    s->top++;
    352c:	89 81       	ldd	r24, Y+1	; 0x01
    352e:	9a 81       	ldd	r25, Y+2	; 0x02
    3530:	fc 01       	movw	r30, r24
    3532:	e0 5b       	subi	r30, 0xB0	; 176
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	80 81       	ld	r24, Z
    3538:	91 81       	ldd	r25, Z+1	; 0x01
    353a:	9c 01       	movw	r18, r24
    353c:	2f 5f       	subi	r18, 0xFF	; 255
    353e:	3f 4f       	sbci	r19, 0xFF	; 255
    3540:	89 81       	ldd	r24, Y+1	; 0x01
    3542:	9a 81       	ldd	r25, Y+2	; 0x02
    3544:	fc 01       	movw	r30, r24
    3546:	e0 5b       	subi	r30, 0xB0	; 176
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	31 83       	std	Z+1, r19	; 0x01
    354c:	20 83       	st	Z, r18
 }
    354e:	26 96       	adiw	r28, 0x06	; 6
    3550:	0f b6       	in	r0, 0x3f	; 63
    3552:	f8 94       	cli
    3554:	de bf       	out	0x3e, r29	; 62
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	cf 91       	pop	r28
    355c:	df 91       	pop	r29
    355e:	08 95       	ret

00003560 <first>:

 int first(char c)
 {
    3560:	df 93       	push	r29
    3562:	cf 93       	push	r28
    3564:	00 d0       	rcall	.+0      	; 0x3566 <first+0x6>
    3566:	0f 92       	push	r0
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
    356c:	89 83       	std	Y+1, r24	; 0x01

	 if (c=='*' ||c=='/' || c=='%' )
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	8a 32       	cpi	r24, 0x2A	; 42
    3572:	31 f0       	breq	.+12     	; 0x3580 <first+0x20>
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	8f 32       	cpi	r24, 0x2F	; 47
    3578:	19 f0       	breq	.+6      	; 0x3580 <first+0x20>
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	85 32       	cpi	r24, 0x25	; 37
    357e:	29 f4       	brne	.+10     	; 0x358a <first+0x2a>
	    {
	        return 1;
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	9b 83       	std	Y+3, r25	; 0x03
    3586:	8a 83       	std	Y+2, r24	; 0x02
    3588:	15 c0       	rjmp	.+42     	; 0x35b4 <first+0x54>
	    }
	    else if (c=='+' ||c=='-'  )
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	8b 32       	cpi	r24, 0x2B	; 43
    358e:	19 f0       	breq	.+6      	; 0x3596 <first+0x36>
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	8d 32       	cpi	r24, 0x2D	; 45
    3594:	19 f4       	brne	.+6      	; 0x359c <first+0x3c>
	    {
	        return 0;
    3596:	1b 82       	std	Y+3, r1	; 0x03
    3598:	1a 82       	std	Y+2, r1	; 0x02
    359a:	0c c0       	rjmp	.+24     	; 0x35b4 <first+0x54>
	    }
	    else if (c=='^')
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	8e 35       	cpi	r24, 0x5E	; 94
    35a0:	29 f4       	brne	.+10     	; 0x35ac <first+0x4c>
	        return 2;
    35a2:	82 e0       	ldi	r24, 0x02	; 2
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	9b 83       	std	Y+3, r25	; 0x03
    35a8:	8a 83       	std	Y+2, r24	; 0x02
    35aa:	04 c0       	rjmp	.+8      	; 0x35b4 <first+0x54>
	    else
	        return 3;
    35ac:	83 e0       	ldi	r24, 0x03	; 3
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	9b 83       	std	Y+3, r25	; 0x03
    35b2:	8a 83       	std	Y+2, r24	; 0x02
    35b4:	8a 81       	ldd	r24, Y+2	; 0x02
    35b6:	9b 81       	ldd	r25, Y+3	; 0x03
 }
    35b8:	0f 90       	pop	r0
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	cf 91       	pop	r28
    35c0:	df 91       	pop	r29
    35c2:	08 95       	ret

000035c4 <infixToPostfix>:

 void infixToPostfix(char* infix, char *postfix)
 {
    35c4:	0f 93       	push	r16
    35c6:	1f 93       	push	r17
    35c8:	df 93       	push	r29
    35ca:	cf 93       	push	r28
    35cc:	cd b7       	in	r28, 0x3d	; 61
    35ce:	de b7       	in	r29, 0x3e	; 62
    35d0:	2c 97       	sbiw	r28, 0x0c	; 12
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	de bf       	out	0x3e, r29	; 62
    35d8:	0f be       	out	0x3f, r0	; 63
    35da:	cd bf       	out	0x3d, r28	; 61
    35dc:	9a 87       	std	Y+10, r25	; 0x0a
    35de:	89 87       	std	Y+9, r24	; 0x09
    35e0:	7c 87       	std	Y+12, r23	; 0x0c
    35e2:	6b 87       	std	Y+11, r22	; 0x0b
	 Stack *s1= initialize();
    35e4:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <initialize>
    35e8:	9c 83       	std	Y+4, r25	; 0x04
    35ea:	8b 83       	std	Y+3, r24	; 0x03
	     Item x;
	     char*tok=strtok(infix," ");
    35ec:	89 85       	ldd	r24, Y+9	; 0x09
    35ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f0:	20 e6       	ldi	r18, 0x60	; 96
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	b9 01       	movw	r22, r18
    35f6:	0e 94 86 23 	call	0x470c	; 0x470c <strtok>
    35fa:	9a 83       	std	Y+2, r25	; 0x02
    35fc:	89 83       	std	Y+1, r24	; 0x01
    35fe:	27 c1       	rjmp	.+590    	; 0x384e <infixToPostfix+0x28a>
	     while(tok!=NULL)
	     {
	         if (isdigit(*tok) ||(*tok=='-'&&strlen(tok)>1))
    3600:	e9 81       	ldd	r30, Y+1	; 0x01
    3602:	fa 81       	ldd	r31, Y+2	; 0x02
    3604:	80 81       	ld	r24, Z
    3606:	88 2f       	mov	r24, r24
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	c0 97       	sbiw	r24, 0x30	; 48
    360c:	8a 30       	cpi	r24, 0x0A	; 10
    360e:	91 05       	cpc	r25, r1
    3610:	60 f0       	brcs	.+24     	; 0x362a <infixToPostfix+0x66>
    3612:	e9 81       	ldd	r30, Y+1	; 0x01
    3614:	fa 81       	ldd	r31, Y+2	; 0x02
    3616:	80 81       	ld	r24, Z
    3618:	8d 32       	cpi	r24, 0x2D	; 45
    361a:	21 f5       	brne	.+72     	; 0x3664 <infixToPostfix+0xa0>
    361c:	89 81       	ldd	r24, Y+1	; 0x01
    361e:	9a 81       	ldd	r25, Y+2	; 0x02
    3620:	0e 94 9f 23 	call	0x473e	; 0x473e <strlen>
    3624:	82 30       	cpi	r24, 0x02	; 2
    3626:	91 05       	cpc	r25, r1
    3628:	e8 f0       	brcs	.+58     	; 0x3664 <infixToPostfix+0xa0>
	         {
	             strncat(postfix, tok, strlen(tok));
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	9a 81       	ldd	r25, Y+2	; 0x02
    362e:	0e 94 9f 23 	call	0x473e	; 0x473e <strlen>
    3632:	ac 01       	movw	r20, r24
    3634:	8b 85       	ldd	r24, Y+11	; 0x0b
    3636:	9c 85       	ldd	r25, Y+12	; 0x0c
    3638:	29 81       	ldd	r18, Y+1	; 0x01
    363a:	3a 81       	ldd	r19, Y+2	; 0x02
    363c:	b9 01       	movw	r22, r18
    363e:	0e 94 a8 23 	call	0x4750	; 0x4750 <strncat>
	             strncat(postfix, " ", 2);
    3642:	8b 85       	ldd	r24, Y+11	; 0x0b
    3644:	9c 85       	ldd	r25, Y+12	; 0x0c
    3646:	0e 94 9f 23 	call	0x473e	; 0x473e <strlen>
    364a:	9c 01       	movw	r18, r24
    364c:	8b 85       	ldd	r24, Y+11	; 0x0b
    364e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3650:	82 0f       	add	r24, r18
    3652:	93 1f       	adc	r25, r19
    3654:	20 e6       	ldi	r18, 0x60	; 96
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	b9 01       	movw	r22, r18
    365a:	42 e0       	ldi	r20, 0x02	; 2
    365c:	50 e0       	ldi	r21, 0x00	; 0
    365e:	0e 94 8b 23 	call	0x4716	; 0x4716 <memcpy>
    3662:	ec c0       	rjmp	.+472    	; 0x383c <infixToPostfix+0x278>
	         }
	         else if(*tok==')')
    3664:	e9 81       	ldd	r30, Y+1	; 0x01
    3666:	fa 81       	ldd	r31, Y+2	; 0x02
    3668:	80 81       	ld	r24, Z
    366a:	89 32       	cpi	r24, 0x29	; 41
    366c:	c1 f5       	brne	.+112    	; 0x36de <infixToPostfix+0x11a>
    366e:	24 c0       	rjmp	.+72     	; 0x36b8 <infixToPostfix+0xf4>
	         {
	             while(!isEmpty(s1)&&top(s1).cData!='(')
	             {
	                 x=pop(s1);
    3670:	8b 81       	ldd	r24, Y+3	; 0x03
    3672:	9c 81       	ldd	r25, Y+4	; 0x04
    3674:	0e 94 30 1a 	call	0x3460	; 0x3460 <pop>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	8d 83       	std	Y+5, r24	; 0x05
    367e:	9e 83       	std	Y+6, r25	; 0x06
    3680:	af 83       	std	Y+7, r26	; 0x07
    3682:	b8 87       	std	Y+8, r27	; 0x08
	                 strncat(postfix, &x.cData, 1);
    3684:	8b 85       	ldd	r24, Y+11	; 0x0b
    3686:	9c 85       	ldd	r25, Y+12	; 0x0c
    3688:	9e 01       	movw	r18, r28
    368a:	2b 5f       	subi	r18, 0xFB	; 251
    368c:	3f 4f       	sbci	r19, 0xFF	; 255
    368e:	b9 01       	movw	r22, r18
    3690:	41 e0       	ldi	r20, 0x01	; 1
    3692:	50 e0       	ldi	r21, 0x00	; 0
    3694:	0e 94 a8 23 	call	0x4750	; 0x4750 <strncat>
	                 strncat(postfix, " ", 2);
    3698:	8b 85       	ldd	r24, Y+11	; 0x0b
    369a:	9c 85       	ldd	r25, Y+12	; 0x0c
    369c:	0e 94 9f 23 	call	0x473e	; 0x473e <strlen>
    36a0:	9c 01       	movw	r18, r24
    36a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    36a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    36a6:	82 0f       	add	r24, r18
    36a8:	93 1f       	adc	r25, r19
    36aa:	20 e6       	ldi	r18, 0x60	; 96
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	b9 01       	movw	r22, r18
    36b0:	42 e0       	ldi	r20, 0x02	; 2
    36b2:	50 e0       	ldi	r21, 0x00	; 0
    36b4:	0e 94 8b 23 	call	0x4716	; 0x4716 <memcpy>
	             strncat(postfix, tok, strlen(tok));
	             strncat(postfix, " ", 2);
	         }
	         else if(*tok==')')
	         {
	             while(!isEmpty(s1)&&top(s1).cData!='(')
    36b8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ba:	9c 81       	ldd	r25, Y+4	; 0x04
    36bc:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <isEmpty>
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	41 f4       	brne	.+16     	; 0x36d4 <infixToPostfix+0x110>
    36c4:	8b 81       	ldd	r24, Y+3	; 0x03
    36c6:	9c 81       	ldd	r25, Y+4	; 0x04
    36c8:	0e 94 0d 1a 	call	0x341a	; 0x341a <top>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	88 32       	cpi	r24, 0x28	; 40
    36d2:	71 f6       	brne	.-100    	; 0x3670 <infixToPostfix+0xac>
	             {
	                 x=pop(s1);
	                 strncat(postfix, &x.cData, 1);
	                 strncat(postfix, " ", 2);
	             }
	             pop(s1);
    36d4:	8b 81       	ldd	r24, Y+3	; 0x03
    36d6:	9c 81       	ldd	r25, Y+4	; 0x04
    36d8:	0e 94 30 1a 	call	0x3460	; 0x3460 <pop>
    36dc:	af c0       	rjmp	.+350    	; 0x383c <infixToPostfix+0x278>
	         }
	         else if(isEmpty(s1))
    36de:	8b 81       	ldd	r24, Y+3	; 0x03
    36e0:	9c 81       	ldd	r25, Y+4	; 0x04
    36e2:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <isEmpty>
    36e6:	00 97       	sbiw	r24, 0x00	; 0
    36e8:	79 f0       	breq	.+30     	; 0x3708 <infixToPostfix+0x144>
	         {
	             x.cData=tok[0];
    36ea:	e9 81       	ldd	r30, Y+1	; 0x01
    36ec:	fa 81       	ldd	r31, Y+2	; 0x02
    36ee:	80 81       	ld	r24, Z
    36f0:	8d 83       	std	Y+5, r24	; 0x05
	             push(s1,x);
    36f2:	8b 81       	ldd	r24, Y+3	; 0x03
    36f4:	9c 81       	ldd	r25, Y+4	; 0x04
    36f6:	2d 81       	ldd	r18, Y+5	; 0x05
    36f8:	3e 81       	ldd	r19, Y+6	; 0x06
    36fa:	4f 81       	ldd	r20, Y+7	; 0x07
    36fc:	58 85       	ldd	r21, Y+8	; 0x08
    36fe:	ba 01       	movw	r22, r20
    3700:	a9 01       	movw	r20, r18
    3702:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <push>
    3706:	9a c0       	rjmp	.+308    	; 0x383c <infixToPostfix+0x278>
	         }

	         else if (!isEmpty(s1)&&(first(top(s1).cData)<first(*tok)||top(s1).cData=='('))
    3708:	8b 81       	ldd	r24, Y+3	; 0x03
    370a:	9c 81       	ldd	r25, Y+4	; 0x04
    370c:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <isEmpty>
    3710:	00 97       	sbiw	r24, 0x00	; 0
    3712:	41 f5       	brne	.+80     	; 0x3764 <infixToPostfix+0x1a0>
    3714:	8b 81       	ldd	r24, Y+3	; 0x03
    3716:	9c 81       	ldd	r25, Y+4	; 0x04
    3718:	0e 94 0d 1a 	call	0x341a	; 0x341a <top>
    371c:	dc 01       	movw	r26, r24
    371e:	cb 01       	movw	r24, r22
    3720:	0e 94 b0 1a 	call	0x3560	; 0x3560 <first>
    3724:	8c 01       	movw	r16, r24
    3726:	e9 81       	ldd	r30, Y+1	; 0x01
    3728:	fa 81       	ldd	r31, Y+2	; 0x02
    372a:	80 81       	ld	r24, Z
    372c:	0e 94 b0 1a 	call	0x3560	; 0x3560 <first>
    3730:	08 17       	cp	r16, r24
    3732:	19 07       	cpc	r17, r25
    3734:	44 f0       	brlt	.+16     	; 0x3746 <infixToPostfix+0x182>
    3736:	8b 81       	ldd	r24, Y+3	; 0x03
    3738:	9c 81       	ldd	r25, Y+4	; 0x04
    373a:	0e 94 0d 1a 	call	0x341a	; 0x341a <top>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	88 32       	cpi	r24, 0x28	; 40
    3744:	79 f4       	brne	.+30     	; 0x3764 <infixToPostfix+0x1a0>
	         {
	             x.cData=tok[0];
    3746:	e9 81       	ldd	r30, Y+1	; 0x01
    3748:	fa 81       	ldd	r31, Y+2	; 0x02
    374a:	80 81       	ld	r24, Z
    374c:	8d 83       	std	Y+5, r24	; 0x05
	             push(s1,x);
    374e:	8b 81       	ldd	r24, Y+3	; 0x03
    3750:	9c 81       	ldd	r25, Y+4	; 0x04
    3752:	2d 81       	ldd	r18, Y+5	; 0x05
    3754:	3e 81       	ldd	r19, Y+6	; 0x06
    3756:	4f 81       	ldd	r20, Y+7	; 0x07
    3758:	58 85       	ldd	r21, Y+8	; 0x08
    375a:	ba 01       	movw	r22, r20
    375c:	a9 01       	movw	r20, r18
    375e:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <push>
    3762:	6c c0       	rjmp	.+216    	; 0x383c <infixToPostfix+0x278>
	         }
	         else if (!isEmpty(s1)&&first(top(s1).cData)>=first(*tok)&&top(s1).cData!='(')
    3764:	8b 81       	ldd	r24, Y+3	; 0x03
    3766:	9c 81       	ldd	r25, Y+4	; 0x04
    3768:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <isEmpty>
    376c:	00 97       	sbiw	r24, 0x00	; 0
    376e:	09 f0       	breq	.+2      	; 0x3772 <infixToPostfix+0x1ae>
    3770:	65 c0       	rjmp	.+202    	; 0x383c <infixToPostfix+0x278>
    3772:	8b 81       	ldd	r24, Y+3	; 0x03
    3774:	9c 81       	ldd	r25, Y+4	; 0x04
    3776:	0e 94 0d 1a 	call	0x341a	; 0x341a <top>
    377a:	dc 01       	movw	r26, r24
    377c:	cb 01       	movw	r24, r22
    377e:	0e 94 b0 1a 	call	0x3560	; 0x3560 <first>
    3782:	8c 01       	movw	r16, r24
    3784:	e9 81       	ldd	r30, Y+1	; 0x01
    3786:	fa 81       	ldd	r31, Y+2	; 0x02
    3788:	80 81       	ld	r24, Z
    378a:	0e 94 b0 1a 	call	0x3560	; 0x3560 <first>
    378e:	08 17       	cp	r16, r24
    3790:	19 07       	cpc	r17, r25
    3792:	0c f4       	brge	.+2      	; 0x3796 <infixToPostfix+0x1d2>
    3794:	53 c0       	rjmp	.+166    	; 0x383c <infixToPostfix+0x278>
    3796:	8b 81       	ldd	r24, Y+3	; 0x03
    3798:	9c 81       	ldd	r25, Y+4	; 0x04
    379a:	0e 94 0d 1a 	call	0x341a	; 0x341a <top>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	88 32       	cpi	r24, 0x28	; 40
    37a4:	09 f4       	brne	.+2      	; 0x37a8 <infixToPostfix+0x1e4>
    37a6:	4a c0       	rjmp	.+148    	; 0x383c <infixToPostfix+0x278>
    37a8:	24 c0       	rjmp	.+72     	; 0x37f2 <infixToPostfix+0x22e>
	         {
	             while(!isEmpty(s1)&&first(top(s1).cData)>=first(*tok))
	             {
	                 x=pop(s1);
    37aa:	8b 81       	ldd	r24, Y+3	; 0x03
    37ac:	9c 81       	ldd	r25, Y+4	; 0x04
    37ae:	0e 94 30 1a 	call	0x3460	; 0x3460 <pop>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	8d 83       	std	Y+5, r24	; 0x05
    37b8:	9e 83       	std	Y+6, r25	; 0x06
    37ba:	af 83       	std	Y+7, r26	; 0x07
    37bc:	b8 87       	std	Y+8, r27	; 0x08
	                 strncat(postfix, &x.cData, 1);
    37be:	8b 85       	ldd	r24, Y+11	; 0x0b
    37c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    37c2:	9e 01       	movw	r18, r28
    37c4:	2b 5f       	subi	r18, 0xFB	; 251
    37c6:	3f 4f       	sbci	r19, 0xFF	; 255
    37c8:	b9 01       	movw	r22, r18
    37ca:	41 e0       	ldi	r20, 0x01	; 1
    37cc:	50 e0       	ldi	r21, 0x00	; 0
    37ce:	0e 94 a8 23 	call	0x4750	; 0x4750 <strncat>
	                 strncat(postfix, " ", 2);
    37d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    37d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    37d6:	0e 94 9f 23 	call	0x473e	; 0x473e <strlen>
    37da:	9c 01       	movw	r18, r24
    37dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    37de:	9c 85       	ldd	r25, Y+12	; 0x0c
    37e0:	82 0f       	add	r24, r18
    37e2:	93 1f       	adc	r25, r19
    37e4:	20 e6       	ldi	r18, 0x60	; 96
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	b9 01       	movw	r22, r18
    37ea:	42 e0       	ldi	r20, 0x02	; 2
    37ec:	50 e0       	ldi	r21, 0x00	; 0
    37ee:	0e 94 8b 23 	call	0x4716	; 0x4716 <memcpy>
	             x.cData=tok[0];
	             push(s1,x);
	         }
	         else if (!isEmpty(s1)&&first(top(s1).cData)>=first(*tok)&&top(s1).cData!='(')
	         {
	             while(!isEmpty(s1)&&first(top(s1).cData)>=first(*tok))
    37f2:	8b 81       	ldd	r24, Y+3	; 0x03
    37f4:	9c 81       	ldd	r25, Y+4	; 0x04
    37f6:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <isEmpty>
    37fa:	00 97       	sbiw	r24, 0x00	; 0
    37fc:	89 f4       	brne	.+34     	; 0x3820 <infixToPostfix+0x25c>
    37fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3800:	9c 81       	ldd	r25, Y+4	; 0x04
    3802:	0e 94 0d 1a 	call	0x341a	; 0x341a <top>
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	0e 94 b0 1a 	call	0x3560	; 0x3560 <first>
    380e:	8c 01       	movw	r16, r24
    3810:	e9 81       	ldd	r30, Y+1	; 0x01
    3812:	fa 81       	ldd	r31, Y+2	; 0x02
    3814:	80 81       	ld	r24, Z
    3816:	0e 94 b0 1a 	call	0x3560	; 0x3560 <first>
    381a:	08 17       	cp	r16, r24
    381c:	19 07       	cpc	r17, r25
    381e:	2c f6       	brge	.-118    	; 0x37aa <infixToPostfix+0x1e6>
	             {
	                 x=pop(s1);
	                 strncat(postfix, &x.cData, 1);
	                 strncat(postfix, " ", 2);
	             }
	             x.cData=tok[0];
    3820:	e9 81       	ldd	r30, Y+1	; 0x01
    3822:	fa 81       	ldd	r31, Y+2	; 0x02
    3824:	80 81       	ld	r24, Z
    3826:	8d 83       	std	Y+5, r24	; 0x05
	             push(s1,x);
    3828:	8b 81       	ldd	r24, Y+3	; 0x03
    382a:	9c 81       	ldd	r25, Y+4	; 0x04
    382c:	2d 81       	ldd	r18, Y+5	; 0x05
    382e:	3e 81       	ldd	r19, Y+6	; 0x06
    3830:	4f 81       	ldd	r20, Y+7	; 0x07
    3832:	58 85       	ldd	r21, Y+8	; 0x08
    3834:	ba 01       	movw	r22, r20
    3836:	a9 01       	movw	r20, r18
    3838:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <push>
	         }
	         tok=strtok(NULL," ");
    383c:	20 e6       	ldi	r18, 0x60	; 96
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	80 e0       	ldi	r24, 0x00	; 0
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	b9 01       	movw	r22, r18
    3846:	0e 94 86 23 	call	0x470c	; 0x470c <strtok>
    384a:	9a 83       	std	Y+2, r25	; 0x02
    384c:	89 83       	std	Y+1, r24	; 0x01
 void infixToPostfix(char* infix, char *postfix)
 {
	 Stack *s1= initialize();
	     Item x;
	     char*tok=strtok(infix," ");
	     while(tok!=NULL)
    384e:	89 81       	ldd	r24, Y+1	; 0x01
    3850:	9a 81       	ldd	r25, Y+2	; 0x02
    3852:	00 97       	sbiw	r24, 0x00	; 0
    3854:	09 f0       	breq	.+2      	; 0x3858 <infixToPostfix+0x294>
    3856:	d4 ce       	rjmp	.-600    	; 0x3600 <infixToPostfix+0x3c>
    3858:	24 c0       	rjmp	.+72     	; 0x38a2 <infixToPostfix+0x2de>


	     }
	     while(!isEmpty(s1))
	     {
	         x=pop(s1);
    385a:	8b 81       	ldd	r24, Y+3	; 0x03
    385c:	9c 81       	ldd	r25, Y+4	; 0x04
    385e:	0e 94 30 1a 	call	0x3460	; 0x3460 <pop>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	8d 83       	std	Y+5, r24	; 0x05
    3868:	9e 83       	std	Y+6, r25	; 0x06
    386a:	af 83       	std	Y+7, r26	; 0x07
    386c:	b8 87       	std	Y+8, r27	; 0x08
	         strncat(postfix,&x.cData, 1);
    386e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3870:	9c 85       	ldd	r25, Y+12	; 0x0c
    3872:	9e 01       	movw	r18, r28
    3874:	2b 5f       	subi	r18, 0xFB	; 251
    3876:	3f 4f       	sbci	r19, 0xFF	; 255
    3878:	b9 01       	movw	r22, r18
    387a:	41 e0       	ldi	r20, 0x01	; 1
    387c:	50 e0       	ldi	r21, 0x00	; 0
    387e:	0e 94 a8 23 	call	0x4750	; 0x4750 <strncat>
	         strncat(postfix, " ", 2);
    3882:	8b 85       	ldd	r24, Y+11	; 0x0b
    3884:	9c 85       	ldd	r25, Y+12	; 0x0c
    3886:	0e 94 9f 23 	call	0x473e	; 0x473e <strlen>
    388a:	9c 01       	movw	r18, r24
    388c:	8b 85       	ldd	r24, Y+11	; 0x0b
    388e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3890:	82 0f       	add	r24, r18
    3892:	93 1f       	adc	r25, r19
    3894:	20 e6       	ldi	r18, 0x60	; 96
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	b9 01       	movw	r22, r18
    389a:	42 e0       	ldi	r20, 0x02	; 2
    389c:	50 e0       	ldi	r21, 0x00	; 0
    389e:	0e 94 8b 23 	call	0x4716	; 0x4716 <memcpy>
	         }
	         tok=strtok(NULL," ");


	     }
	     while(!isEmpty(s1))
    38a2:	8b 81       	ldd	r24, Y+3	; 0x03
    38a4:	9c 81       	ldd	r25, Y+4	; 0x04
    38a6:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <isEmpty>
    38aa:	00 97       	sbiw	r24, 0x00	; 0
    38ac:	b1 f2       	breq	.-84     	; 0x385a <infixToPostfix+0x296>
	         x=pop(s1);
	         strncat(postfix,&x.cData, 1);
	         strncat(postfix, " ", 2);
	     }

 }
    38ae:	2c 96       	adiw	r28, 0x0c	; 12
    38b0:	0f b6       	in	r0, 0x3f	; 63
    38b2:	f8 94       	cli
    38b4:	de bf       	out	0x3e, r29	; 62
    38b6:	0f be       	out	0x3f, r0	; 63
    38b8:	cd bf       	out	0x3d, r28	; 61
    38ba:	cf 91       	pop	r28
    38bc:	df 91       	pop	r29
    38be:	1f 91       	pop	r17
    38c0:	0f 91       	pop	r16
    38c2:	08 95       	ret

000038c4 <eval>:




 float  eval(char tok[],float op1,float op2)
 {
    38c4:	0f 93       	push	r16
    38c6:	1f 93       	push	r17
    38c8:	df 93       	push	r29
    38ca:	cf 93       	push	r28
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    38d0:	2e 97       	sbiw	r28, 0x0e	; 14
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
    38dc:	9e 83       	std	Y+6, r25	; 0x06
    38de:	8d 83       	std	Y+5, r24	; 0x05
    38e0:	4f 83       	std	Y+7, r20	; 0x07
    38e2:	58 87       	std	Y+8, r21	; 0x08
    38e4:	69 87       	std	Y+9, r22	; 0x09
    38e6:	7a 87       	std	Y+10, r23	; 0x0a
    38e8:	0b 87       	std	Y+11, r16	; 0x0b
    38ea:	1c 87       	std	Y+12, r17	; 0x0c
    38ec:	2d 87       	std	Y+13, r18	; 0x0d
    38ee:	3e 87       	std	Y+14, r19	; 0x0e
	 float a;
	     if (strchr(tok,'*')!=NULL)
    38f0:	8d 81       	ldd	r24, Y+5	; 0x05
    38f2:	9e 81       	ldd	r25, Y+6	; 0x06
    38f4:	6a e2       	ldi	r22, 0x2A	; 42
    38f6:	70 e0       	ldi	r23, 0x00	; 0
    38f8:	0e 94 94 23 	call	0x4728	; 0x4728 <strchr>
    38fc:	00 97       	sbiw	r24, 0x00	; 0
    38fe:	89 f0       	breq	.+34     	; 0x3922 <eval+0x5e>
	     {
	         a=op2*op1;
    3900:	6b 85       	ldd	r22, Y+11	; 0x0b
    3902:	7c 85       	ldd	r23, Y+12	; 0x0c
    3904:	8d 85       	ldd	r24, Y+13	; 0x0d
    3906:	9e 85       	ldd	r25, Y+14	; 0x0e
    3908:	2f 81       	ldd	r18, Y+7	; 0x07
    390a:	38 85       	ldd	r19, Y+8	; 0x08
    390c:	49 85       	ldd	r20, Y+9	; 0x09
    390e:	5a 85       	ldd	r21, Y+10	; 0x0a
    3910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	89 83       	std	Y+1, r24	; 0x01
    391a:	9a 83       	std	Y+2, r25	; 0x02
    391c:	ab 83       	std	Y+3, r26	; 0x03
    391e:	bc 83       	std	Y+4, r27	; 0x04
    3920:	4a c0       	rjmp	.+148    	; 0x39b6 <eval+0xf2>

	     }
	     else if (strchr(tok,'+')!=NULL)
    3922:	8d 81       	ldd	r24, Y+5	; 0x05
    3924:	9e 81       	ldd	r25, Y+6	; 0x06
    3926:	6b e2       	ldi	r22, 0x2B	; 43
    3928:	70 e0       	ldi	r23, 0x00	; 0
    392a:	0e 94 94 23 	call	0x4728	; 0x4728 <strchr>
    392e:	00 97       	sbiw	r24, 0x00	; 0
    3930:	89 f0       	breq	.+34     	; 0x3954 <eval+0x90>
	     {
	         a=op2+op1;
    3932:	6b 85       	ldd	r22, Y+11	; 0x0b
    3934:	7c 85       	ldd	r23, Y+12	; 0x0c
    3936:	8d 85       	ldd	r24, Y+13	; 0x0d
    3938:	9e 85       	ldd	r25, Y+14	; 0x0e
    393a:	2f 81       	ldd	r18, Y+7	; 0x07
    393c:	38 85       	ldd	r19, Y+8	; 0x08
    393e:	49 85       	ldd	r20, Y+9	; 0x09
    3940:	5a 85       	ldd	r21, Y+10	; 0x0a
    3942:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	89 83       	std	Y+1, r24	; 0x01
    394c:	9a 83       	std	Y+2, r25	; 0x02
    394e:	ab 83       	std	Y+3, r26	; 0x03
    3950:	bc 83       	std	Y+4, r27	; 0x04
    3952:	31 c0       	rjmp	.+98     	; 0x39b6 <eval+0xf2>
	     }
	     else if (strchr(tok,'-')!=NULL)
    3954:	8d 81       	ldd	r24, Y+5	; 0x05
    3956:	9e 81       	ldd	r25, Y+6	; 0x06
    3958:	6d e2       	ldi	r22, 0x2D	; 45
    395a:	70 e0       	ldi	r23, 0x00	; 0
    395c:	0e 94 94 23 	call	0x4728	; 0x4728 <strchr>
    3960:	00 97       	sbiw	r24, 0x00	; 0
    3962:	89 f0       	breq	.+34     	; 0x3986 <eval+0xc2>
	     {
	         a=op2-op1;
    3964:	6b 85       	ldd	r22, Y+11	; 0x0b
    3966:	7c 85       	ldd	r23, Y+12	; 0x0c
    3968:	8d 85       	ldd	r24, Y+13	; 0x0d
    396a:	9e 85       	ldd	r25, Y+14	; 0x0e
    396c:	2f 81       	ldd	r18, Y+7	; 0x07
    396e:	38 85       	ldd	r19, Y+8	; 0x08
    3970:	49 85       	ldd	r20, Y+9	; 0x09
    3972:	5a 85       	ldd	r21, Y+10	; 0x0a
    3974:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	89 83       	std	Y+1, r24	; 0x01
    397e:	9a 83       	std	Y+2, r25	; 0x02
    3980:	ab 83       	std	Y+3, r26	; 0x03
    3982:	bc 83       	std	Y+4, r27	; 0x04
    3984:	18 c0       	rjmp	.+48     	; 0x39b6 <eval+0xf2>
	     }
	     else if (strchr(tok,'/')!=NULL)
    3986:	8d 81       	ldd	r24, Y+5	; 0x05
    3988:	9e 81       	ldd	r25, Y+6	; 0x06
    398a:	6f e2       	ldi	r22, 0x2F	; 47
    398c:	70 e0       	ldi	r23, 0x00	; 0
    398e:	0e 94 94 23 	call	0x4728	; 0x4728 <strchr>
    3992:	00 97       	sbiw	r24, 0x00	; 0
    3994:	81 f0       	breq	.+32     	; 0x39b6 <eval+0xf2>
	     {
	         a=op2/op1;
    3996:	6b 85       	ldd	r22, Y+11	; 0x0b
    3998:	7c 85       	ldd	r23, Y+12	; 0x0c
    399a:	8d 85       	ldd	r24, Y+13	; 0x0d
    399c:	9e 85       	ldd	r25, Y+14	; 0x0e
    399e:	2f 81       	ldd	r18, Y+7	; 0x07
    39a0:	38 85       	ldd	r19, Y+8	; 0x08
    39a2:	49 85       	ldd	r20, Y+9	; 0x09
    39a4:	5a 85       	ldd	r21, Y+10	; 0x0a
    39a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	89 83       	std	Y+1, r24	; 0x01
    39b0:	9a 83       	std	Y+2, r25	; 0x02
    39b2:	ab 83       	std	Y+3, r26	; 0x03
    39b4:	bc 83       	std	Y+4, r27	; 0x04
	     }

	     return a;
    39b6:	89 81       	ldd	r24, Y+1	; 0x01
    39b8:	9a 81       	ldd	r25, Y+2	; 0x02
    39ba:	ab 81       	ldd	r26, Y+3	; 0x03
    39bc:	bc 81       	ldd	r27, Y+4	; 0x04
 }
    39be:	bc 01       	movw	r22, r24
    39c0:	cd 01       	movw	r24, r26
    39c2:	2e 96       	adiw	r28, 0x0e	; 14
    39c4:	0f b6       	in	r0, 0x3f	; 63
    39c6:	f8 94       	cli
    39c8:	de bf       	out	0x3e, r29	; 62
    39ca:	0f be       	out	0x3f, r0	; 63
    39cc:	cd bf       	out	0x3d, r28	; 61
    39ce:	cf 91       	pop	r28
    39d0:	df 91       	pop	r29
    39d2:	1f 91       	pop	r17
    39d4:	0f 91       	pop	r16
    39d6:	08 95       	ret

000039d8 <evaluatePostfix>:


 float evaluatePostfix(char* postfixexp )
 {
    39d8:	ef 92       	push	r14
    39da:	ff 92       	push	r15
    39dc:	0f 93       	push	r16
    39de:	1f 93       	push	r17
    39e0:	df 93       	push	r29
    39e2:	cf 93       	push	r28
    39e4:	cd b7       	in	r28, 0x3d	; 61
    39e6:	de b7       	in	r29, 0x3e	; 62
    39e8:	66 97       	sbiw	r28, 0x16	; 22
    39ea:	0f b6       	in	r0, 0x3f	; 63
    39ec:	f8 94       	cli
    39ee:	de bf       	out	0x3e, r29	; 62
    39f0:	0f be       	out	0x3f, r0	; 63
    39f2:	cd bf       	out	0x3d, r28	; 61
    39f4:	9e 8b       	std	Y+22, r25	; 0x16
    39f6:	8d 8b       	std	Y+21, r24	; 0x15
	 Stack *s=initialize();
    39f8:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <initialize>
    39fc:	9c 83       	std	Y+4, r25	; 0x04
    39fe:	8b 83       	std	Y+3, r24	; 0x03
	     char *tok=strtok(postfixexp," ");
    3a00:	8d 89       	ldd	r24, Y+21	; 0x15
    3a02:	9e 89       	ldd	r25, Y+22	; 0x16
    3a04:	20 e6       	ldi	r18, 0x60	; 96
    3a06:	30 e0       	ldi	r19, 0x00	; 0
    3a08:	b9 01       	movw	r22, r18
    3a0a:	0e 94 86 23 	call	0x470c	; 0x470c <strtok>
    3a0e:	9a 83       	std	Y+2, r25	; 0x02
    3a10:	89 83       	std	Y+1, r24	; 0x01
    3a12:	6f c0       	rjmp	.+222    	; 0x3af2 <evaluatePostfix+0x11a>
	     Item x,op1,op2,a;
	     while(tok!=NULL )
	     {

	         if(isdigit(tok[0])!=0||tok[0]=='-' &&strlen(tok)>1 )
    3a14:	e9 81       	ldd	r30, Y+1	; 0x01
    3a16:	fa 81       	ldd	r31, Y+2	; 0x02
    3a18:	80 81       	ld	r24, Z
    3a1a:	88 2f       	mov	r24, r24
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	c0 97       	sbiw	r24, 0x30	; 48
    3a20:	8a 30       	cpi	r24, 0x0A	; 10
    3a22:	91 05       	cpc	r25, r1
    3a24:	60 f0       	brcs	.+24     	; 0x3a3e <evaluatePostfix+0x66>
    3a26:	e9 81       	ldd	r30, Y+1	; 0x01
    3a28:	fa 81       	ldd	r31, Y+2	; 0x02
    3a2a:	80 81       	ld	r24, Z
    3a2c:	8d 32       	cpi	r24, 0x2D	; 45
    3a2e:	21 f5       	brne	.+72     	; 0x3a78 <evaluatePostfix+0xa0>
    3a30:	89 81       	ldd	r24, Y+1	; 0x01
    3a32:	9a 81       	ldd	r25, Y+2	; 0x02
    3a34:	0e 94 9f 23 	call	0x473e	; 0x473e <strlen>
    3a38:	82 30       	cpi	r24, 0x02	; 2
    3a3a:	91 05       	cpc	r25, r1
    3a3c:	e8 f0       	brcs	.+58     	; 0x3a78 <evaluatePostfix+0xa0>
	         {
	             x.fData=atoi(tok);
    3a3e:	89 81       	ldd	r24, Y+1	; 0x01
    3a40:	9a 81       	ldd	r25, Y+2	; 0x02
    3a42:	0e 94 68 23 	call	0x46d0	; 0x46d0 <atoi>
    3a46:	aa 27       	eor	r26, r26
    3a48:	97 fd       	sbrc	r25, 7
    3a4a:	a0 95       	com	r26
    3a4c:	ba 2f       	mov	r27, r26
    3a4e:	bc 01       	movw	r22, r24
    3a50:	cd 01       	movw	r24, r26
    3a52:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3a56:	dc 01       	movw	r26, r24
    3a58:	cb 01       	movw	r24, r22
    3a5a:	8d 83       	std	Y+5, r24	; 0x05
    3a5c:	9e 83       	std	Y+6, r25	; 0x06
    3a5e:	af 83       	std	Y+7, r26	; 0x07
    3a60:	b8 87       	std	Y+8, r27	; 0x08
	             push(s,x);
    3a62:	8b 81       	ldd	r24, Y+3	; 0x03
    3a64:	9c 81       	ldd	r25, Y+4	; 0x04
    3a66:	2d 81       	ldd	r18, Y+5	; 0x05
    3a68:	3e 81       	ldd	r19, Y+6	; 0x06
    3a6a:	4f 81       	ldd	r20, Y+7	; 0x07
    3a6c:	58 85       	ldd	r21, Y+8	; 0x08
    3a6e:	ba 01       	movw	r22, r20
    3a70:	a9 01       	movw	r20, r18
    3a72:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <push>
    3a76:	34 c0       	rjmp	.+104    	; 0x3ae0 <evaluatePostfix+0x108>

	         }
	         else
	         {

	             op1=pop(s);
    3a78:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a7c:	0e 94 30 1a 	call	0x3460	; 0x3460 <pop>
    3a80:	dc 01       	movw	r26, r24
    3a82:	cb 01       	movw	r24, r22
    3a84:	89 87       	std	Y+9, r24	; 0x09
    3a86:	9a 87       	std	Y+10, r25	; 0x0a
    3a88:	ab 87       	std	Y+11, r26	; 0x0b
    3a8a:	bc 87       	std	Y+12, r27	; 0x0c
	             op2=pop(s);
    3a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a90:	0e 94 30 1a 	call	0x3460	; 0x3460 <pop>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	8d 87       	std	Y+13, r24	; 0x0d
    3a9a:	9e 87       	std	Y+14, r25	; 0x0e
    3a9c:	af 87       	std	Y+15, r26	; 0x0f
    3a9e:	b8 8b       	std	Y+16, r27	; 0x10
	             a.fData=eval(tok,op1.fData,op2.fData);
    3aa0:	29 85       	ldd	r18, Y+9	; 0x09
    3aa2:	3a 85       	ldd	r19, Y+10	; 0x0a
    3aa4:	4b 85       	ldd	r20, Y+11	; 0x0b
    3aa6:	5c 85       	ldd	r21, Y+12	; 0x0c
    3aa8:	ed 84       	ldd	r14, Y+13	; 0x0d
    3aaa:	fe 84       	ldd	r15, Y+14	; 0x0e
    3aac:	0f 85       	ldd	r16, Y+15	; 0x0f
    3aae:	18 89       	ldd	r17, Y+16	; 0x10
    3ab0:	89 81       	ldd	r24, Y+1	; 0x01
    3ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab4:	ba 01       	movw	r22, r20
    3ab6:	a9 01       	movw	r20, r18
    3ab8:	98 01       	movw	r18, r16
    3aba:	87 01       	movw	r16, r14
    3abc:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <eval>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	89 8b       	std	Y+17, r24	; 0x11
    3ac6:	9a 8b       	std	Y+18, r25	; 0x12
    3ac8:	ab 8b       	std	Y+19, r26	; 0x13
    3aca:	bc 8b       	std	Y+20, r27	; 0x14
	             push(s,a);
    3acc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ace:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad0:	29 89       	ldd	r18, Y+17	; 0x11
    3ad2:	3a 89       	ldd	r19, Y+18	; 0x12
    3ad4:	4b 89       	ldd	r20, Y+19	; 0x13
    3ad6:	5c 89       	ldd	r21, Y+20	; 0x14
    3ad8:	ba 01       	movw	r22, r20
    3ada:	a9 01       	movw	r20, r18
    3adc:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <push>
	         }
	         tok=strtok(NULL," ");
    3ae0:	20 e6       	ldi	r18, 0x60	; 96
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	b9 01       	movw	r22, r18
    3aea:	0e 94 86 23 	call	0x470c	; 0x470c <strtok>
    3aee:	9a 83       	std	Y+2, r25	; 0x02
    3af0:	89 83       	std	Y+1, r24	; 0x01
 float evaluatePostfix(char* postfixexp )
 {
	 Stack *s=initialize();
	     char *tok=strtok(postfixexp," ");
	     Item x,op1,op2,a;
	     while(tok!=NULL )
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	9a 81       	ldd	r25, Y+2	; 0x02
    3af6:	00 97       	sbiw	r24, 0x00	; 0
    3af8:	09 f0       	breq	.+2      	; 0x3afc <evaluatePostfix+0x124>
    3afa:	8c cf       	rjmp	.-232    	; 0x3a14 <evaluatePostfix+0x3c>
	         }
	         tok=strtok(NULL," ");

	     }

	     return pop(s).fData;
    3afc:	8b 81       	ldd	r24, Y+3	; 0x03
    3afe:	9c 81       	ldd	r25, Y+4	; 0x04
    3b00:	0e 94 30 1a 	call	0x3460	; 0x3460 <pop>
    3b04:	dc 01       	movw	r26, r24
    3b06:	cb 01       	movw	r24, r22
	 }
    3b08:	bc 01       	movw	r22, r24
    3b0a:	cd 01       	movw	r24, r26
    3b0c:	66 96       	adiw	r28, 0x16	; 22
    3b0e:	0f b6       	in	r0, 0x3f	; 63
    3b10:	f8 94       	cli
    3b12:	de bf       	out	0x3e, r29	; 62
    3b14:	0f be       	out	0x3f, r0	; 63
    3b16:	cd bf       	out	0x3d, r28	; 61
    3b18:	cf 91       	pop	r28
    3b1a:	df 91       	pop	r29
    3b1c:	1f 91       	pop	r17
    3b1e:	0f 91       	pop	r16
    3b20:	ff 90       	pop	r15
    3b22:	ef 90       	pop	r14
    3b24:	08 95       	ret

00003b26 <replaceNewLineBySpace>:

 void replaceNewLineBySpace(char *s)
 {
    3b26:	df 93       	push	r29
    3b28:	cf 93       	push	r28
    3b2a:	00 d0       	rcall	.+0      	; 0x3b2c <replaceNewLineBySpace+0x6>
    3b2c:	00 d0       	rcall	.+0      	; 0x3b2e <replaceNewLineBySpace+0x8>
    3b2e:	cd b7       	in	r28, 0x3d	; 61
    3b30:	de b7       	in	r29, 0x3e	; 62
    3b32:	9c 83       	std	Y+4, r25	; 0x04
    3b34:	8b 83       	std	Y+3, r24	; 0x03
    char *s1 = s;
    3b36:	8b 81       	ldd	r24, Y+3	; 0x03
    3b38:	9c 81       	ldd	r25, Y+4	; 0x04
    3b3a:	9a 83       	std	Y+2, r25	; 0x02
    3b3c:	89 83       	std	Y+1, r24	; 0x01
    3b3e:	04 c0       	rjmp	.+8      	; 0x3b48 <replaceNewLineBySpace+0x22>
    while((s1 = strstr(s1, "\n")) != NULL)
        *s1 = ' ';
    3b40:	e9 81       	ldd	r30, Y+1	; 0x01
    3b42:	fa 81       	ldd	r31, Y+2	; 0x02
    3b44:	80 e2       	ldi	r24, 0x20	; 32
    3b46:	80 83       	st	Z, r24
	 }

 void replaceNewLineBySpace(char *s)
 {
    char *s1 = s;
    while((s1 = strstr(s1, "\n")) != NULL)
    3b48:	89 81       	ldd	r24, Y+1	; 0x01
    3b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b4c:	6a e0       	ldi	r22, 0x0A	; 10
    3b4e:	70 e0       	ldi	r23, 0x00	; 0
    3b50:	0e 94 94 23 	call	0x4728	; 0x4728 <strchr>
    3b54:	9a 83       	std	Y+2, r25	; 0x02
    3b56:	89 83       	std	Y+1, r24	; 0x01
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b5c:	00 97       	sbiw	r24, 0x00	; 0
    3b5e:	81 f7       	brne	.-32     	; 0x3b40 <replaceNewLineBySpace+0x1a>
        *s1 = ' ';
 }
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
    3b64:	0f 90       	pop	r0
    3b66:	0f 90       	pop	r0
    3b68:	cf 91       	pop	r28
    3b6a:	df 91       	pop	r29
    3b6c:	08 95       	ret

00003b6e <CalculateResult>:

 void CalculateResult(u32 *expression)
 {
    3b6e:	df 93       	push	r29
    3b70:	cf 93       	push	r28
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	c2 51       	subi	r28, 0x12	; 18
    3b78:	d1 40       	sbci	r29, 0x01	; 1
    3b7a:	0f b6       	in	r0, 0x3f	; 63
    3b7c:	f8 94       	cli
    3b7e:	de bf       	out	0x3e, r29	; 62
    3b80:	0f be       	out	0x3f, r0	; 63
    3b82:	cd bf       	out	0x3d, r28	; 61
    3b84:	fe 01       	movw	r30, r28
    3b86:	ef 5e       	subi	r30, 0xEF	; 239
    3b88:	fe 4f       	sbci	r31, 0xFE	; 254
    3b8a:	91 83       	std	Z+1, r25	; 0x01
    3b8c:	80 83       	st	Z, r24
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	aa e7       	ldi	r26, 0x7A	; 122
    3b94:	b4 e4       	ldi	r27, 0x44	; 68
    3b96:	8b 87       	std	Y+11, r24	; 0x0b
    3b98:	9c 87       	std	Y+12, r25	; 0x0c
    3b9a:	ad 87       	std	Y+13, r26	; 0x0d
    3b9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	4a ef       	ldi	r20, 0xFA	; 250
    3bac:	54 e4       	ldi	r21, 0x44	; 68
    3bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	8f 83       	std	Y+7, r24	; 0x07
    3bb8:	98 87       	std	Y+8, r25	; 0x08
    3bba:	a9 87       	std	Y+9, r26	; 0x09
    3bbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc0:	78 85       	ldd	r23, Y+8	; 0x08
    3bc2:	89 85       	ldd	r24, Y+9	; 0x09
    3bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	40 e8       	ldi	r20, 0x80	; 128
    3bcc:	5f e3       	ldi	r21, 0x3F	; 63
    3bce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bd2:	88 23       	and	r24, r24
    3bd4:	2c f4       	brge	.+10     	; 0x3be0 <CalculateResult+0x72>
		__ticks = 1;
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	9e 83       	std	Y+6, r25	; 0x06
    3bdc:	8d 83       	std	Y+5, r24	; 0x05
    3bde:	3f c0       	rjmp	.+126    	; 0x3c5e <CalculateResult+0xf0>
	else if (__tmp > 65535)
    3be0:	6f 81       	ldd	r22, Y+7	; 0x07
    3be2:	78 85       	ldd	r23, Y+8	; 0x08
    3be4:	89 85       	ldd	r24, Y+9	; 0x09
    3be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	3f ef       	ldi	r19, 0xFF	; 255
    3bec:	4f e7       	ldi	r20, 0x7F	; 127
    3bee:	57 e4       	ldi	r21, 0x47	; 71
    3bf0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bf4:	18 16       	cp	r1, r24
    3bf6:	4c f5       	brge	.+82     	; 0x3c4a <CalculateResult+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	40 e2       	ldi	r20, 0x20	; 32
    3c06:	51 e4       	ldi	r21, 0x41	; 65
    3c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	bc 01       	movw	r22, r24
    3c12:	cd 01       	movw	r24, r26
    3c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	9e 83       	std	Y+6, r25	; 0x06
    3c1e:	8d 83       	std	Y+5, r24	; 0x05
    3c20:	0f c0       	rjmp	.+30     	; 0x3c40 <CalculateResult+0xd2>
    3c22:	88 ec       	ldi	r24, 0xC8	; 200
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	9c 83       	std	Y+4, r25	; 0x04
    3c28:	8b 83       	std	Y+3, r24	; 0x03
    3c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c2e:	01 97       	sbiw	r24, 0x01	; 1
    3c30:	f1 f7       	brne	.-4      	; 0x3c2e <CalculateResult+0xc0>
    3c32:	9c 83       	std	Y+4, r25	; 0x04
    3c34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c36:	8d 81       	ldd	r24, Y+5	; 0x05
    3c38:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	9e 83       	std	Y+6, r25	; 0x06
    3c3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c40:	8d 81       	ldd	r24, Y+5	; 0x05
    3c42:	9e 81       	ldd	r25, Y+6	; 0x06
    3c44:	00 97       	sbiw	r24, 0x00	; 0
    3c46:	69 f7       	brne	.-38     	; 0x3c22 <CalculateResult+0xb4>
    3c48:	14 c0       	rjmp	.+40     	; 0x3c72 <CalculateResult+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c4c:	78 85       	ldd	r23, Y+8	; 0x08
    3c4e:	89 85       	ldd	r24, Y+9	; 0x09
    3c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	9e 83       	std	Y+6, r25	; 0x06
    3c5c:	8d 83       	std	Y+5, r24	; 0x05
    3c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c60:	9e 81       	ldd	r25, Y+6	; 0x06
    3c62:	9a 83       	std	Y+2, r25	; 0x02
    3c64:	89 83       	std	Y+1, r24	; 0x01
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
    3c6c:	f1 f7       	brne	.-4      	; 0x3c6a <CalculateResult+0xfc>
    3c6e:	9a 83       	std	Y+2, r25	; 0x02
    3c70:	89 83       	std	Y+1, r24	; 0x01
 //LCD_voidGoToXY(1,0);

 //LCD_voidSendString(expression);
 _delay_ms(1000);
   //char infixExpr[256] = "1 + 3 + 4";
    u8 postfixExpr[256] = "";
    3c72:	19 8a       	std	Y+17, r1	; 0x11
    3c74:	1a 8a       	std	Y+18, r1	; 0x12
    3c76:	1b 8a       	std	Y+19, r1	; 0x13
    3c78:	1c 8a       	std	Y+20, r1	; 0x14
    3c7a:	8c ef       	ldi	r24, 0xFC	; 252
    3c7c:	fe 01       	movw	r30, r28
    3c7e:	75 96       	adiw	r30, 0x15	; 21
    3c80:	df 01       	movw	r26, r30
    3c82:	98 2f       	mov	r25, r24
    3c84:	1d 92       	st	X+, r1
    3c86:	9a 95       	dec	r25
    3c88:	e9 f7       	brne	.-6      	; 0x3c84 <CalculateResult+0x116>

      //  replaceNewLineBySpace(infixExpr);
     //  replaceNewLineBySpace(expression);
        infixToPostfix(expression, postfixExpr);
    3c8a:	fe 01       	movw	r30, r28
    3c8c:	ef 5e       	subi	r30, 0xEF	; 239
    3c8e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c90:	80 81       	ld	r24, Z
    3c92:	91 81       	ldd	r25, Z+1	; 0x01
    3c94:	9e 01       	movw	r18, r28
    3c96:	2f 5e       	subi	r18, 0xEF	; 239
    3c98:	3f 4f       	sbci	r19, 0xFF	; 255
    3c9a:	b9 01       	movw	r22, r18
    3c9c:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <infixToPostfix>
        u16 answer = evaluatePostfix(postfixExpr);
    3ca0:	ce 01       	movw	r24, r28
    3ca2:	41 96       	adiw	r24, 0x11	; 17
    3ca4:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <evaluatePostfix>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	bc 01       	movw	r22, r24
    3cae:	cd 01       	movw	r24, r26
    3cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb4:	dc 01       	movw	r26, r24
    3cb6:	cb 01       	movw	r24, r22
    3cb8:	98 8b       	std	Y+16, r25	; 0x10
    3cba:	8f 87       	std	Y+15, r24	; 0x0f
        LCD_voidGoToXY(1,0);
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	60 e0       	ldi	r22, 0x00	; 0
    3cc0:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <LCD_voidGoToXY>
        LCD_voidSendNumber(answer);
    3cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cc6:	98 89       	ldd	r25, Y+16	; 0x10
    3cc8:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <LCD_voidSendNumber>
       // _delay_ms(6000);
       // LCD_voidClearDisplay();


  // return answer;
 }
    3ccc:	ce 5e       	subi	r28, 0xEE	; 238
    3cce:	de 4f       	sbci	r29, 0xFE	; 254
    3cd0:	0f b6       	in	r0, 0x3f	; 63
    3cd2:	f8 94       	cli
    3cd4:	de bf       	out	0x3e, r29	; 62
    3cd6:	0f be       	out	0x3f, r0	; 63
    3cd8:	cd bf       	out	0x3d, r28	; 61
    3cda:	cf 91       	pop	r28
    3cdc:	df 91       	pop	r29
    3cde:	08 95       	ret

00003ce0 <isValidOperation>:
 
 u8 isValidOperation(u8 *expression){
    3ce0:	df 93       	push	r29
    3ce2:	cf 93       	push	r28
    3ce4:	00 d0       	rcall	.+0      	; 0x3ce6 <isValidOperation+0x6>
    3ce6:	00 d0       	rcall	.+0      	; 0x3ce8 <isValidOperation+0x8>
    3ce8:	00 d0       	rcall	.+0      	; 0x3cea <isValidOperation+0xa>
    3cea:	cd b7       	in	r28, 0x3d	; 61
    3cec:	de b7       	in	r29, 0x3e	; 62
    3cee:	9e 83       	std	Y+6, r25	; 0x06
    3cf0:	8d 83       	std	Y+5, r24	; 0x05
	//get length of expression
		u8 invalid_operation=0;
    3cf2:	1c 82       	std	Y+4, r1	; 0x04
		u8 i=0;
    3cf4:	1b 82       	std	Y+3, r1	; 0x03
    3cf6:	03 c0       	rjmp	.+6      	; 0x3cfe <isValidOperation+0x1e>
		while(expression[i]!='\0')
		{
			i++;
    3cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfa:	8f 5f       	subi	r24, 0xFF	; 255
    3cfc:	8b 83       	std	Y+3, r24	; 0x03
 
 u8 isValidOperation(u8 *expression){
	//get length of expression
		u8 invalid_operation=0;
		u8 i=0;
		while(expression[i]!='\0')
    3cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    3d00:	28 2f       	mov	r18, r24
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	8d 81       	ldd	r24, Y+5	; 0x05
    3d06:	9e 81       	ldd	r25, Y+6	; 0x06
    3d08:	fc 01       	movw	r30, r24
    3d0a:	e2 0f       	add	r30, r18
    3d0c:	f3 1f       	adc	r31, r19
    3d0e:	80 81       	ld	r24, Z
    3d10:	88 23       	and	r24, r24
    3d12:	91 f7       	brne	.-28     	; 0x3cf8 <isValidOperation+0x18>
		{
			i++;
		}

	//search expression for division by zero
        for(u8 k=0;k<i;k++)
    3d14:	1a 82       	std	Y+2, r1	; 0x02
    3d16:	1f c0       	rjmp	.+62     	; 0x3d56 <isValidOperation+0x76>
        {
            if(expression[k]=='/' && expression[k+2]=='0')
    3d18:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1a:	28 2f       	mov	r18, r24
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d20:	9e 81       	ldd	r25, Y+6	; 0x06
    3d22:	fc 01       	movw	r30, r24
    3d24:	e2 0f       	add	r30, r18
    3d26:	f3 1f       	adc	r31, r19
    3d28:	80 81       	ld	r24, Z
    3d2a:	8f 32       	cpi	r24, 0x2F	; 47
    3d2c:	89 f4       	brne	.+34     	; 0x3d50 <isValidOperation+0x70>
    3d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d30:	88 2f       	mov	r24, r24
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	9c 01       	movw	r18, r24
    3d36:	2e 5f       	subi	r18, 0xFE	; 254
    3d38:	3f 4f       	sbci	r19, 0xFF	; 255
    3d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3e:	fc 01       	movw	r30, r24
    3d40:	e2 0f       	add	r30, r18
    3d42:	f3 1f       	adc	r31, r19
    3d44:	80 81       	ld	r24, Z
    3d46:	80 33       	cpi	r24, 0x30	; 48
    3d48:	19 f4       	brne	.+6      	; 0x3d50 <isValidOperation+0x70>
            {
                // LCD_voidClearDisplay();
                // LCD_voidGoToXY(1,0);
                // LCD_voidSendString("Division by zero");
                invalid_operation=1;
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
    3d4c:	8c 83       	std	Y+4, r24	; 0x04
    3d4e:	07 c0       	rjmp	.+14     	; 0x3d5e <isValidOperation+0x7e>
		{
			i++;
		}

	//search expression for division by zero
        for(u8 k=0;k<i;k++)
    3d50:	8a 81       	ldd	r24, Y+2	; 0x02
    3d52:	8f 5f       	subi	r24, 0xFF	; 255
    3d54:	8a 83       	std	Y+2, r24	; 0x02
    3d56:	9a 81       	ldd	r25, Y+2	; 0x02
    3d58:	8b 81       	ldd	r24, Y+3	; 0x03
    3d5a:	98 17       	cp	r25, r24
    3d5c:	e8 f2       	brcs	.-70     	; 0x3d18 <isValidOperation+0x38>
                break;
            }
        }

        //search for invalid operation
        for(u8 k=0;k<i;k++)
    3d5e:	19 82       	std	Y+1, r1	; 0x01
    3d60:	38 c0       	rjmp	.+112    	; 0x3dd2 <isValidOperation+0xf2>
        {
            if(expression[k]=='+' || expression[k]=='-')
    3d62:	89 81       	ldd	r24, Y+1	; 0x01
    3d64:	28 2f       	mov	r18, r24
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	8d 81       	ldd	r24, Y+5	; 0x05
    3d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	e2 0f       	add	r30, r18
    3d70:	f3 1f       	adc	r31, r19
    3d72:	80 81       	ld	r24, Z
    3d74:	8b 32       	cpi	r24, 0x2B	; 43
    3d76:	59 f0       	breq	.+22     	; 0x3d8e <isValidOperation+0xae>
    3d78:	89 81       	ldd	r24, Y+1	; 0x01
    3d7a:	28 2f       	mov	r18, r24
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d80:	9e 81       	ldd	r25, Y+6	; 0x06
    3d82:	fc 01       	movw	r30, r24
    3d84:	e2 0f       	add	r30, r18
    3d86:	f3 1f       	adc	r31, r19
    3d88:	80 81       	ld	r24, Z
    3d8a:	8d 32       	cpi	r24, 0x2D	; 45
    3d8c:	f9 f4       	brne	.+62     	; 0x3dcc <isValidOperation+0xec>
            {
                if(expression[k+2]=='/' || expression[k+2]=='*')
    3d8e:	89 81       	ldd	r24, Y+1	; 0x01
    3d90:	88 2f       	mov	r24, r24
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	9c 01       	movw	r18, r24
    3d96:	2e 5f       	subi	r18, 0xFE	; 254
    3d98:	3f 4f       	sbci	r19, 0xFF	; 255
    3d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d9e:	fc 01       	movw	r30, r24
    3da0:	e2 0f       	add	r30, r18
    3da2:	f3 1f       	adc	r31, r19
    3da4:	80 81       	ld	r24, Z
    3da6:	8f 32       	cpi	r24, 0x2F	; 47
    3da8:	71 f0       	breq	.+28     	; 0x3dc6 <isValidOperation+0xe6>
    3daa:	89 81       	ldd	r24, Y+1	; 0x01
    3dac:	88 2f       	mov	r24, r24
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	9c 01       	movw	r18, r24
    3db2:	2e 5f       	subi	r18, 0xFE	; 254
    3db4:	3f 4f       	sbci	r19, 0xFF	; 255
    3db6:	8d 81       	ldd	r24, Y+5	; 0x05
    3db8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dba:	fc 01       	movw	r30, r24
    3dbc:	e2 0f       	add	r30, r18
    3dbe:	f3 1f       	adc	r31, r19
    3dc0:	80 81       	ld	r24, Z
    3dc2:	8a 32       	cpi	r24, 0x2A	; 42
    3dc4:	19 f4       	brne	.+6      	; 0x3dcc <isValidOperation+0xec>
                {
                    // LCD_voidClearDisplay();
                    // LCD_voidGoToXY(1,0);
                    // LCD_voidSendString("Syntax Error");
                    invalid_operation=1;
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	8c 83       	std	Y+4, r24	; 0x04
    3dca:	07 c0       	rjmp	.+14     	; 0x3dda <isValidOperation+0xfa>
                break;
            }
        }

        //search for invalid operation
        for(u8 k=0;k<i;k++)
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
    3dce:	8f 5f       	subi	r24, 0xFF	; 255
    3dd0:	89 83       	std	Y+1, r24	; 0x01
    3dd2:	99 81       	ldd	r25, Y+1	; 0x01
    3dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd6:	98 17       	cp	r25, r24
    3dd8:	20 f2       	brcs	.-120    	; 0x3d62 <isValidOperation+0x82>
                }
            }
        }

        //if last character is an operation character
        if(expression[i-2]=='+' || expression[i-2]=='-' || expression[i-2]=='*' || expression[i-2]=='/')
    3dda:	8b 81       	ldd	r24, Y+3	; 0x03
    3ddc:	88 2f       	mov	r24, r24
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	9c 01       	movw	r18, r24
    3de2:	22 50       	subi	r18, 0x02	; 2
    3de4:	30 40       	sbci	r19, 0x00	; 0
    3de6:	8d 81       	ldd	r24, Y+5	; 0x05
    3de8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dea:	fc 01       	movw	r30, r24
    3dec:	e2 0f       	add	r30, r18
    3dee:	f3 1f       	adc	r31, r19
    3df0:	80 81       	ld	r24, Z
    3df2:	8b 32       	cpi	r24, 0x2B	; 43
    3df4:	51 f1       	breq	.+84     	; 0x3e4a <isValidOperation+0x16a>
    3df6:	8b 81       	ldd	r24, Y+3	; 0x03
    3df8:	88 2f       	mov	r24, r24
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	9c 01       	movw	r18, r24
    3dfe:	22 50       	subi	r18, 0x02	; 2
    3e00:	30 40       	sbci	r19, 0x00	; 0
    3e02:	8d 81       	ldd	r24, Y+5	; 0x05
    3e04:	9e 81       	ldd	r25, Y+6	; 0x06
    3e06:	fc 01       	movw	r30, r24
    3e08:	e2 0f       	add	r30, r18
    3e0a:	f3 1f       	adc	r31, r19
    3e0c:	80 81       	ld	r24, Z
    3e0e:	8d 32       	cpi	r24, 0x2D	; 45
    3e10:	e1 f0       	breq	.+56     	; 0x3e4a <isValidOperation+0x16a>
    3e12:	8b 81       	ldd	r24, Y+3	; 0x03
    3e14:	88 2f       	mov	r24, r24
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	9c 01       	movw	r18, r24
    3e1a:	22 50       	subi	r18, 0x02	; 2
    3e1c:	30 40       	sbci	r19, 0x00	; 0
    3e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e20:	9e 81       	ldd	r25, Y+6	; 0x06
    3e22:	fc 01       	movw	r30, r24
    3e24:	e2 0f       	add	r30, r18
    3e26:	f3 1f       	adc	r31, r19
    3e28:	80 81       	ld	r24, Z
    3e2a:	8a 32       	cpi	r24, 0x2A	; 42
    3e2c:	71 f0       	breq	.+28     	; 0x3e4a <isValidOperation+0x16a>
    3e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e30:	88 2f       	mov	r24, r24
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	9c 01       	movw	r18, r24
    3e36:	22 50       	subi	r18, 0x02	; 2
    3e38:	30 40       	sbci	r19, 0x00	; 0
    3e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e3e:	fc 01       	movw	r30, r24
    3e40:	e2 0f       	add	r30, r18
    3e42:	f3 1f       	adc	r31, r19
    3e44:	80 81       	ld	r24, Z
    3e46:	8f 32       	cpi	r24, 0x2F	; 47
    3e48:	11 f4       	brne	.+4      	; 0x3e4e <isValidOperation+0x16e>
        {
            // LCD_voidClearDisplay();
            // LCD_voidGoToXY(1,0);
            // LCD_voidSendString("Syntax Error");
            invalid_operation=1;
    3e4a:	81 e0       	ldi	r24, 0x01	; 1
    3e4c:	8c 83       	std	Y+4, r24	; 0x04
        }
    
	return invalid_operation;
    3e4e:	8c 81       	ldd	r24, Y+4	; 0x04
 }
    3e50:	26 96       	adiw	r28, 0x06	; 6
    3e52:	0f b6       	in	r0, 0x3f	; 63
    3e54:	f8 94       	cli
    3e56:	de bf       	out	0x3e, r29	; 62
    3e58:	0f be       	out	0x3f, r0	; 63
    3e5a:	cd bf       	out	0x3d, r28	; 61
    3e5c:	cf 91       	pop	r28
    3e5e:	df 91       	pop	r29
    3e60:	08 95       	ret

00003e62 <seg_voidInit>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "7Seg_interface.h"

void seg_voidInit(u8 seg_PORT){
    3e62:	df 93       	push	r29
    3e64:	cf 93       	push	r28
    3e66:	0f 92       	push	r0
    3e68:	cd b7       	in	r28, 0x3d	; 61
    3e6a:	de b7       	in	r29, 0x3e	; 62
    3e6c:	89 83       	std	Y+1, r24	; 0x01
    //set direction of 7seg pins as output on port D
    DIO_voidSetSpecificPortDirection(seg_PORT,0b11111111);
    3e6e:	89 81       	ldd	r24, Y+1	; 0x01
    3e70:	6f ef       	ldi	r22, 0xFF	; 255
    3e72:	0e 94 1d 10 	call	0x203a	; 0x203a <DIO_voidSetSpecificPortDirection>
}
    3e76:	0f 90       	pop	r0
    3e78:	cf 91       	pop	r28
    3e7a:	df 91       	pop	r29
    3e7c:	08 95       	ret

00003e7e <seg_voidDisplay>:

void seg_voidDisplay(u8 seg_PORT,u8 Copy_u8Number){
    3e7e:	df 93       	push	r29
    3e80:	cf 93       	push	r28
    3e82:	cd b7       	in	r28, 0x3d	; 61
    3e84:	de b7       	in	r29, 0x3e	; 62
    3e86:	61 97       	sbiw	r28, 0x11	; 17
    3e88:	0f b6       	in	r0, 0x3f	; 63
    3e8a:	f8 94       	cli
    3e8c:	de bf       	out	0x3e, r29	; 62
    3e8e:	0f be       	out	0x3f, r0	; 63
    3e90:	cd bf       	out	0x3d, r28	; 61
    3e92:	8b 87       	std	Y+11, r24	; 0x0b
    3e94:	6c 87       	std	Y+12, r22	; 0x0c
    //display numbers from 0 to 9 on 7-segment on port D
   u8 arr[10]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,
               0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
    3e96:	ce 01       	movw	r24, r28
    3e98:	01 96       	adiw	r24, 0x01	; 1
    3e9a:	9e 87       	std	Y+14, r25	; 0x0e
    3e9c:	8d 87       	std	Y+13, r24	; 0x0d
    3e9e:	e4 eb       	ldi	r30, 0xB4	; 180
    3ea0:	f1 e0       	ldi	r31, 0x01	; 1
    3ea2:	f8 8b       	std	Y+16, r31	; 0x10
    3ea4:	ef 87       	std	Y+15, r30	; 0x0f
    3ea6:	fa e0       	ldi	r31, 0x0A	; 10
    3ea8:	f9 8b       	std	Y+17, r31	; 0x11
    3eaa:	ef 85       	ldd	r30, Y+15	; 0x0f
    3eac:	f8 89       	ldd	r31, Y+16	; 0x10
    3eae:	00 80       	ld	r0, Z
    3eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eb2:	98 89       	ldd	r25, Y+16	; 0x10
    3eb4:	01 96       	adiw	r24, 0x01	; 1
    3eb6:	98 8b       	std	Y+16, r25	; 0x10
    3eb8:	8f 87       	std	Y+15, r24	; 0x0f
    3eba:	ed 85       	ldd	r30, Y+13	; 0x0d
    3ebc:	fe 85       	ldd	r31, Y+14	; 0x0e
    3ebe:	00 82       	st	Z, r0
    3ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ec4:	01 96       	adiw	r24, 0x01	; 1
    3ec6:	9e 87       	std	Y+14, r25	; 0x0e
    3ec8:	8d 87       	std	Y+13, r24	; 0x0d
    3eca:	99 89       	ldd	r25, Y+17	; 0x11
    3ecc:	91 50       	subi	r25, 0x01	; 1
    3ece:	99 8b       	std	Y+17, r25	; 0x11
    3ed0:	e9 89       	ldd	r30, Y+17	; 0x11
    3ed2:	ee 23       	and	r30, r30
    3ed4:	51 f7       	brne	.-44     	; 0x3eaa <seg_voidDisplay+0x2c>
   DIO_voidSetSpecificPortValue(seg_PORT,arr[Copy_u8Number]);
    3ed6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ed8:	28 2f       	mov	r18, r24
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	ce 01       	movw	r24, r28
    3ede:	01 96       	adiw	r24, 0x01	; 1
    3ee0:	fc 01       	movw	r30, r24
    3ee2:	e2 0f       	add	r30, r18
    3ee4:	f3 1f       	adc	r31, r19
    3ee6:	90 81       	ld	r25, Z
    3ee8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3eea:	69 2f       	mov	r22, r25
    3eec:	0e 94 5e 10 	call	0x20bc	; 0x20bc <DIO_voidSetSpecificPortValue>
    3ef0:	61 96       	adiw	r28, 0x11	; 17
    3ef2:	0f b6       	in	r0, 0x3f	; 63
    3ef4:	f8 94       	cli
    3ef6:	de bf       	out	0x3e, r29	; 62
    3ef8:	0f be       	out	0x3f, r0	; 63
    3efa:	cd bf       	out	0x3d, r28	; 61
    3efc:	cf 91       	pop	r28
    3efe:	df 91       	pop	r29
    3f00:	08 95       	ret

00003f02 <main>:





void main(void){
    3f02:	df 93       	push	r29
    3f04:	cf 93       	push	r28
    3f06:	cd b7       	in	r28, 0x3d	; 61
    3f08:	de b7       	in	r29, 0x3e	; 62
    3f0a:	ce 50       	subi	r28, 0x0E	; 14
    3f0c:	d2 40       	sbci	r29, 0x02	; 2
    3f0e:	0f b6       	in	r0, 0x3f	; 63
    3f10:	f8 94       	cli
    3f12:	de bf       	out	0x3e, r29	; 62
    3f14:	0f be       	out	0x3f, r0	; 63
    3f16:	cd bf       	out	0x3d, r28	; 61

   //define operation characters for display


   //Map operation characters to CGRAM
   LCD_voidInit();
    3f18:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_voidInit>
  // LCD_voidSendNumber(120);
   LCD_voidPrintSpecialChar();
    3f1c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_voidPrintSpecialChar>
   CLC_voidInit(DIO_PORTC,DIO_PORTC);
    3f20:	82 e0       	ldi	r24, 0x02	; 2
    3f22:	62 e0       	ldi	r22, 0x02	; 2
    3f24:	0e 94 ca 18 	call	0x3194	; 0x3194 <CLC_voidInit>
   u8 Local_u8PressedKey=0;
    3f28:	18 8a       	std	Y+16, r1	; 0x10
   u8 Negative_Sign=0;
    3f2a:	1f 86       	std	Y+15, r1	; 0x0f
   u8 number_added=0;
    3f2c:	1e 86       	std	Y+14, r1	; 0x0e
   u8 invalid_operation=0;
    3f2e:	1d 86       	std	Y+13, r1	; 0x0d
   u8 divide_by_zero=0;
    3f30:	1c 86       	std	Y+12, r1	; 0x0c
    3f32:	05 c0       	rjmp	.+10     	; 0x3f3e <main+0x3c>
   while(1){
      //wait for on_clc button to be pressed
	   while(Local_u8PressedKey!=ON_CLC)
	        {
	            Local_u8PressedKey=CLC_u8GetPressedKey(DIO_PORTC,DIO_PORTC);
    3f34:	82 e0       	ldi	r24, 0x02	; 2
    3f36:	62 e0       	ldi	r22, 0x02	; 2
    3f38:	0e 94 26 19 	call	0x324c	; 0x324c <CLC_u8GetPressedKey>
    3f3c:	88 8b       	std	Y+16, r24	; 0x10
   u8 number_added=0;
   u8 invalid_operation=0;
   u8 divide_by_zero=0;
   while(1){
      //wait for on_clc button to be pressed
	   while(Local_u8PressedKey!=ON_CLC)
    3f3e:	88 89       	ldd	r24, Y+16	; 0x10
    3f40:	8f 30       	cpi	r24, 0x0F	; 15
    3f42:	c1 f7       	brne	.-16     	; 0x3f34 <main+0x32>
	            Local_u8PressedKey=CLC_u8GetPressedKey(DIO_PORTC,DIO_PORTC);

	        }


  LCD_voidClearDisplay();
    3f44:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <LCD_voidClearDisplay>

  u8 expression[255]={};
    3f48:	8f ef       	ldi	r24, 0xFF	; 255
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	71 96       	adiw	r30, 0x11	; 17
    3f4e:	df 01       	movw	r26, r30
    3f50:	48 2f       	mov	r20, r24
    3f52:	1d 92       	st	X+, r1
    3f54:	4a 95       	dec	r20
    3f56:	e9 f7       	brne	.-6      	; 0x3f52 <main+0x50>
   u32 number=0;
    3f58:	1b 86       	std	Y+11, r1	; 0x0b
    3f5a:	1a 86       	std	Y+10, r1	; 0x0a
   u8 i=0;
    3f5c:	19 86       	std	Y+9, r1	; 0x09
    3f5e:	90 c1       	rjmp	.+800    	; 0x4280 <main+0x37e>

while(Local_u8PressedKey!=EQU)
    {

        //get pressed key
        Local_u8PressedKey=CLC_u8GetPressedKey(DIO_PORTC,DIO_PORTC);
    3f60:	82 e0       	ldi	r24, 0x02	; 2
    3f62:	62 e0       	ldi	r22, 0x02	; 2
    3f64:	0e 94 26 19 	call	0x324c	; 0x324c <CLC_u8GetPressedKey>
    3f68:	88 8b       	std	Y+16, r24	; 0x10
    
              //if pressed key is a number
                if(Local_u8PressedKey!=DIV && Local_u8PressedKey!=MUL && Local_u8PressedKey!=SUB && Local_u8PressedKey!=ADD && Local_u8PressedKey!=EQU)
    3f6a:	88 89       	ldd	r24, Y+16	; 0x10
    3f6c:	8a 30       	cpi	r24, 0x0A	; 10
    3f6e:	09 f4       	brne	.+2      	; 0x3f72 <main+0x70>
    3f70:	47 c0       	rjmp	.+142    	; 0x4000 <main+0xfe>
    3f72:	88 89       	ldd	r24, Y+16	; 0x10
    3f74:	8b 30       	cpi	r24, 0x0B	; 11
    3f76:	09 f4       	brne	.+2      	; 0x3f7a <main+0x78>
    3f78:	43 c0       	rjmp	.+134    	; 0x4000 <main+0xfe>
    3f7a:	88 89       	ldd	r24, Y+16	; 0x10
    3f7c:	8c 30       	cpi	r24, 0x0C	; 12
    3f7e:	09 f4       	brne	.+2      	; 0x3f82 <main+0x80>
    3f80:	3f c0       	rjmp	.+126    	; 0x4000 <main+0xfe>
    3f82:	88 89       	ldd	r24, Y+16	; 0x10
    3f84:	8d 30       	cpi	r24, 0x0D	; 13
    3f86:	e1 f1       	breq	.+120    	; 0x4000 <main+0xfe>
    3f88:	88 89       	ldd	r24, Y+16	; 0x10
    3f8a:	8e 30       	cpi	r24, 0x0E	; 14
    3f8c:	c9 f1       	breq	.+114    	; 0x4000 <main+0xfe>
                {
                    //convert pressed key to number
                    number=number*10+Local_u8PressedKey;
    3f8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f90:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f92:	9c 01       	movw	r18, r24
    3f94:	22 0f       	add	r18, r18
    3f96:	33 1f       	adc	r19, r19
    3f98:	c9 01       	movw	r24, r18
    3f9a:	88 0f       	add	r24, r24
    3f9c:	99 1f       	adc	r25, r25
    3f9e:	88 0f       	add	r24, r24
    3fa0:	99 1f       	adc	r25, r25
    3fa2:	28 0f       	add	r18, r24
    3fa4:	39 1f       	adc	r19, r25
    3fa6:	88 89       	ldd	r24, Y+16	; 0x10
    3fa8:	88 2f       	mov	r24, r24
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	82 0f       	add	r24, r18
    3fae:	93 1f       	adc	r25, r19
    3fb0:	9b 87       	std	Y+11, r25	; 0x0b
    3fb2:	8a 87       	std	Y+10, r24	; 0x0a
                    if(number==0){
    3fb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fb8:	00 97       	sbiw	r24, 0x00	; 0
    3fba:	d1 f4       	brne	.+52     	; 0x3ff0 <main+0xee>
                        //add zero to expression
                        expression[i]='0';
    3fbc:	89 85       	ldd	r24, Y+9	; 0x09
    3fbe:	28 2f       	mov	r18, r24
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	ce 01       	movw	r24, r28
    3fc4:	41 96       	adiw	r24, 0x11	; 17
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	e2 0f       	add	r30, r18
    3fca:	f3 1f       	adc	r31, r19
    3fcc:	80 e3       	ldi	r24, 0x30	; 48
    3fce:	80 83       	st	Z, r24
                        i++;
    3fd0:	89 85       	ldd	r24, Y+9	; 0x09
    3fd2:	8f 5f       	subi	r24, 0xFF	; 255
    3fd4:	89 87       	std	Y+9, r24	; 0x09
                        //add space to expression
                        expression[i]=' ';
    3fd6:	89 85       	ldd	r24, Y+9	; 0x09
    3fd8:	28 2f       	mov	r18, r24
    3fda:	30 e0       	ldi	r19, 0x00	; 0
    3fdc:	ce 01       	movw	r24, r28
    3fde:	41 96       	adiw	r24, 0x11	; 17
    3fe0:	fc 01       	movw	r30, r24
    3fe2:	e2 0f       	add	r30, r18
    3fe4:	f3 1f       	adc	r31, r19
    3fe6:	80 e2       	ldi	r24, 0x20	; 32
    3fe8:	80 83       	st	Z, r24
                        i++;
    3fea:	89 85       	ldd	r24, Y+9	; 0x09
    3fec:	8f 5f       	subi	r24, 0xFF	; 255
    3fee:	89 87       	std	Y+9, r24	; 0x09
                    }
                    //display number on lcd
                    LCD_voidSendNumber(Local_u8PressedKey);
    3ff0:	88 89       	ldd	r24, Y+16	; 0x10
    3ff2:	88 2f       	mov	r24, r24
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <LCD_voidSendNumber>
                    number_added=1;
    3ffa:	81 e0       	ldi	r24, 0x01	; 1
    3ffc:	8e 87       	std	Y+14, r24	; 0x0e
    3ffe:	40 c1       	rjmp	.+640    	; 0x4280 <main+0x37e>
                }

                else if ((Local_u8PressedKey==DIV || Local_u8PressedKey==MUL || Local_u8PressedKey==SUB || Local_u8PressedKey==ADD)&& Local_u8PressedKey!=EQU)
    4000:	88 89       	ldd	r24, Y+16	; 0x10
    4002:	8a 30       	cpi	r24, 0x0A	; 10
    4004:	51 f0       	breq	.+20     	; 0x401a <main+0x118>
    4006:	88 89       	ldd	r24, Y+16	; 0x10
    4008:	8b 30       	cpi	r24, 0x0B	; 11
    400a:	39 f0       	breq	.+14     	; 0x401a <main+0x118>
    400c:	88 89       	ldd	r24, Y+16	; 0x10
    400e:	8c 30       	cpi	r24, 0x0C	; 12
    4010:	21 f0       	breq	.+8      	; 0x401a <main+0x118>
    4012:	88 89       	ldd	r24, Y+16	; 0x10
    4014:	8d 30       	cpi	r24, 0x0D	; 13
    4016:	09 f0       	breq	.+2      	; 0x401a <main+0x118>
    4018:	33 c1       	rjmp	.+614    	; 0x4280 <main+0x37e>
    401a:	88 89       	ldd	r24, Y+16	; 0x10
    401c:	8e 30       	cpi	r24, 0x0E	; 14
    401e:	09 f4       	brne	.+2      	; 0x4022 <main+0x120>
    4020:	2f c1       	rjmp	.+606    	; 0x4280 <main+0x37e>
                    {
                    //change number to string
                    if(number_added==1)
    4022:	8e 85       	ldd	r24, Y+14	; 0x0e
    4024:	81 30       	cpi	r24, 0x01	; 1
    4026:	09 f0       	breq	.+2      	; 0x402a <main+0x128>
    4028:	a6 c0       	rjmp	.+332    	; 0x4176 <main+0x274>
                    {
                        u8 temp[255]={};
    402a:	ce 01       	movw	r24, r28
    402c:	80 5f       	subi	r24, 0xF0	; 240
    402e:	9e 4f       	sbci	r25, 0xFE	; 254
    4030:	2f ef       	ldi	r18, 0xFF	; 255
    4032:	fc 01       	movw	r30, r24
    4034:	df 01       	movw	r26, r30
    4036:	42 2f       	mov	r20, r18
    4038:	1d 92       	st	X+, r1
    403a:	4a 95       	dec	r20
    403c:	e9 f7       	brne	.-6      	; 0x4038 <main+0x136>
                        u8 k=0;
    403e:	18 86       	std	Y+8, r1	; 0x08
    4040:	1f c0       	rjmp	.+62     	; 0x4080 <main+0x17e>
                        while(number!=0){
                            temp[k]=number%10+'0';
    4042:	88 85       	ldd	r24, Y+8	; 0x08
    4044:	e8 2f       	mov	r30, r24
    4046:	f0 e0       	ldi	r31, 0x00	; 0
    4048:	8a 85       	ldd	r24, Y+10	; 0x0a
    404a:	9b 85       	ldd	r25, Y+11	; 0x0b
    404c:	2a e0       	ldi	r18, 0x0A	; 10
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	b9 01       	movw	r22, r18
    4052:	0e 94 05 22 	call	0x440a	; 0x440a <__udivmodhi4>
    4056:	28 2f       	mov	r18, r24
    4058:	20 5d       	subi	r18, 0xD0	; 208
    405a:	ce 01       	movw	r24, r28
    405c:	80 5f       	subi	r24, 0xF0	; 240
    405e:	9e 4f       	sbci	r25, 0xFE	; 254
    4060:	e8 0f       	add	r30, r24
    4062:	f9 1f       	adc	r31, r25
    4064:	20 83       	st	Z, r18
                            number/=10;
    4066:	8a 85       	ldd	r24, Y+10	; 0x0a
    4068:	9b 85       	ldd	r25, Y+11	; 0x0b
    406a:	2a e0       	ldi	r18, 0x0A	; 10
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	b9 01       	movw	r22, r18
    4070:	0e 94 05 22 	call	0x440a	; 0x440a <__udivmodhi4>
    4074:	cb 01       	movw	r24, r22
    4076:	9b 87       	std	Y+11, r25	; 0x0b
    4078:	8a 87       	std	Y+10, r24	; 0x0a
                            k++;         
    407a:	88 85       	ldd	r24, Y+8	; 0x08
    407c:	8f 5f       	subi	r24, 0xFF	; 255
    407e:	88 87       	std	Y+8, r24	; 0x08
                    //change number to string
                    if(number_added==1)
                    {
                        u8 temp[255]={};
                        u8 k=0;
                        while(number!=0){
    4080:	8a 85       	ldd	r24, Y+10	; 0x0a
    4082:	9b 85       	ldd	r25, Y+11	; 0x0b
    4084:	00 97       	sbiw	r24, 0x00	; 0
    4086:	e9 f6       	brne	.-70     	; 0x4042 <main+0x140>
                            temp[k]=number%10+'0';
                            number/=10;
                            k++;         
                        }
                        //reverse temp string
                        for(u8 j=0;j<k/2;j++){
    4088:	1f 82       	std	Y+7, r1	; 0x07
    408a:	41 c0       	rjmp	.+130    	; 0x410e <main+0x20c>
                            u8 temp2=temp[j];
    408c:	8f 81       	ldd	r24, Y+7	; 0x07
    408e:	28 2f       	mov	r18, r24
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	ce 01       	movw	r24, r28
    4094:	80 5f       	subi	r24, 0xF0	; 240
    4096:	9e 4f       	sbci	r25, 0xFE	; 254
    4098:	fc 01       	movw	r30, r24
    409a:	e2 0f       	add	r30, r18
    409c:	f3 1f       	adc	r31, r19
    409e:	80 81       	ld	r24, Z
    40a0:	8e 83       	std	Y+6, r24	; 0x06
                            temp[j]=temp[k-j-1];
    40a2:	8f 81       	ldd	r24, Y+7	; 0x07
    40a4:	48 2f       	mov	r20, r24
    40a6:	50 e0       	ldi	r21, 0x00	; 0
    40a8:	88 85       	ldd	r24, Y+8	; 0x08
    40aa:	28 2f       	mov	r18, r24
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	8f 81       	ldd	r24, Y+7	; 0x07
    40b0:	88 2f       	mov	r24, r24
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	b9 01       	movw	r22, r18
    40b6:	68 1b       	sub	r22, r24
    40b8:	79 0b       	sbc	r23, r25
    40ba:	cb 01       	movw	r24, r22
    40bc:	9c 01       	movw	r18, r24
    40be:	21 50       	subi	r18, 0x01	; 1
    40c0:	30 40       	sbci	r19, 0x00	; 0
    40c2:	ce 01       	movw	r24, r28
    40c4:	80 5f       	subi	r24, 0xF0	; 240
    40c6:	9e 4f       	sbci	r25, 0xFE	; 254
    40c8:	fc 01       	movw	r30, r24
    40ca:	e2 0f       	add	r30, r18
    40cc:	f3 1f       	adc	r31, r19
    40ce:	20 81       	ld	r18, Z
    40d0:	ce 01       	movw	r24, r28
    40d2:	80 5f       	subi	r24, 0xF0	; 240
    40d4:	9e 4f       	sbci	r25, 0xFE	; 254
    40d6:	fc 01       	movw	r30, r24
    40d8:	e4 0f       	add	r30, r20
    40da:	f5 1f       	adc	r31, r21
    40dc:	20 83       	st	Z, r18
                            temp[k-j-1]=temp2;
    40de:	88 85       	ldd	r24, Y+8	; 0x08
    40e0:	28 2f       	mov	r18, r24
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	8f 81       	ldd	r24, Y+7	; 0x07
    40e6:	88 2f       	mov	r24, r24
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	d9 01       	movw	r26, r18
    40ec:	a8 1b       	sub	r26, r24
    40ee:	b9 0b       	sbc	r27, r25
    40f0:	cd 01       	movw	r24, r26
    40f2:	9c 01       	movw	r18, r24
    40f4:	21 50       	subi	r18, 0x01	; 1
    40f6:	30 40       	sbci	r19, 0x00	; 0
    40f8:	ce 01       	movw	r24, r28
    40fa:	80 5f       	subi	r24, 0xF0	; 240
    40fc:	9e 4f       	sbci	r25, 0xFE	; 254
    40fe:	fc 01       	movw	r30, r24
    4100:	e2 0f       	add	r30, r18
    4102:	f3 1f       	adc	r31, r19
    4104:	8e 81       	ldd	r24, Y+6	; 0x06
    4106:	80 83       	st	Z, r24
                            temp[k]=number%10+'0';
                            number/=10;
                            k++;         
                        }
                        //reverse temp string
                        for(u8 j=0;j<k/2;j++){
    4108:	8f 81       	ldd	r24, Y+7	; 0x07
    410a:	8f 5f       	subi	r24, 0xFF	; 255
    410c:	8f 83       	std	Y+7, r24	; 0x07
    410e:	88 85       	ldd	r24, Y+8	; 0x08
    4110:	98 2f       	mov	r25, r24
    4112:	96 95       	lsr	r25
    4114:	8f 81       	ldd	r24, Y+7	; 0x07
    4116:	89 17       	cp	r24, r25
    4118:	08 f4       	brcc	.+2      	; 0x411c <main+0x21a>
    411a:	b8 cf       	rjmp	.-144    	; 0x408c <main+0x18a>
                            u8 temp2=temp[j];
                            temp[j]=temp[k-j-1];
                            temp[k-j-1]=temp2;
                            }
                        //add temp string to expression
                        for(u8 j=0;j<k;j++){
    411c:	1d 82       	std	Y+5, r1	; 0x05
    411e:	19 c0       	rjmp	.+50     	; 0x4152 <main+0x250>
                            expression[i]=temp[j];
    4120:	89 85       	ldd	r24, Y+9	; 0x09
    4122:	48 2f       	mov	r20, r24
    4124:	50 e0       	ldi	r21, 0x00	; 0
    4126:	8d 81       	ldd	r24, Y+5	; 0x05
    4128:	28 2f       	mov	r18, r24
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	ce 01       	movw	r24, r28
    412e:	80 5f       	subi	r24, 0xF0	; 240
    4130:	9e 4f       	sbci	r25, 0xFE	; 254
    4132:	fc 01       	movw	r30, r24
    4134:	e2 0f       	add	r30, r18
    4136:	f3 1f       	adc	r31, r19
    4138:	20 81       	ld	r18, Z
    413a:	ce 01       	movw	r24, r28
    413c:	41 96       	adiw	r24, 0x11	; 17
    413e:	fc 01       	movw	r30, r24
    4140:	e4 0f       	add	r30, r20
    4142:	f5 1f       	adc	r31, r21
    4144:	20 83       	st	Z, r18
                            i++;
    4146:	89 85       	ldd	r24, Y+9	; 0x09
    4148:	8f 5f       	subi	r24, 0xFF	; 255
    414a:	89 87       	std	Y+9, r24	; 0x09
                            u8 temp2=temp[j];
                            temp[j]=temp[k-j-1];
                            temp[k-j-1]=temp2;
                            }
                        //add temp string to expression
                        for(u8 j=0;j<k;j++){
    414c:	8d 81       	ldd	r24, Y+5	; 0x05
    414e:	8f 5f       	subi	r24, 0xFF	; 255
    4150:	8d 83       	std	Y+5, r24	; 0x05
    4152:	9d 81       	ldd	r25, Y+5	; 0x05
    4154:	88 85       	ldd	r24, Y+8	; 0x08
    4156:	98 17       	cp	r25, r24
    4158:	18 f3       	brcs	.-58     	; 0x4120 <main+0x21e>
                            expression[i]=temp[j];
                            i++;
                        }
                            //add space to expression
                                expression[i]=' ';
    415a:	89 85       	ldd	r24, Y+9	; 0x09
    415c:	28 2f       	mov	r18, r24
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	ce 01       	movw	r24, r28
    4162:	41 96       	adiw	r24, 0x11	; 17
    4164:	fc 01       	movw	r30, r24
    4166:	e2 0f       	add	r30, r18
    4168:	f3 1f       	adc	r31, r19
    416a:	80 e2       	ldi	r24, 0x20	; 32
    416c:	80 83       	st	Z, r24
                                i++;
    416e:	89 85       	ldd	r24, Y+9	; 0x09
    4170:	8f 5f       	subi	r24, 0xFF	; 255
    4172:	89 87       	std	Y+9, r24	; 0x09
                                number_added=0;
    4174:	1e 86       	std	Y+14, r1	; 0x0e
                    }


                        //if pressed key is an operation character
                        if(Local_u8PressedKey==DIV)
    4176:	88 89       	ldd	r24, Y+16	; 0x10
    4178:	8a 30       	cpi	r24, 0x0A	; 10
    417a:	f1 f4       	brne	.+60     	; 0x41b8 <main+0x2b6>
                        {
                            expression[i]='/';
    417c:	89 85       	ldd	r24, Y+9	; 0x09
    417e:	28 2f       	mov	r18, r24
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	ce 01       	movw	r24, r28
    4184:	41 96       	adiw	r24, 0x11	; 17
    4186:	fc 01       	movw	r30, r24
    4188:	e2 0f       	add	r30, r18
    418a:	f3 1f       	adc	r31, r19
    418c:	8f e2       	ldi	r24, 0x2F	; 47
    418e:	80 83       	st	Z, r24
                            i++;
    4190:	89 85       	ldd	r24, Y+9	; 0x09
    4192:	8f 5f       	subi	r24, 0xFF	; 255
    4194:	89 87       	std	Y+9, r24	; 0x09
                            //add space to expression
                            expression[i]=' ';
    4196:	89 85       	ldd	r24, Y+9	; 0x09
    4198:	28 2f       	mov	r18, r24
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	ce 01       	movw	r24, r28
    419e:	41 96       	adiw	r24, 0x11	; 17
    41a0:	fc 01       	movw	r30, r24
    41a2:	e2 0f       	add	r30, r18
    41a4:	f3 1f       	adc	r31, r19
    41a6:	80 e2       	ldi	r24, 0x20	; 32
    41a8:	80 83       	st	Z, r24
                            i++;
    41aa:	89 85       	ldd	r24, Y+9	; 0x09
    41ac:	8f 5f       	subi	r24, 0xFF	; 255
    41ae:	89 87       	std	Y+9, r24	; 0x09
                            LCD_voidSendData(1);
    41b0:	81 e0       	ldi	r24, 0x01	; 1
    41b2:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_voidSendData>
    41b6:	62 c0       	rjmp	.+196    	; 0x427c <main+0x37a>
                        }
                        else if(Local_u8PressedKey==MUL)
    41b8:	88 89       	ldd	r24, Y+16	; 0x10
    41ba:	8b 30       	cpi	r24, 0x0B	; 11
    41bc:	f1 f4       	brne	.+60     	; 0x41fa <main+0x2f8>
                        {                                
                            expression[i]='*';
    41be:	89 85       	ldd	r24, Y+9	; 0x09
    41c0:	28 2f       	mov	r18, r24
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	ce 01       	movw	r24, r28
    41c6:	41 96       	adiw	r24, 0x11	; 17
    41c8:	fc 01       	movw	r30, r24
    41ca:	e2 0f       	add	r30, r18
    41cc:	f3 1f       	adc	r31, r19
    41ce:	8a e2       	ldi	r24, 0x2A	; 42
    41d0:	80 83       	st	Z, r24
                            i++;
    41d2:	89 85       	ldd	r24, Y+9	; 0x09
    41d4:	8f 5f       	subi	r24, 0xFF	; 255
    41d6:	89 87       	std	Y+9, r24	; 0x09
                            //add space to expression
                                expression[i]=' ';
    41d8:	89 85       	ldd	r24, Y+9	; 0x09
    41da:	28 2f       	mov	r18, r24
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	ce 01       	movw	r24, r28
    41e0:	41 96       	adiw	r24, 0x11	; 17
    41e2:	fc 01       	movw	r30, r24
    41e4:	e2 0f       	add	r30, r18
    41e6:	f3 1f       	adc	r31, r19
    41e8:	80 e2       	ldi	r24, 0x20	; 32
    41ea:	80 83       	st	Z, r24
                                i++;
    41ec:	89 85       	ldd	r24, Y+9	; 0x09
    41ee:	8f 5f       	subi	r24, 0xFF	; 255
    41f0:	89 87       	std	Y+9, r24	; 0x09
                            LCD_voidSendData(2);
    41f2:	82 e0       	ldi	r24, 0x02	; 2
    41f4:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_voidSendData>
    41f8:	41 c0       	rjmp	.+130    	; 0x427c <main+0x37a>
                        }
                        else if(Local_u8PressedKey==SUB)
    41fa:	88 89       	ldd	r24, Y+16	; 0x10
    41fc:	8c 30       	cpi	r24, 0x0C	; 12
    41fe:	f1 f4       	brne	.+60     	; 0x423c <main+0x33a>
                        {
                            // if(!isdigit(expression[i-2]))
                                expression[i]='-';
    4200:	89 85       	ldd	r24, Y+9	; 0x09
    4202:	28 2f       	mov	r18, r24
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	ce 01       	movw	r24, r28
    4208:	41 96       	adiw	r24, 0x11	; 17
    420a:	fc 01       	movw	r30, r24
    420c:	e2 0f       	add	r30, r18
    420e:	f3 1f       	adc	r31, r19
    4210:	8d e2       	ldi	r24, 0x2D	; 45
    4212:	80 83       	st	Z, r24
                                i++;
    4214:	89 85       	ldd	r24, Y+9	; 0x09
    4216:	8f 5f       	subi	r24, 0xFF	; 255
    4218:	89 87       	std	Y+9, r24	; 0x09
                             //add space to expression
                                expression[i]=' ';
    421a:	89 85       	ldd	r24, Y+9	; 0x09
    421c:	28 2f       	mov	r18, r24
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	ce 01       	movw	r24, r28
    4222:	41 96       	adiw	r24, 0x11	; 17
    4224:	fc 01       	movw	r30, r24
    4226:	e2 0f       	add	r30, r18
    4228:	f3 1f       	adc	r31, r19
    422a:	80 e2       	ldi	r24, 0x20	; 32
    422c:	80 83       	st	Z, r24
                                i++;
    422e:	89 85       	ldd	r24, Y+9	; 0x09
    4230:	8f 5f       	subi	r24, 0xFF	; 255
    4232:	89 87       	std	Y+9, r24	; 0x09
                            LCD_voidSendData(3);
    4234:	83 e0       	ldi	r24, 0x03	; 3
    4236:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_voidSendData>
    423a:	20 c0       	rjmp	.+64     	; 0x427c <main+0x37a>
                        }
                        else if(Local_u8PressedKey==ADD)
    423c:	88 89       	ldd	r24, Y+16	; 0x10
    423e:	8d 30       	cpi	r24, 0x0D	; 13
    4240:	e9 f4       	brne	.+58     	; 0x427c <main+0x37a>
                        {       
                            expression[i]='+';
    4242:	89 85       	ldd	r24, Y+9	; 0x09
    4244:	28 2f       	mov	r18, r24
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	ce 01       	movw	r24, r28
    424a:	41 96       	adiw	r24, 0x11	; 17
    424c:	fc 01       	movw	r30, r24
    424e:	e2 0f       	add	r30, r18
    4250:	f3 1f       	adc	r31, r19
    4252:	8b e2       	ldi	r24, 0x2B	; 43
    4254:	80 83       	st	Z, r24
                            i++;
    4256:	89 85       	ldd	r24, Y+9	; 0x09
    4258:	8f 5f       	subi	r24, 0xFF	; 255
    425a:	89 87       	std	Y+9, r24	; 0x09
                            //add space to expression
                            expression[i]=' ';
    425c:	89 85       	ldd	r24, Y+9	; 0x09
    425e:	28 2f       	mov	r18, r24
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	ce 01       	movw	r24, r28
    4264:	41 96       	adiw	r24, 0x11	; 17
    4266:	fc 01       	movw	r30, r24
    4268:	e2 0f       	add	r30, r18
    426a:	f3 1f       	adc	r31, r19
    426c:	80 e2       	ldi	r24, 0x20	; 32
    426e:	80 83       	st	Z, r24
                            i++;
    4270:	89 85       	ldd	r24, Y+9	; 0x09
    4272:	8f 5f       	subi	r24, 0xFF	; 255
    4274:	89 87       	std	Y+9, r24	; 0x09
                            LCD_voidSendData(0);
    4276:	80 e0       	ldi	r24, 0x00	; 0
    4278:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_voidSendData>
                        }
                     number=0;
    427c:	1b 86       	std	Y+11, r1	; 0x0b
    427e:	1a 86       	std	Y+10, r1	; 0x0a

   //wait for on_clc button to be pressed

   //clear lcd

while(Local_u8PressedKey!=EQU)
    4280:	88 89       	ldd	r24, Y+16	; 0x10
    4282:	8e 30       	cpi	r24, 0x0E	; 14
    4284:	09 f0       	breq	.+2      	; 0x4288 <main+0x386>
    4286:	6c ce       	rjmp	.-808    	; 0x3f60 <main+0x5e>


    //if pressed key is equal

    //add last number in expression
    if(number !=0)
    4288:	8a 85       	ldd	r24, Y+10	; 0x0a
    428a:	9b 85       	ldd	r25, Y+11	; 0x0b
    428c:	00 97       	sbiw	r24, 0x00	; 0
    428e:	09 f4       	brne	.+2      	; 0x4292 <main+0x390>
    4290:	a6 c0       	rjmp	.+332    	; 0x43de <main+0x4dc>
    {
        u8 temp[255]={};
    4292:	ce 01       	movw	r24, r28
    4294:	80 5f       	subi	r24, 0xF0	; 240
    4296:	9e 4f       	sbci	r25, 0xFE	; 254
    4298:	2f ef       	ldi	r18, 0xFF	; 255
    429a:	fc 01       	movw	r30, r24
    429c:	df 01       	movw	r26, r30
    429e:	42 2f       	mov	r20, r18
    42a0:	1d 92       	st	X+, r1
    42a2:	4a 95       	dec	r20
    42a4:	e9 f7       	brne	.-6      	; 0x42a0 <main+0x39e>
        u8 j=0;
    42a6:	1c 82       	std	Y+4, r1	; 0x04
    42a8:	1f c0       	rjmp	.+62     	; 0x42e8 <main+0x3e6>
         while(number!=0)
         {
          
            temp[j]=number%10+'0';
    42aa:	8c 81       	ldd	r24, Y+4	; 0x04
    42ac:	e8 2f       	mov	r30, r24
    42ae:	f0 e0       	ldi	r31, 0x00	; 0
    42b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    42b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    42b4:	2a e0       	ldi	r18, 0x0A	; 10
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	b9 01       	movw	r22, r18
    42ba:	0e 94 05 22 	call	0x440a	; 0x440a <__udivmodhi4>
    42be:	28 2f       	mov	r18, r24
    42c0:	20 5d       	subi	r18, 0xD0	; 208
    42c2:	ce 01       	movw	r24, r28
    42c4:	80 5f       	subi	r24, 0xF0	; 240
    42c6:	9e 4f       	sbci	r25, 0xFE	; 254
    42c8:	e8 0f       	add	r30, r24
    42ca:	f9 1f       	adc	r31, r25
    42cc:	20 83       	st	Z, r18
            number/=10;
    42ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    42d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    42d2:	2a e0       	ldi	r18, 0x0A	; 10
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	b9 01       	movw	r22, r18
    42d8:	0e 94 05 22 	call	0x440a	; 0x440a <__udivmodhi4>
    42dc:	cb 01       	movw	r24, r22
    42de:	9b 87       	std	Y+11, r25	; 0x0b
    42e0:	8a 87       	std	Y+10, r24	; 0x0a
            j++;
    42e2:	8c 81       	ldd	r24, Y+4	; 0x04
    42e4:	8f 5f       	subi	r24, 0xFF	; 255
    42e6:	8c 83       	std	Y+4, r24	; 0x04
    //add last number in expression
    if(number !=0)
    {
        u8 temp[255]={};
        u8 j=0;
         while(number!=0)
    42e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    42ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    42ec:	00 97       	sbiw	r24, 0x00	; 0
    42ee:	e9 f6       	brne	.-70     	; 0x42aa <main+0x3a8>
            temp[j]=number%10+'0';
            number/=10;
            j++;
         }
         //reverse temp string
            for(u8 k=0;k<j/2;k++)
    42f0:	1b 82       	std	Y+3, r1	; 0x03
    42f2:	41 c0       	rjmp	.+130    	; 0x4376 <main+0x474>
            {
                u8 temp2=temp[k];
    42f4:	8b 81       	ldd	r24, Y+3	; 0x03
    42f6:	28 2f       	mov	r18, r24
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	ce 01       	movw	r24, r28
    42fc:	80 5f       	subi	r24, 0xF0	; 240
    42fe:	9e 4f       	sbci	r25, 0xFE	; 254
    4300:	fc 01       	movw	r30, r24
    4302:	e2 0f       	add	r30, r18
    4304:	f3 1f       	adc	r31, r19
    4306:	80 81       	ld	r24, Z
    4308:	8a 83       	std	Y+2, r24	; 0x02
                temp[k]=temp[j-k-1];
    430a:	8b 81       	ldd	r24, Y+3	; 0x03
    430c:	48 2f       	mov	r20, r24
    430e:	50 e0       	ldi	r21, 0x00	; 0
    4310:	8c 81       	ldd	r24, Y+4	; 0x04
    4312:	28 2f       	mov	r18, r24
    4314:	30 e0       	ldi	r19, 0x00	; 0
    4316:	8b 81       	ldd	r24, Y+3	; 0x03
    4318:	88 2f       	mov	r24, r24
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	b9 01       	movw	r22, r18
    431e:	68 1b       	sub	r22, r24
    4320:	79 0b       	sbc	r23, r25
    4322:	cb 01       	movw	r24, r22
    4324:	9c 01       	movw	r18, r24
    4326:	21 50       	subi	r18, 0x01	; 1
    4328:	30 40       	sbci	r19, 0x00	; 0
    432a:	ce 01       	movw	r24, r28
    432c:	80 5f       	subi	r24, 0xF0	; 240
    432e:	9e 4f       	sbci	r25, 0xFE	; 254
    4330:	fc 01       	movw	r30, r24
    4332:	e2 0f       	add	r30, r18
    4334:	f3 1f       	adc	r31, r19
    4336:	20 81       	ld	r18, Z
    4338:	ce 01       	movw	r24, r28
    433a:	80 5f       	subi	r24, 0xF0	; 240
    433c:	9e 4f       	sbci	r25, 0xFE	; 254
    433e:	fc 01       	movw	r30, r24
    4340:	e4 0f       	add	r30, r20
    4342:	f5 1f       	adc	r31, r21
    4344:	20 83       	st	Z, r18
                temp[j-k-1]=temp2;
    4346:	8c 81       	ldd	r24, Y+4	; 0x04
    4348:	28 2f       	mov	r18, r24
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	8b 81       	ldd	r24, Y+3	; 0x03
    434e:	88 2f       	mov	r24, r24
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	d9 01       	movw	r26, r18
    4354:	a8 1b       	sub	r26, r24
    4356:	b9 0b       	sbc	r27, r25
    4358:	cd 01       	movw	r24, r26
    435a:	9c 01       	movw	r18, r24
    435c:	21 50       	subi	r18, 0x01	; 1
    435e:	30 40       	sbci	r19, 0x00	; 0
    4360:	ce 01       	movw	r24, r28
    4362:	80 5f       	subi	r24, 0xF0	; 240
    4364:	9e 4f       	sbci	r25, 0xFE	; 254
    4366:	fc 01       	movw	r30, r24
    4368:	e2 0f       	add	r30, r18
    436a:	f3 1f       	adc	r31, r19
    436c:	8a 81       	ldd	r24, Y+2	; 0x02
    436e:	80 83       	st	Z, r24
            temp[j]=number%10+'0';
            number/=10;
            j++;
         }
         //reverse temp string
            for(u8 k=0;k<j/2;k++)
    4370:	8b 81       	ldd	r24, Y+3	; 0x03
    4372:	8f 5f       	subi	r24, 0xFF	; 255
    4374:	8b 83       	std	Y+3, r24	; 0x03
    4376:	8c 81       	ldd	r24, Y+4	; 0x04
    4378:	98 2f       	mov	r25, r24
    437a:	96 95       	lsr	r25
    437c:	8b 81       	ldd	r24, Y+3	; 0x03
    437e:	89 17       	cp	r24, r25
    4380:	08 f4       	brcc	.+2      	; 0x4384 <main+0x482>
    4382:	b8 cf       	rjmp	.-144    	; 0x42f4 <main+0x3f2>
                u8 temp2=temp[k];
                temp[k]=temp[j-k-1];
                temp[j-k-1]=temp2;
            }
                //add space to expression
                    temp[j]=' ';
    4384:	8c 81       	ldd	r24, Y+4	; 0x04
    4386:	28 2f       	mov	r18, r24
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	ce 01       	movw	r24, r28
    438c:	80 5f       	subi	r24, 0xF0	; 240
    438e:	9e 4f       	sbci	r25, 0xFE	; 254
    4390:	fc 01       	movw	r30, r24
    4392:	e2 0f       	add	r30, r18
    4394:	f3 1f       	adc	r31, r19
    4396:	80 e2       	ldi	r24, 0x20	; 32
    4398:	80 83       	st	Z, r24
                    j++;
    439a:	8c 81       	ldd	r24, Y+4	; 0x04
    439c:	8f 5f       	subi	r24, 0xFF	; 255
    439e:	8c 83       	std	Y+4, r24	; 0x04

        //add temp string to expression
        for(u8 k=0;k<j;k++)
    43a0:	19 82       	std	Y+1, r1	; 0x01
    43a2:	19 c0       	rjmp	.+50     	; 0x43d6 <main+0x4d4>
        {
            expression[i]=temp[k];
    43a4:	89 85       	ldd	r24, Y+9	; 0x09
    43a6:	48 2f       	mov	r20, r24
    43a8:	50 e0       	ldi	r21, 0x00	; 0
    43aa:	89 81       	ldd	r24, Y+1	; 0x01
    43ac:	28 2f       	mov	r18, r24
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	ce 01       	movw	r24, r28
    43b2:	80 5f       	subi	r24, 0xF0	; 240
    43b4:	9e 4f       	sbci	r25, 0xFE	; 254
    43b6:	fc 01       	movw	r30, r24
    43b8:	e2 0f       	add	r30, r18
    43ba:	f3 1f       	adc	r31, r19
    43bc:	20 81       	ld	r18, Z
    43be:	ce 01       	movw	r24, r28
    43c0:	41 96       	adiw	r24, 0x11	; 17
    43c2:	fc 01       	movw	r30, r24
    43c4:	e4 0f       	add	r30, r20
    43c6:	f5 1f       	adc	r31, r21
    43c8:	20 83       	st	Z, r18
            i++;
    43ca:	89 85       	ldd	r24, Y+9	; 0x09
    43cc:	8f 5f       	subi	r24, 0xFF	; 255
    43ce:	89 87       	std	Y+9, r24	; 0x09
                //add space to expression
                    temp[j]=' ';
                    j++;

        //add temp string to expression
        for(u8 k=0;k<j;k++)
    43d0:	89 81       	ldd	r24, Y+1	; 0x01
    43d2:	8f 5f       	subi	r24, 0xFF	; 255
    43d4:	89 83       	std	Y+1, r24	; 0x01
    43d6:	99 81       	ldd	r25, Y+1	; 0x01
    43d8:	8c 81       	ldd	r24, Y+4	; 0x04
    43da:	98 17       	cp	r25, r24
    43dc:	18 f3       	brcs	.-58     	; 0x43a4 <main+0x4a2>
    //         LCD_voidSendString("Syntax Error");
    //         invalid_operation=1;
    //     }

//check if expression is valid
invalid_operation=isValidOperation(expression);
    43de:	ce 01       	movw	r24, r28
    43e0:	41 96       	adiw	r24, 0x11	; 17
    43e2:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <isValidOperation>
    43e6:	8d 87       	std	Y+13, r24	; 0x0d

     if(!invalid_operation){
    43e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    43ea:	88 23       	and	r24, r24
    43ec:	29 f4       	brne	.+10     	; 0x43f8 <main+0x4f6>
   CalculateResult(expression);
    43ee:	ce 01       	movw	r24, r28
    43f0:	41 96       	adiw	r24, 0x11	; 17
    43f2:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <CalculateResult>
    43f6:	a3 cd       	rjmp	.-1210   	; 0x3f3e <main+0x3c>
    // LCD_voidGoToXY(1,0);
    // LCD_voidSendString(expression);

     }
     else{
        LCD_voidGoToXY(1,0);
    43f8:	81 e0       	ldi	r24, 0x01	; 1
    43fa:	60 e0       	ldi	r22, 0x00	; 0
    43fc:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <LCD_voidGoToXY>
        LCD_voidSendString("Syntax Error");
    4400:	82 e6       	ldi	r24, 0x62	; 98
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <LCD_voidSendString>
    4408:	9a cd       	rjmp	.-1228   	; 0x3f3e <main+0x3c>

0000440a <__udivmodhi4>:
    440a:	aa 1b       	sub	r26, r26
    440c:	bb 1b       	sub	r27, r27
    440e:	51 e1       	ldi	r21, 0x11	; 17
    4410:	07 c0       	rjmp	.+14     	; 0x4420 <__udivmodhi4_ep>

00004412 <__udivmodhi4_loop>:
    4412:	aa 1f       	adc	r26, r26
    4414:	bb 1f       	adc	r27, r27
    4416:	a6 17       	cp	r26, r22
    4418:	b7 07       	cpc	r27, r23
    441a:	10 f0       	brcs	.+4      	; 0x4420 <__udivmodhi4_ep>
    441c:	a6 1b       	sub	r26, r22
    441e:	b7 0b       	sbc	r27, r23

00004420 <__udivmodhi4_ep>:
    4420:	88 1f       	adc	r24, r24
    4422:	99 1f       	adc	r25, r25
    4424:	5a 95       	dec	r21
    4426:	a9 f7       	brne	.-22     	; 0x4412 <__udivmodhi4_loop>
    4428:	80 95       	com	r24
    442a:	90 95       	com	r25
    442c:	bc 01       	movw	r22, r24
    442e:	cd 01       	movw	r24, r26
    4430:	08 95       	ret

00004432 <__divmodhi4>:
    4432:	97 fb       	bst	r25, 7
    4434:	09 2e       	mov	r0, r25
    4436:	07 26       	eor	r0, r23
    4438:	0a d0       	rcall	.+20     	; 0x444e <__divmodhi4_neg1>
    443a:	77 fd       	sbrc	r23, 7
    443c:	04 d0       	rcall	.+8      	; 0x4446 <__divmodhi4_neg2>
    443e:	e5 df       	rcall	.-54     	; 0x440a <__udivmodhi4>
    4440:	06 d0       	rcall	.+12     	; 0x444e <__divmodhi4_neg1>
    4442:	00 20       	and	r0, r0
    4444:	1a f4       	brpl	.+6      	; 0x444c <__divmodhi4_exit>

00004446 <__divmodhi4_neg2>:
    4446:	70 95       	com	r23
    4448:	61 95       	neg	r22
    444a:	7f 4f       	sbci	r23, 0xFF	; 255

0000444c <__divmodhi4_exit>:
    444c:	08 95       	ret

0000444e <__divmodhi4_neg1>:
    444e:	f6 f7       	brtc	.-4      	; 0x444c <__divmodhi4_exit>
    4450:	90 95       	com	r25
    4452:	81 95       	neg	r24
    4454:	9f 4f       	sbci	r25, 0xFF	; 255
    4456:	08 95       	ret

00004458 <__prologue_saves__>:
    4458:	2f 92       	push	r2
    445a:	3f 92       	push	r3
    445c:	4f 92       	push	r4
    445e:	5f 92       	push	r5
    4460:	6f 92       	push	r6
    4462:	7f 92       	push	r7
    4464:	8f 92       	push	r8
    4466:	9f 92       	push	r9
    4468:	af 92       	push	r10
    446a:	bf 92       	push	r11
    446c:	cf 92       	push	r12
    446e:	df 92       	push	r13
    4470:	ef 92       	push	r14
    4472:	ff 92       	push	r15
    4474:	0f 93       	push	r16
    4476:	1f 93       	push	r17
    4478:	cf 93       	push	r28
    447a:	df 93       	push	r29
    447c:	cd b7       	in	r28, 0x3d	; 61
    447e:	de b7       	in	r29, 0x3e	; 62
    4480:	ca 1b       	sub	r28, r26
    4482:	db 0b       	sbc	r29, r27
    4484:	0f b6       	in	r0, 0x3f	; 63
    4486:	f8 94       	cli
    4488:	de bf       	out	0x3e, r29	; 62
    448a:	0f be       	out	0x3f, r0	; 63
    448c:	cd bf       	out	0x3d, r28	; 61
    448e:	09 94       	ijmp

00004490 <__epilogue_restores__>:
    4490:	2a 88       	ldd	r2, Y+18	; 0x12
    4492:	39 88       	ldd	r3, Y+17	; 0x11
    4494:	48 88       	ldd	r4, Y+16	; 0x10
    4496:	5f 84       	ldd	r5, Y+15	; 0x0f
    4498:	6e 84       	ldd	r6, Y+14	; 0x0e
    449a:	7d 84       	ldd	r7, Y+13	; 0x0d
    449c:	8c 84       	ldd	r8, Y+12	; 0x0c
    449e:	9b 84       	ldd	r9, Y+11	; 0x0b
    44a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    44a2:	b9 84       	ldd	r11, Y+9	; 0x09
    44a4:	c8 84       	ldd	r12, Y+8	; 0x08
    44a6:	df 80       	ldd	r13, Y+7	; 0x07
    44a8:	ee 80       	ldd	r14, Y+6	; 0x06
    44aa:	fd 80       	ldd	r15, Y+5	; 0x05
    44ac:	0c 81       	ldd	r16, Y+4	; 0x04
    44ae:	1b 81       	ldd	r17, Y+3	; 0x03
    44b0:	aa 81       	ldd	r26, Y+2	; 0x02
    44b2:	b9 81       	ldd	r27, Y+1	; 0x01
    44b4:	ce 0f       	add	r28, r30
    44b6:	d1 1d       	adc	r29, r1
    44b8:	0f b6       	in	r0, 0x3f	; 63
    44ba:	f8 94       	cli
    44bc:	de bf       	out	0x3e, r29	; 62
    44be:	0f be       	out	0x3f, r0	; 63
    44c0:	cd bf       	out	0x3d, r28	; 61
    44c2:	ed 01       	movw	r28, r26
    44c4:	08 95       	ret

000044c6 <malloc>:
    44c6:	cf 93       	push	r28
    44c8:	df 93       	push	r29
    44ca:	bc 01       	movw	r22, r24
    44cc:	82 30       	cpi	r24, 0x02	; 2
    44ce:	91 05       	cpc	r25, r1
    44d0:	10 f4       	brcc	.+4      	; 0x44d6 <malloc+0x10>
    44d2:	62 e0       	ldi	r22, 0x02	; 2
    44d4:	70 e0       	ldi	r23, 0x00	; 0
    44d6:	a0 91 ce 01 	lds	r26, 0x01CE
    44da:	b0 91 cf 01 	lds	r27, 0x01CF
    44de:	ed 01       	movw	r28, r26
    44e0:	e0 e0       	ldi	r30, 0x00	; 0
    44e2:	f0 e0       	ldi	r31, 0x00	; 0
    44e4:	40 e0       	ldi	r20, 0x00	; 0
    44e6:	50 e0       	ldi	r21, 0x00	; 0
    44e8:	21 c0       	rjmp	.+66     	; 0x452c <malloc+0x66>
    44ea:	88 81       	ld	r24, Y
    44ec:	99 81       	ldd	r25, Y+1	; 0x01
    44ee:	86 17       	cp	r24, r22
    44f0:	97 07       	cpc	r25, r23
    44f2:	69 f4       	brne	.+26     	; 0x450e <malloc+0x48>
    44f4:	8a 81       	ldd	r24, Y+2	; 0x02
    44f6:	9b 81       	ldd	r25, Y+3	; 0x03
    44f8:	30 97       	sbiw	r30, 0x00	; 0
    44fa:	19 f0       	breq	.+6      	; 0x4502 <malloc+0x3c>
    44fc:	93 83       	std	Z+3, r25	; 0x03
    44fe:	82 83       	std	Z+2, r24	; 0x02
    4500:	04 c0       	rjmp	.+8      	; 0x450a <malloc+0x44>
    4502:	90 93 cf 01 	sts	0x01CF, r25
    4506:	80 93 ce 01 	sts	0x01CE, r24
    450a:	fe 01       	movw	r30, r28
    450c:	34 c0       	rjmp	.+104    	; 0x4576 <malloc+0xb0>
    450e:	68 17       	cp	r22, r24
    4510:	79 07       	cpc	r23, r25
    4512:	38 f4       	brcc	.+14     	; 0x4522 <malloc+0x5c>
    4514:	41 15       	cp	r20, r1
    4516:	51 05       	cpc	r21, r1
    4518:	19 f0       	breq	.+6      	; 0x4520 <malloc+0x5a>
    451a:	84 17       	cp	r24, r20
    451c:	95 07       	cpc	r25, r21
    451e:	08 f4       	brcc	.+2      	; 0x4522 <malloc+0x5c>
    4520:	ac 01       	movw	r20, r24
    4522:	fe 01       	movw	r30, r28
    4524:	8a 81       	ldd	r24, Y+2	; 0x02
    4526:	9b 81       	ldd	r25, Y+3	; 0x03
    4528:	9c 01       	movw	r18, r24
    452a:	e9 01       	movw	r28, r18
    452c:	20 97       	sbiw	r28, 0x00	; 0
    452e:	e9 f6       	brne	.-70     	; 0x44ea <malloc+0x24>
    4530:	41 15       	cp	r20, r1
    4532:	51 05       	cpc	r21, r1
    4534:	a9 f1       	breq	.+106    	; 0x45a0 <malloc+0xda>
    4536:	ca 01       	movw	r24, r20
    4538:	86 1b       	sub	r24, r22
    453a:	97 0b       	sbc	r25, r23
    453c:	04 97       	sbiw	r24, 0x04	; 4
    453e:	08 f4       	brcc	.+2      	; 0x4542 <malloc+0x7c>
    4540:	ba 01       	movw	r22, r20
    4542:	e0 e0       	ldi	r30, 0x00	; 0
    4544:	f0 e0       	ldi	r31, 0x00	; 0
    4546:	2a c0       	rjmp	.+84     	; 0x459c <malloc+0xd6>
    4548:	8d 91       	ld	r24, X+
    454a:	9c 91       	ld	r25, X
    454c:	11 97       	sbiw	r26, 0x01	; 1
    454e:	84 17       	cp	r24, r20
    4550:	95 07       	cpc	r25, r21
    4552:	f9 f4       	brne	.+62     	; 0x4592 <malloc+0xcc>
    4554:	64 17       	cp	r22, r20
    4556:	75 07       	cpc	r23, r21
    4558:	81 f4       	brne	.+32     	; 0x457a <malloc+0xb4>
    455a:	12 96       	adiw	r26, 0x02	; 2
    455c:	8d 91       	ld	r24, X+
    455e:	9c 91       	ld	r25, X
    4560:	13 97       	sbiw	r26, 0x03	; 3
    4562:	30 97       	sbiw	r30, 0x00	; 0
    4564:	19 f0       	breq	.+6      	; 0x456c <malloc+0xa6>
    4566:	93 83       	std	Z+3, r25	; 0x03
    4568:	82 83       	std	Z+2, r24	; 0x02
    456a:	04 c0       	rjmp	.+8      	; 0x4574 <malloc+0xae>
    456c:	90 93 cf 01 	sts	0x01CF, r25
    4570:	80 93 ce 01 	sts	0x01CE, r24
    4574:	fd 01       	movw	r30, r26
    4576:	32 96       	adiw	r30, 0x02	; 2
    4578:	4f c0       	rjmp	.+158    	; 0x4618 <malloc+0x152>
    457a:	ca 01       	movw	r24, r20
    457c:	86 1b       	sub	r24, r22
    457e:	97 0b       	sbc	r25, r23
    4580:	fd 01       	movw	r30, r26
    4582:	e8 0f       	add	r30, r24
    4584:	f9 1f       	adc	r31, r25
    4586:	61 93       	st	Z+, r22
    4588:	71 93       	st	Z+, r23
    458a:	02 97       	sbiw	r24, 0x02	; 2
    458c:	8d 93       	st	X+, r24
    458e:	9c 93       	st	X, r25
    4590:	43 c0       	rjmp	.+134    	; 0x4618 <malloc+0x152>
    4592:	fd 01       	movw	r30, r26
    4594:	82 81       	ldd	r24, Z+2	; 0x02
    4596:	93 81       	ldd	r25, Z+3	; 0x03
    4598:	9c 01       	movw	r18, r24
    459a:	d9 01       	movw	r26, r18
    459c:	10 97       	sbiw	r26, 0x00	; 0
    459e:	a1 f6       	brne	.-88     	; 0x4548 <malloc+0x82>
    45a0:	80 91 cc 01 	lds	r24, 0x01CC
    45a4:	90 91 cd 01 	lds	r25, 0x01CD
    45a8:	89 2b       	or	r24, r25
    45aa:	41 f4       	brne	.+16     	; 0x45bc <malloc+0xf6>
    45ac:	80 91 79 01 	lds	r24, 0x0179
    45b0:	90 91 7a 01 	lds	r25, 0x017A
    45b4:	90 93 cd 01 	sts	0x01CD, r25
    45b8:	80 93 cc 01 	sts	0x01CC, r24
    45bc:	40 91 7b 01 	lds	r20, 0x017B
    45c0:	50 91 7c 01 	lds	r21, 0x017C
    45c4:	41 15       	cp	r20, r1
    45c6:	51 05       	cpc	r21, r1
    45c8:	41 f4       	brne	.+16     	; 0x45da <malloc+0x114>
    45ca:	4d b7       	in	r20, 0x3d	; 61
    45cc:	5e b7       	in	r21, 0x3e	; 62
    45ce:	80 91 77 01 	lds	r24, 0x0177
    45d2:	90 91 78 01 	lds	r25, 0x0178
    45d6:	48 1b       	sub	r20, r24
    45d8:	59 0b       	sbc	r21, r25
    45da:	20 91 cc 01 	lds	r18, 0x01CC
    45de:	30 91 cd 01 	lds	r19, 0x01CD
    45e2:	24 17       	cp	r18, r20
    45e4:	35 07       	cpc	r19, r21
    45e6:	b0 f4       	brcc	.+44     	; 0x4614 <malloc+0x14e>
    45e8:	ca 01       	movw	r24, r20
    45ea:	82 1b       	sub	r24, r18
    45ec:	93 0b       	sbc	r25, r19
    45ee:	86 17       	cp	r24, r22
    45f0:	97 07       	cpc	r25, r23
    45f2:	80 f0       	brcs	.+32     	; 0x4614 <malloc+0x14e>
    45f4:	ab 01       	movw	r20, r22
    45f6:	4e 5f       	subi	r20, 0xFE	; 254
    45f8:	5f 4f       	sbci	r21, 0xFF	; 255
    45fa:	84 17       	cp	r24, r20
    45fc:	95 07       	cpc	r25, r21
    45fe:	50 f0       	brcs	.+20     	; 0x4614 <malloc+0x14e>
    4600:	42 0f       	add	r20, r18
    4602:	53 1f       	adc	r21, r19
    4604:	50 93 cd 01 	sts	0x01CD, r21
    4608:	40 93 cc 01 	sts	0x01CC, r20
    460c:	f9 01       	movw	r30, r18
    460e:	61 93       	st	Z+, r22
    4610:	71 93       	st	Z+, r23
    4612:	02 c0       	rjmp	.+4      	; 0x4618 <malloc+0x152>
    4614:	e0 e0       	ldi	r30, 0x00	; 0
    4616:	f0 e0       	ldi	r31, 0x00	; 0
    4618:	cf 01       	movw	r24, r30
    461a:	df 91       	pop	r29
    461c:	cf 91       	pop	r28
    461e:	08 95       	ret

00004620 <free>:
    4620:	cf 93       	push	r28
    4622:	df 93       	push	r29
    4624:	00 97       	sbiw	r24, 0x00	; 0
    4626:	09 f4       	brne	.+2      	; 0x462a <free+0xa>
    4628:	50 c0       	rjmp	.+160    	; 0x46ca <free+0xaa>
    462a:	ec 01       	movw	r28, r24
    462c:	22 97       	sbiw	r28, 0x02	; 2
    462e:	1b 82       	std	Y+3, r1	; 0x03
    4630:	1a 82       	std	Y+2, r1	; 0x02
    4632:	a0 91 ce 01 	lds	r26, 0x01CE
    4636:	b0 91 cf 01 	lds	r27, 0x01CF
    463a:	10 97       	sbiw	r26, 0x00	; 0
    463c:	09 f1       	breq	.+66     	; 0x4680 <free+0x60>
    463e:	40 e0       	ldi	r20, 0x00	; 0
    4640:	50 e0       	ldi	r21, 0x00	; 0
    4642:	ac 17       	cp	r26, r28
    4644:	bd 07       	cpc	r27, r29
    4646:	08 f1       	brcs	.+66     	; 0x468a <free+0x6a>
    4648:	bb 83       	std	Y+3, r27	; 0x03
    464a:	aa 83       	std	Y+2, r26	; 0x02
    464c:	fe 01       	movw	r30, r28
    464e:	21 91       	ld	r18, Z+
    4650:	31 91       	ld	r19, Z+
    4652:	e2 0f       	add	r30, r18
    4654:	f3 1f       	adc	r31, r19
    4656:	ae 17       	cp	r26, r30
    4658:	bf 07       	cpc	r27, r31
    465a:	79 f4       	brne	.+30     	; 0x467a <free+0x5a>
    465c:	8d 91       	ld	r24, X+
    465e:	9c 91       	ld	r25, X
    4660:	11 97       	sbiw	r26, 0x01	; 1
    4662:	28 0f       	add	r18, r24
    4664:	39 1f       	adc	r19, r25
    4666:	2e 5f       	subi	r18, 0xFE	; 254
    4668:	3f 4f       	sbci	r19, 0xFF	; 255
    466a:	39 83       	std	Y+1, r19	; 0x01
    466c:	28 83       	st	Y, r18
    466e:	12 96       	adiw	r26, 0x02	; 2
    4670:	8d 91       	ld	r24, X+
    4672:	9c 91       	ld	r25, X
    4674:	13 97       	sbiw	r26, 0x03	; 3
    4676:	9b 83       	std	Y+3, r25	; 0x03
    4678:	8a 83       	std	Y+2, r24	; 0x02
    467a:	41 15       	cp	r20, r1
    467c:	51 05       	cpc	r21, r1
    467e:	71 f4       	brne	.+28     	; 0x469c <free+0x7c>
    4680:	d0 93 cf 01 	sts	0x01CF, r29
    4684:	c0 93 ce 01 	sts	0x01CE, r28
    4688:	20 c0       	rjmp	.+64     	; 0x46ca <free+0xaa>
    468a:	12 96       	adiw	r26, 0x02	; 2
    468c:	8d 91       	ld	r24, X+
    468e:	9c 91       	ld	r25, X
    4690:	13 97       	sbiw	r26, 0x03	; 3
    4692:	ad 01       	movw	r20, r26
    4694:	00 97       	sbiw	r24, 0x00	; 0
    4696:	11 f0       	breq	.+4      	; 0x469c <free+0x7c>
    4698:	dc 01       	movw	r26, r24
    469a:	d3 cf       	rjmp	.-90     	; 0x4642 <free+0x22>
    469c:	fa 01       	movw	r30, r20
    469e:	d3 83       	std	Z+3, r29	; 0x03
    46a0:	c2 83       	std	Z+2, r28	; 0x02
    46a2:	21 91       	ld	r18, Z+
    46a4:	31 91       	ld	r19, Z+
    46a6:	e2 0f       	add	r30, r18
    46a8:	f3 1f       	adc	r31, r19
    46aa:	ce 17       	cp	r28, r30
    46ac:	df 07       	cpc	r29, r31
    46ae:	69 f4       	brne	.+26     	; 0x46ca <free+0xaa>
    46b0:	88 81       	ld	r24, Y
    46b2:	99 81       	ldd	r25, Y+1	; 0x01
    46b4:	28 0f       	add	r18, r24
    46b6:	39 1f       	adc	r19, r25
    46b8:	2e 5f       	subi	r18, 0xFE	; 254
    46ba:	3f 4f       	sbci	r19, 0xFF	; 255
    46bc:	fa 01       	movw	r30, r20
    46be:	31 83       	std	Z+1, r19	; 0x01
    46c0:	20 83       	st	Z, r18
    46c2:	8a 81       	ldd	r24, Y+2	; 0x02
    46c4:	9b 81       	ldd	r25, Y+3	; 0x03
    46c6:	93 83       	std	Z+3, r25	; 0x03
    46c8:	82 83       	std	Z+2, r24	; 0x02
    46ca:	df 91       	pop	r29
    46cc:	cf 91       	pop	r28
    46ce:	08 95       	ret

000046d0 <atoi>:
    46d0:	fc 01       	movw	r30, r24
    46d2:	88 27       	eor	r24, r24
    46d4:	99 27       	eor	r25, r25
    46d6:	e8 94       	clt
    46d8:	21 91       	ld	r18, Z+
    46da:	20 32       	cpi	r18, 0x20	; 32
    46dc:	e9 f3       	breq	.-6      	; 0x46d8 <atoi+0x8>
    46de:	29 30       	cpi	r18, 0x09	; 9
    46e0:	10 f0       	brcs	.+4      	; 0x46e6 <atoi+0x16>
    46e2:	2e 30       	cpi	r18, 0x0E	; 14
    46e4:	c8 f3       	brcs	.-14     	; 0x46d8 <atoi+0x8>
    46e6:	2b 32       	cpi	r18, 0x2B	; 43
    46e8:	41 f0       	breq	.+16     	; 0x46fa <atoi+0x2a>
    46ea:	2d 32       	cpi	r18, 0x2D	; 45
    46ec:	39 f4       	brne	.+14     	; 0x46fc <atoi+0x2c>
    46ee:	68 94       	set
    46f0:	04 c0       	rjmp	.+8      	; 0x46fa <atoi+0x2a>
    46f2:	0e 94 df 23 	call	0x47be	; 0x47be <__mulhi_const_10>
    46f6:	82 0f       	add	r24, r18
    46f8:	91 1d       	adc	r25, r1
    46fa:	21 91       	ld	r18, Z+
    46fc:	20 53       	subi	r18, 0x30	; 48
    46fe:	2a 30       	cpi	r18, 0x0A	; 10
    4700:	c0 f3       	brcs	.-16     	; 0x46f2 <atoi+0x22>
    4702:	1e f4       	brtc	.+6      	; 0x470a <atoi+0x3a>
    4704:	90 95       	com	r25
    4706:	81 95       	neg	r24
    4708:	9f 4f       	sbci	r25, 0xFF	; 255
    470a:	08 95       	ret

0000470c <strtok>:
    470c:	4e eb       	ldi	r20, 0xBE	; 190
    470e:	51 e0       	ldi	r21, 0x01	; 1
    4710:	0e 94 b8 23 	call	0x4770	; 0x4770 <strtok_r>
    4714:	08 95       	ret

00004716 <memcpy>:
    4716:	fb 01       	movw	r30, r22
    4718:	dc 01       	movw	r26, r24
    471a:	02 c0       	rjmp	.+4      	; 0x4720 <memcpy+0xa>
    471c:	01 90       	ld	r0, Z+
    471e:	0d 92       	st	X+, r0
    4720:	41 50       	subi	r20, 0x01	; 1
    4722:	50 40       	sbci	r21, 0x00	; 0
    4724:	d8 f7       	brcc	.-10     	; 0x471c <memcpy+0x6>
    4726:	08 95       	ret

00004728 <strchr>:
    4728:	fc 01       	movw	r30, r24
    472a:	81 91       	ld	r24, Z+
    472c:	86 17       	cp	r24, r22
    472e:	21 f0       	breq	.+8      	; 0x4738 <strchr+0x10>
    4730:	88 23       	and	r24, r24
    4732:	d9 f7       	brne	.-10     	; 0x472a <strchr+0x2>
    4734:	99 27       	eor	r25, r25
    4736:	08 95       	ret
    4738:	31 97       	sbiw	r30, 0x01	; 1
    473a:	cf 01       	movw	r24, r30
    473c:	08 95       	ret

0000473e <strlen>:
    473e:	fc 01       	movw	r30, r24
    4740:	01 90       	ld	r0, Z+
    4742:	00 20       	and	r0, r0
    4744:	e9 f7       	brne	.-6      	; 0x4740 <strlen+0x2>
    4746:	80 95       	com	r24
    4748:	90 95       	com	r25
    474a:	8e 0f       	add	r24, r30
    474c:	9f 1f       	adc	r25, r31
    474e:	08 95       	ret

00004750 <strncat>:
    4750:	fb 01       	movw	r30, r22
    4752:	dc 01       	movw	r26, r24
    4754:	0d 90       	ld	r0, X+
    4756:	00 20       	and	r0, r0
    4758:	e9 f7       	brne	.-6      	; 0x4754 <strncat+0x4>
    475a:	11 97       	sbiw	r26, 0x01	; 1
    475c:	41 50       	subi	r20, 0x01	; 1
    475e:	50 40       	sbci	r21, 0x00	; 0
    4760:	28 f0       	brcs	.+10     	; 0x476c <strncat+0x1c>
    4762:	01 90       	ld	r0, Z+
    4764:	00 20       	and	r0, r0
    4766:	0d 92       	st	X+, r0
    4768:	c9 f7       	brne	.-14     	; 0x475c <strncat+0xc>
    476a:	08 95       	ret
    476c:	1c 92       	st	X, r1
    476e:	08 95       	ret

00004770 <strtok_r>:
    4770:	fa 01       	movw	r30, r20
    4772:	a1 91       	ld	r26, Z+
    4774:	b0 81       	ld	r27, Z
    4776:	00 97       	sbiw	r24, 0x00	; 0
    4778:	19 f4       	brne	.+6      	; 0x4780 <strtok_r+0x10>
    477a:	10 97       	sbiw	r26, 0x00	; 0
    477c:	e1 f0       	breq	.+56     	; 0x47b6 <strtok_r+0x46>
    477e:	cd 01       	movw	r24, r26
    4780:	dc 01       	movw	r26, r24
    4782:	cd 01       	movw	r24, r26
    4784:	0d 90       	ld	r0, X+
    4786:	00 20       	and	r0, r0
    4788:	11 f4       	brne	.+4      	; 0x478e <strtok_r+0x1e>
    478a:	c0 01       	movw	r24, r0
    478c:	13 c0       	rjmp	.+38     	; 0x47b4 <strtok_r+0x44>
    478e:	fb 01       	movw	r30, r22
    4790:	21 91       	ld	r18, Z+
    4792:	22 23       	and	r18, r18
    4794:	19 f0       	breq	.+6      	; 0x479c <strtok_r+0x2c>
    4796:	20 15       	cp	r18, r0
    4798:	d9 f7       	brne	.-10     	; 0x4790 <strtok_r+0x20>
    479a:	f3 cf       	rjmp	.-26     	; 0x4782 <strtok_r+0x12>
    479c:	fb 01       	movw	r30, r22
    479e:	21 91       	ld	r18, Z+
    47a0:	20 15       	cp	r18, r0
    47a2:	19 f4       	brne	.+6      	; 0x47aa <strtok_r+0x3a>
    47a4:	1e 92       	st	-X, r1
    47a6:	11 96       	adiw	r26, 0x01	; 1
    47a8:	06 c0       	rjmp	.+12     	; 0x47b6 <strtok_r+0x46>
    47aa:	22 23       	and	r18, r18
    47ac:	c1 f7       	brne	.-16     	; 0x479e <strtok_r+0x2e>
    47ae:	0d 90       	ld	r0, X+
    47b0:	00 20       	and	r0, r0
    47b2:	a1 f7       	brne	.-24     	; 0x479c <strtok_r+0x2c>
    47b4:	d0 01       	movw	r26, r0
    47b6:	fa 01       	movw	r30, r20
    47b8:	a1 93       	st	Z+, r26
    47ba:	b0 83       	st	Z, r27
    47bc:	08 95       	ret

000047be <__mulhi_const_10>:
    47be:	7a e0       	ldi	r23, 0x0A	; 10
    47c0:	97 9f       	mul	r25, r23
    47c2:	90 2d       	mov	r25, r0
    47c4:	87 9f       	mul	r24, r23
    47c6:	80 2d       	mov	r24, r0
    47c8:	91 0d       	add	r25, r1
    47ca:	11 24       	eor	r1, r1
    47cc:	08 95       	ret

000047ce <_exit>:
    47ce:	f8 94       	cli

000047d0 <__stop_program>:
    47d0:	ff cf       	rjmp	.-2      	; 0x47d0 <__stop_program>
